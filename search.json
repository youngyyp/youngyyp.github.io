[{"title":"常用hexo博客操作","url":"/2021/02/12/常用hexo博客操作/","content":"\n### 常用hexo指令\n\n**hexo s** (hexo server) : 启动本地服务器，用于预览主题。默认地址： http://localhost:4000/\n\n**hexo g** (hexo generate) : 生成网站静态文件到默认设置的 public 文件夹。\n\n**hexo d** (hexo deploy) : 自动生成网站静态文件，并部署到设定的仓库。\n\n**hexo clean** : 清除缓存文件 db.json 和已生成的静态文件 public。\n\n**hexo new** + md文件名称 ：会在/source/__posts目录下生成md文件以及创建同名的文件夹。\n\n**hexo new page** + 页面名称 ：新建一个页面，默认地址为 主页地址/页面名称。\n\n<!--more-->\n\n### 设置hexo首页只显示部分摘要（不显示全文）\n\n法一：在文章的`front-matter`中添加`description`，其中`description`中的内容就会被显示在首页上，其余一律不显示。\n\n```\n---\ntitle: 让首页显示部分内容\ndate: 2020-02-23 22:55:10\ndescription: 这是显示在首页的概述，正文内容均会被隐藏。\n---\n```\n\n法二：在需要截断的地方加入：\n\n```\n<!--more-->\n```\n\n首页就会显示这条以上的所有内容，隐藏接下来的所有内容。","tags":["博客"]},{"title":"吴恩达深度学习课程第一课_神经网络与深度学习","url":"/2021/02/09/吴恩达深度学习课程第一课_神经网络与深度学习/","content":"\n\n笔记目录http://www.ai-start.com/dl2017/\n\n课后习题1（仅含选择题，不过界面更好）https://www.kesci.com/mw/project/5e20243e2823a10036b542da\n\n课后习题2（含选择题和编程题）https://blog.csdn.net/u013733326/article/details/79827273\n\n# 第一周:深度学习引言\n\n### 神经网络简述\n\n在有关神经网络的文献中，你经常看得到这个函数。从趋近于零开始，然后变成一条直线。这个函数被称作**ReLU激活函数**，它的全称是Rectified Linear Unit。\n\n对于图像应用，我们经常在神经网络上使用**卷积**(Convolutional Neural Network)，通常缩写为**CNN**\n对于序列数据，经常使用**RNN**，一种**递归神经网络**（Recurrent Neural Network）\n\n**结构化数据**意味着数据的基本数据库。例如在房价预测中，你可能有一个数据库，有专门的几列数据告诉你卧室的大小和数量，这就是结构化数据。或预测用户是否会点击广告，你可能会得到关于用户的信息，比如年龄以及关于广告的一些信息，然后对你的预测分类标注，这就是结构化数据，意思是每个特征，比如说房屋大小卧室数量，或者是一个用户的年龄，都有一个很好的定义。\n\n**非结构化数据**是指比如音频，原始音频或者你想要识别的图像或文本中的内容。这里的特征可能是图像中的像素值或文本中的单个单词。\n\n<!--more-->\n\n# 第二周：神经网络的编程基础\n\n**逻辑回归**(Logistic Regression)是一个用于**二分类**(binary classification)的算法。首先我们从一个问题开始说起，这里有一个二分类问题的例子，假如你有一张图片作为输入，比如这只猫，如果识别这张图片为猫，则输出标签1作为结果；如果识别出不是猫，那么输出标签0作为结果。\n\n![image-20210130230331844](https://raw.githubusercontent.com/youngyyp/blogpicture/master/img/image-20210130230331844.png)\n\n本节主要介绍逻辑回归的**Hypothesis Function**（假设函数）\n\n![image-20210130170346158](https://raw.githubusercontent.com/youngyyp/blogpicture/master/img/image-20210130170346158.png)\n\n逻辑回归的**代价函数**（Logistic Regression Cost Function）\n\n我们通过这个称为的损失函数，来衡量预测输出值和实际值有多接近。一般我们用预测值和实际值的平方差或者它们平方差的一半，但是通常在逻辑回归中我们不这么做，因为当我们在学习逻辑回归参数的时候，会发现我们的优化目标不是凸优化，只能找到多个局部最优值，梯度下降法很可能找不到全局最优值，虽然平方差是一个不错的损失函数，但是我们在逻辑回归模型中会定义另外一个损失函数。\n\n我们在逻辑回归中用到的**损失函数**是：![image-20210130232244430](https://raw.githubusercontent.com/youngyyp/blogpicture/master/img/image-20210130232244430.png)\n\n**损失函数是单个样本的损失，成本函数是数据集总的损失，都是越小越好。**\n\n### 梯度下降法（Gradient Descent）\n\n![image-20210130232432229](https://raw.githubusercontent.com/youngyyp/blogpicture/master/img/image-20210130232432229.png)\n\n\n\n### Python 中的广播（Broadcasting in Python）\n\nnumpy两个数组的相加、相减以及相乘都是**对应元素**之间的操作。\n\n\n\n","tags":["深度学习"]},{"title":"markdown_skills","url":"/2021/01/27/markdown_skills/","content":"\n# Markdown语法\n\n<!-- 这是一行注释 -->\n<div style='display: none'>\n哈哈我是注释，不会在浏览器中显示。\n</div>\n\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题  <!--最多6级标题-->\n#\n# 任务列表\n - [ ] 任务一 未做任务 `- + 空格 + [ ]`\n - [x] 任务二 已做任务 `- + 空格 + [x]`\n#\n# 首行缩进  \n【1】 &emsp;或&#8195; //全角  \n【2】 &ensp;或&#8194; //半角  \n【3】 &nbsp;或&#160;  //半角之半角  \n<!-- 换行需要每行后加两个空格 -->\n\n# 对齐方式 （支持部分html语法）\n<center>行中心对齐</center>\n<p align=\"left\">行左对齐</p>\n<p align=\"right\">行右对齐</p>\n\n#\n*斜体* 或 _斜体_  \n**粗体**   ***注意加粗不可与括号混用，可能出现bug***\n***加粗斜体***  \n~~删除线~~  \n++下划线++  \n==背景高亮==\n\n# 超链接、页内链接、自动链接、注脚\n## 行内式\n欢迎阅读 [择势勤](https://www.jianshu.com/u/16d77399d3a7 \"择势\")\n## 参考式\n我经常去的几个网站[Google][1]、[Leanote][2]。\n\n[1]:http://www.google.com\n[2]:http://www.leanote.com\n\n## 注脚\n使用 Markdown[^1]可以效率的书写文档, 直接转换成 HTML[^2]。\n\n[^1]:Markdown是一种纯文本标记语言 \n\n[^2]:Hyperssssssssssssssssssss不能带空格？       \n\n# 无序列表、有序列表、定义型列表\n* 无序列表项 一\n+ 无序列表项 二\n- 无序列表项 三  \n* 无序列表项 一\n\n1. 有序列表项 一\n2. 有序列表项 二\n3. 有序列表项 三\n\n![](markdown_skills/2021-01-27-15-35-30.png)\n注意:   存放图片的文件夹名称要和title一样\n[vscode贴图](https://www.etyang.com/2020/10/15/vscode/)\n[hexo显示图片]https://blog.csdn.net/cnds123321/article/details/109085776\n\n\n\n# 多级引用\n>>> 请问 Markdwon 怎么用？ - 小白\n>> 自己看教程！ - 愤青\n> 教程在哪？ - 小白\n\n# 字体格式\n<font face=\"黑体\">我是黑体字</font>\n<font face=\"微软雅黑\">我是微软雅黑</font>\n<font face=\"STCAIYUN\">我是华文彩云</font>\n<font color=#0099ff size=12 face=\"黑体\">黑体</font>\n<font color=gray size=5>gray</font>\n<font color=#00ffff size=3>null</font>\n\n# 代码块\nC语言里的函数 `scanf()` 怎么使用？\n\n```\ninclude <stdio.h> //这个点是键盘左上角的点\nint main(void)\n{\nprintf(\"Hello world\\n\");\n}\n```\n\n***\n# 流程图\n\n```mermaid\ngraph TD\nA[方形] --> B(圆角)\n    B --> C{条件a}\n    C --> |a=1| D[结果1]\n    C --> |a=2| E[结果2]\n    F[竖向流程图]\n```","tags":["博客相关"]},{"title":"Hello World","url":"/2021/01/26/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is my very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n"}]