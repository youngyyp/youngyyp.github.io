<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>young&#39;s blog</title>
  
  <subtitle>慢慢来，比较快</subtitle>
  <link href="https://youngyyp.github.io/atom.xml" rel="self"/>
  
  <link href="https://youngyyp.github.io/"/>
  <updated>2023-03-11T06:35:57.470Z</updated>
  <id>https://youngyyp.github.io/</id>
  
  <author>
    <name>young</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>动态规划</title>
    <link href="https://youngyyp.github.io/2023/02/01/cpp/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <id>https://youngyyp.github.io/2023/02/01/cpp/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</id>
    <published>2023-02-01T13:14:33.000Z</published>
    <updated>2023-03-11T06:35:57.470Z</updated>
    
    <content type="html"><![CDATA[<h2 id="动态规划基础知识"><a href="#动态规划基础知识" class="headerlink" title="动态规划基础知识"></a>动态规划基础知识</h2><p>动态规划，Dynamic Programming，简称DP，如果某一问题有很多重叠子问题，使用动态规划是最有效的。</p><p>动规是由前一个状态推导出来的，而贪心是局部直接选最优的</p><p>动规五部曲：</p><ol><li>确定dp数组（dp table）以及下标的含义</li><li>确定递推公式</li><li>dp数组如何初始化</li><li>确定遍历顺序</li><li>举例推导dp数组</li></ol><h2 id="509-斐波那契数"><a href="#509-斐波那契数" class="headerlink" title="509. 斐波那契数"></a>509. 斐波那契数</h2><p><a href="https://leetcode.cn/problems/fibonacci-number/">力扣题目链接(opens new window)</a></p><p>斐波那契数，通常用 F(n) 表示，形成的序列称为 斐波那契数列 。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是： F(0) = 0，F(1) = 1 F(n) = F(n - 1) + F(n - 2)，其中 n &gt; 1 给你n ，请计算 F(n) 。</p><p>我的：</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    int fib(int n) {        if(n == 0) return 0;        if(n == 1) return 1;        return fib(n-1) + fib(n-2);    }};</code></pre><p>题解动规：</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    int fib(int N) {        if (N <= 1) return N;        vector<int> dp(N + 1);        dp[0] = 0;        dp[1] = 1;        for (int i = 2; i <= N; i++) {            dp[i] = dp[i - 1] + dp[i - 2];        }        return dp[N];    }};</code></pre><h2 id="70-爬楼梯"><a href="#70-爬楼梯" class="headerlink" title="70. 爬楼梯"></a>70. 爬楼梯</h2><p><a href="https://leetcode.cn/problems/climbing-stairs/">力扣题目链接(opens new window)</a></p><p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</p><p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><p>注意：给定 n 是一个正整数。</p><p><strong>用递归和回溯都超出时间限制</strong></p><p>我的代码：</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    int climbStairs(int n) {        if (n <= 2) return n;        vector<int> dp(n+1);        dp[1] = 1;        dp[2] = 2;        for (int i = 3; i <= n; i++) {            dp[i] = dp[i - 1] + dp[i - 2];//关键        }        return dp[n];    }};</code></pre><h2 id="746-使用最小花费爬楼梯"><a href="#746-使用最小花费爬楼梯" class="headerlink" title="746. 使用最小花费爬楼梯"></a>746. 使用最小花费爬楼梯</h2><p><a href="https://leetcode.cn/problems/min-cost-climbing-stairs/">力扣题目链接(opens new window)</a></p><p>给你一个整数数组 <code>cost</code> ，其中 <code>cost[i]</code> 是从楼梯第 <code>i</code> 个台阶向上爬需要支付的费用。一旦你支付此费用，即可选择向上爬一个或者两个台阶。</p><p>你可以选择从下标为 <code>0</code> 或下标为 <code>1</code> 的台阶开始爬楼梯。</p><p>请你计算并返回达到楼梯顶部的最低花费。</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    int minCostClimbingStairs(vector<int>& cost) {        vector<int> dp(cost.size() + 1);        dp[0] = 0; // 默认第一步都是不花费体力的        dp[1] = 0;        for (int i = 2; i <= cost.size(); i++) {            dp[i] = min(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2]);        }        return dp[cost.size()];    }};</code></pre><h1 id="62-不同路径"><a href="#62-不同路径" class="headerlink" title="62.不同路径"></a>62.不同路径</h1><p><a href="https://leetcode.cn/problems/unique-paths/">力扣题目链接(opens new window)</a></p><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。</p><p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。</p><p>问总共有多少条不同的路径？</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    int uniquePaths(int m, int n) {        vector<vector<int>> dp(m, vector<int>(n, 0));        //初始化，最好吧初始化和逻辑处理分开写，比较明了        for (int i = 0; i < m; i++) dp[i][0] = 1;        for (int j = 0; j < n; j++) dp[0][j] = 1;        for(int i = 1; i < m; i++) {            for(int j = 1; j < n; j++){                dp[i][j] = dp[i-1][j] + dp[i][j-1];            }        }        return dp[m-1][n-1];    }};</code></pre><h1 id="63-不同路径-II"><a href="#63-不同路径-II" class="headerlink" title="63. 不同路径 II"></a>63. 不同路径 II</h1><p><a href="https://leetcode.cn/problems/unique-paths-ii/">力扣题目链接(opens new window)</a></p><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。</p><p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。</p><p>现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？</p><p>我的代码：</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {        int m = obstacleGrid.size(); //！！记住这里的方式        int n = obstacleGrid[0].size();        vector<vector<int>> dp(m, vector<int>(n, 0));        /* 这块的判断写复杂了        int sig = 1;        for (int i = 0; i < m; i++) {            if(obstacleGrid[i][0] == 1) {                dp[i][0] = 0;                sig = 0;            }            if(sig) dp[i][0] = 1;        }        sig = 1;        for (int j = 0; j < n; j++) {            if(obstacleGrid[0][j] == 1) {                dp[0][j] = 0;                sig = 0;            }            if(sig) dp[0][j] = 1;        }        */        //题解的初始化判断        for (int i = 0; i < m && obstacleGrid[i][0] == 0; i++) dp[i][0] = 1;        for (int j = 0; j < n && obstacleGrid[0][j] == 0; j++) dp[0][j] = 1;        for(int i = 1; i < m; i++) {            for(int j = 1; j < n; j++){                if(obstacleGrid[i][j] == 1) dp[i][j] = 0;                else dp[i][j] = dp[i-1][j] + dp[i][j-1];            }        }        return dp[m-1][n-1];    }};</code></pre><h2 id="343-整数拆分"><a href="#343-整数拆分" class="headerlink" title="343. 整数拆分"></a>343. 整数拆分</h2><p><a href="https://leetcode.cn/problems/integer-break/">力扣题目链接(opens new window)</a></p><p>给定一个正整数 n，将其拆分为至少两个正整数的和，并使这些整数的乘积最大化。 返回你可以获得的最大乘积。</p><p>思路：遍历，比较<code>dp[i - j] * j, (i - j) * j</code>大小，即比较拆成两个和拆成两个以上的乘积大小。</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    int integerBreak(int n) {        vector<int> dp(n+1);        dp[2] = 1;        for(int i = 3; i <= n; i++){            for (int j = 2; j < i; j++){                dp[i] = max(dp[i],max(dp[i - j] * j, (i - j) * j));            }        }        return dp[n];    }};</code></pre><h2 id="96-不同的二叉搜索树"><a href="#96-不同的二叉搜索树" class="headerlink" title="96.不同的二叉搜索树"></a>96.不同的二叉搜索树</h2><p><a href="https://leetcode.cn/problems/unique-binary-search-trees/">力扣题目链接(opens new window)</a></p><p>给定一个整数 n，求以 1 … n 为节点组成的<strong>二叉搜索树</strong>有多少种？</p><p>思路：</p><p><img src="/2023/02/01/cpp/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20230310111953290.png" alt="image-20230310111953290"> </p><p>dp[3] = dp[0]dp[2] + dp[1]dp[1]+dp[2]dp[0];</p><p>节点的数值其实关系不大，只要每个值不一样就行；</p><p>dp[i] += dp[j - 1] * dp[i - j];</p><p>代码：</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    int numTrees(int n) {        vector<int> dp(n+1);        dp[0] = 1;        dp[1] = 1;        for(int i = 2; i <= n; i++){            for(int j = 1; j <= i; j++){                dp[i] += dp[j - 1] * dp[i - j];            }        }        return dp[n];    }};</code></pre><h2 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h2><p>有N件物品和⼀个最多能背重量为W 的背包。第i件物品的重量是weight[i]，得到的价值是value[i] 。每件物品只能⽤⼀次，求解将哪些物品装⼊背包⾥物品价值总和最⼤。</p><p>例：</p><p>背包最⼤重量为4。<br>              重量    价值<br>物品0      1          15<br>物品1      3          20<br>物品2      4          30</p><p>思路：</p><p>对于背包问题，有⼀种写法， 是使⽤<strong>⼆维数组</strong>，即<code>dp[i] [j]</code> 表⽰从下标为<code>[0-i]</code>的物品⾥任意取，放进容量为<code>j</code>的背包，价值总和最⼤是多少。</p><p>不放物品i:  <code>dp[i-1] [j]</code></p><p>放物品i:<code>dp[i-1] * [j - weight[ i ]] + value[ i ]</code></p><pre class=" language-lang-cpp"><code class="language-lang-cpp">//测试代码void test_2_wei_bag_problem1() {    vector<int> weight = {1, 3, 4};    vector<int> value = {15, 20, 30};    int bagweight = 4;    // 二维数组    vector<vector<int>> dp(weight.size(), vector<int>(bagweight + 1, 0));    // 初始化    for (int j = weight[0]; j <= bagweight; j++) {        dp[0][j] = value[0];    }    // weight数组的大小 就是物品个数    for(int i = 1; i < weight.size(); i++) { // 遍历物品        for(int j = 0; j <= bagweight; j++) { // 遍历背包容量            if (j < weight[i]) dp[i][j] = dp[i - 1][j];            else dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);        }    }    cout << dp[weight.size() - 1][bagweight] << endl;}int main() {    test_2_wei_bag_problem1();}</code></pre>]]></content>
    
    
    <summary type="html">动态规划基础知识
动态规划，Dynamic Programming，简称DP，如果某一问题有很多重叠子问题，使用动态规划是最有效的。

动规是由前一个状态推导出来的，而贪心是局部直接选最优的

动规五部曲：

 1. 确定dp数组（dp table）以及下标的含义
 2. 确定递推公式
 3. dp数组如何初始化
 4. 确定遍历顺序
 5. 举例推导dp数组

509. 斐波那契数
力扣题目链接(opens new window)

斐波那契数，通常用 F(n) 表示，形成的序列称为 斐波那契数列 。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是： F(0) = 0</summary>
    
    
    
    <category term="CPP" scheme="https://youngyyp.github.io/categories/CPP/"/>
    
    
  </entry>
  
  <entry>
    <title>字符串</title>
    <link href="https://youngyyp.github.io/2023/02/01/cpp/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://youngyyp.github.io/2023/02/01/cpp/%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2023-02-01T13:14:33.000Z</published>
    <updated>2023-03-11T06:35:57.750Z</updated>
    
    <content type="html"><![CDATA[<h2 id="反转字符串"><a href="#反转字符串" class="headerlink" title="反转字符串"></a>反转字符串</h2><p><a href="https://leetcode.cn/problems/reverse-string/">力扣题目链接(opens new window)</a></p><p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 char[] 的形式给出。</p><p>不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。</p><p>你可以假设数组中的所有字符都是 ASCII 码表中的可打印字符。</p><p>示例 1：<br>输入：[“h”,”e”,”l”,”l”,”o”]<br>输出：[“o”,”l”,”l”,”e”,”h”]</p><p>示例 2：<br>输入：[“H”,”a”,”n”,”n”,”a”,”h”]<br>输出：[“h”,”a”,”n”,”n”,”a”,”H”]</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    void reverseString(vector<char>& s) {        char temp;        int left = 0;        int right = s.size() - 1;        while(left < right){            temp = s[right];            s[right] = s[left];            s[left] = temp;            left++;            right--;        }    }};</code></pre><p>解析答案：</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">void reverseString(vector<char>& s) {    for (int i = 0, j = s.size() - 1; i < s.size()/2; i++, j--) {        swap(s[i],s[j]); //注意何时使用库函数    }}</code></pre><h2 id="反转字符串II"><a href="#反转字符串II" class="headerlink" title="反转字符串II"></a>反转字符串II</h2><p><a href="https://leetcode.cn/problems/reverse-string-ii/">力扣题目链接(opens new window)</a></p><p>给定一个字符串 s 和一个整数 k，从字符串开头算起, 每计数至 2k 个字符，就反转这 2k 个字符中的前 k 个字符。</p><p>如果剩余字符少于 k 个，则将剩余字符全部反转。</p><p>如果剩余字符小于 2k 但大于或等于 k 个，则反转前 k 个字符，其余字符保持原样。</p><p>示例:</p><p>输入: s = “abcdefg”, k = 2<br>输出: “bacdfeg”</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    string reverseStr(string s, int k) {        for(int i = 0; i < s.size(); i = i + 2*k){            if(i + k > s.size()) reverse(s.begin()+i,s.end());            else reverse(s.begin()+i,s.begin()+i+k);        }        return s;    }    //也可自己构造reverse,但要记住官方的reverse是左闭右开    // void reverse_me(string& s, int start, int end) {    //     for (int i = start, j = end+1; i < j; i++, j--) {    //         swap(s[i], s[j-1]);    //     }    // }};</code></pre><h2 id="替换空格"><a href="#替换空格" class="headerlink" title="替换空格"></a>替换空格</h2><p><a href="https://leetcode.cn/problems/ti-huan-kong-ge-lcof/">力扣题目链接(opens new window)</a></p><p>请实现一个函数，把字符串 s 中的每个空格替换成”%20”。</p><p>示例 1： 输入：s = “We are happy.”<br>输出：”We%20are%20happy.”</p><p><strong>思路：</strong></p><p>首先扩充数组到每个空格替换成”%20”之后的大小。</p><p>然后从后向前替换空格，也就是双指针法</p><p><strong>题解：</strong></p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    string replaceSpace(string s) {        int length = s.size();        for(int i = 0; i < s.size(); i++){            if(s[i] == ' '){                length = length + 2;            }        }        int left = s.size() - 1;        int right = length - 1;        s.resize(length);        while(left >= 0){            if(s[left] == ' '){                s[right] = '0';                s[right-1] = '2';                s[right-2] = '%';                right = right - 3;            }else{                s[right] = s[left];                right--;             }            left--;        }        return s;    }};</code></pre><h2 id="翻转字符串里的单词"><a href="#翻转字符串里的单词" class="headerlink" title="翻转字符串里的单词*"></a>翻转字符串里的单词*</h2><p><a href="https://leetcode.cn/problems/reverse-words-in-a-string/">力扣题目链接(opens new window)</a></p><p>给定一个字符串，逐个翻转字符串中的每个单词。</p><p>示例 1：<br>输入: “the sky is blue”<br>输出: “blue is sky the”</p><p>示例 2：<br>输入: “  hello world!  “<br>输出: “world! hello”<br>解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。</p><p>示例 3：<br>输入: “a good  example”<br>输出: “example good a”<br>解释: 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。</p><p><strong>思路：</strong></p><p>若要不额外占用空间，首先去除多余空格，再翻转整个字符串，再用双指针翻转每个单词</p><p><strong>我的：</strong></p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    string reverseWords(string s) {        //双指针去除多余空格        int a = 0,b = 0;        while(a == 0 && s[b] == ' ') b++;        for(;b < s.size(); b++){            if(s[b] == ' ' && (s[b+1] == ' ' || b+1 >= s.size())) continue;             else {                s[a] = s[b];                a++;            }        }        s.resize(a);        //翻转字符串        reverse(s,0,s.size());        //双指针翻转每个单词        for(int c = 0,d = 0; d <= s.size(); d++){            if(s[d] == ' '|| d == s.size()){                reverse(s,c,d);                c = d + 1;            }        }        return s;    }    //左闭右开    void reverse(string& s, int start, int end) {        for (int i = start, j = end-1; i < j; i++, j--) {            swap(s[i], s[j]);        }    }};</code></pre><p><strong>题解：</strong></p><p><a href="https://www.cnblogs.com/zou-ma/p/16162731.html">https://www.cnblogs.com/zou-ma/p/16162731.html</a> </p><p>在 for 循环中，<code>i++</code>和 <code>++i</code>是一样一样的，但是<code>++i</code>的循环耗时短。</p><p>使用<code>++i</code>是一定程度上的系统优化</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    void reverse(string& s, int start, int end){ //翻转，区间写法：左闭右闭 []        for (int i = start, j = end; i < j; i++, j--) {            swap(s[i], s[j]);        }    }    void removeExtraSpaces(string& s) {//去除所有空格并在相邻单词之间添加空格, 快慢指针。        int slow = 0;   //整体思想参考https://programmercarl.com/0027.移除元素.html        for (int i = 0; i < s.size(); ++i) { //            if (s[i] != ' ') { //遇到非空格就处理，即删除所有空格。                if (slow != 0) s[slow++] = ' '; //手动控制空格，给单词之间添加空格。slow != 0说明不是第一个单词，需要在单词前添加空格。                while (i < s.size() && s[i] != ' ') { //补上该单词，遇到空格说明单词结束。                    s[slow++] = s[i++];                }            }        }        s.resize(slow); //slow的大小即为去除多余空格后的大小。    }    string reverseWords(string s) {        removeExtraSpaces(s); //去除多余空格，保证单词之间之只有一个空格，且字符串首尾没空格。        reverse(s, 0, s.size() - 1);        int start = 0; //removeExtraSpaces后保证第一个单词的开始下标一定是0。        for (int i = 0; i <= s.size(); ++i) {            if (i == s.size() || s[i] == ' ') { //到达空格或者串尾，说明一个单词结束。进行翻转。                reverse(s, start, i - 1); //翻转，注意是左闭右闭 []的翻转。                start = i + 1; //更新下一个单词的开始下标start            }        }        return s;    }};</code></pre><h2 id="左旋转字符串"><a href="#左旋转字符串" class="headerlink" title="左旋转字符串"></a>左旋转字符串</h2><p><a href="https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/">力扣题目链接(opens new window)</a></p><p>字符串的左旋转操作是把字符串前面的若干个字符转移到字符串的尾部。请定义一个函数实现字符串左旋转操作的功能。比如，输入字符串”abcdefg”和数字2，该函数将返回左旋转两位得到的结果”cdefgab”。</p><p>示例 1：<br>输入: s = “abcdefg”, k = 2<br>输出: “cdefgab”</p><p>示例 2：<br>输入: s = “lrloseumgh”, k = 6<br>输出: “umghlrlose”</p><p>限制：<br>1 &lt;= k &lt; s.length &lt;= 10000</p><p><strong>题解：</strong></p><p>整体反转+局部反转就可以实现反转单词顺序的目的</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    string reverseLeftWords(string s, int n) {        reverse(s.begin(),s.end());        reverse(s.begin(),s.end()-n);        reverse(s.end()-n,s.end());        return s;    }};</code></pre><h2 id="实现-strStr-——KMP算法"><a href="#实现-strStr-——KMP算法" class="headerlink" title="实现 strStr()——KMP算法"></a>实现 strStr()——KMP算法</h2><p><a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/">力扣题目链接(opens new window)</a></p><p>实现 strStr() 函数。</p><p>给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回 -1。</p><p>示例 1: 输入: haystack = “hello”, needle = “ll” 输出: 2</p><p>示例 2: 输入: haystack = “aaaaa”, needle = “bba” 输出: -1</p><p>说明: 当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。 对于本题而言，当 needle 是空字符串时我们应当返回 0 。这与C语言的 strstr() 以及 Java的 indexOf() 定义相符。</p><h4 id="kmp算法："><a href="#kmp算法：" class="headerlink" title="kmp算法："></a>kmp算法：</h4><p>那么使用KMP可以解决两类经典问题：</p><ol><li>匹配问题：<a href="https://programmercarl.com/0028.实现strStr.html">28. 实现 strStr()(opens new window)</a></li><li>重复子串问题：<a href="https://programmercarl.com/0459.重复的子字符串.html">459.重复的子字符串</a></li></ol><p>KMP的主要思想是<strong>当出现字符串不匹配时，可以知道一部分之前已经匹配的文本内容，可以利用这些信息避免从头再去做匹配了。</strong></p><p>文本串：aabaabaaf</p><p>模式串：aabaaf</p><p>next数组就是一个前缀表（prefix table），即最长相等前后缀</p><p>前缀：包含首字母，不包含尾字母的所有子串</p><p>后缀：包含尾字母，不包含首字母的所有子串</p><p><strong>前缀表是用来回退的，它记录了模式串与主串(文本串)不匹配的时候，模式串应该从哪里开始重新匹配。</strong></p><p><img src="https://code-thinking.cdn.bcebos.com/gifs/KMP%E7%B2%BE%E8%AE%B21.gif" alt="KMP详解1"></p><p>前缀表的求法：</p><p><img src="/2023/02/01/cpp/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20230212143008343.png" alt="image-20230212143008343" style="zoom: 25%;"></p><p>遇见冲突后找冲突的前一位所对应的前缀表，再从前缀表所对下标处继续匹配</p><p><img src="https://code-thinking.cdn.bcebos.com/gifs/KMP%E7%B2%BE%E8%AE%B22.gif" alt="KMP精讲2"></p><p>初始化： j 指向前缀末尾位置（也是当前公共前后缀的长度）   i 指向后缀末尾位置</p><p>前后缀不相同</p><p>前后缀相同</p><p>更新next数组</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    void getNext(int* next, const string& s) {        //初始化        int j = 0;        next[0] = 0;        // 相等就加（(i 和 j 都得加，而j加1后刚好等于当前i对应的next)，不相等就回溯;先考虑不相等的情况        for(int i = 1; i < s.size(); i++) {            while (j > 0 && s[i] != s[j]) {                j = next[j - 1];            }            if (s[i] == s[j]) {                j++;            }            next[i] = j;        }    }    int strStr(string haystack, string needle) {        if (needle.size() == 0) {            return 0;        }        int next[needle.size()];        getNext(next, needle);        int j = 0;        for (int i = 0; i < haystack.size(); i++) {            while(j > 0 && haystack[i] != needle[j]) {                j = next[j - 1];            }            if (haystack[i] == needle[j]) {                j++;            }            if (j == needle.size() ) {                return (i - needle.size() + 1);            }        }        return -1;    }};</code></pre><h1 id="重复的子字符串"><a href="#重复的子字符串" class="headerlink" title="重复的子字符串"></a>重复的子字符串</h1><p><a href="https://leetcode.cn/problems/repeated-substring-pattern/">力扣题目链接(opens new window)</a></p><p>给定一个非空的字符串，判断它是否可以由它的一个子串重复多次构成。给定的字符串只含有小写英文字母，并且长度不超过10000。</p><p>示例 1:<br>输入: “abab”<br>输出: True<br>解释: 可由子字符串 “ab” 重复两次构成。</p><p>示例 2:<br>输入: “aba”<br>输出: False</p><p>示例 3:<br>输入: “abcabcabcabc”<br>输出: True<br>解释: 可由子字符串 “abc” 重复四次构成。 (或者子字符串 “abcabc” 重复两次构成。)</p><p><strong>思路：</strong></p><p>字符串s：abcabc</p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20220728104931.png" alt="图二"></p><p>所以判断字符串s是否由重复子串组成，只要两个s拼接在一起，里面还出现一个s的话，就说明是由重复子串组成。</p><p>我的思路：可用上题的strStr()找</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">    bool repeatedSubstringPattern(string s) {        string t = s + s;        t.erase(t.begin()); t.erase(t.end() - 1); // 掐头去尾        if(strStr(t,s) != -1) return true;        return false;    }</code></pre><p>用KMP算法：</p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20220728212157.png" alt="图四" style="zoom:50%;"></p><p>如果len % (len - (next[len - 1])) == 0 ，则说明数组的长度正好可以被 (数组长度-最长相等前后缀的长度) 整除 ，说明该字符串有重复的子字符串。</p><p><strong>数组长度减去最长相同前后缀的长度相当于是第一个周期的长度，也就是一个周期的长度，如果这个周期可以被整除，就说明整个数组就是这个周期的循环。</strong></p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    void getNext (int* next, const string& s){        next[0] = 0;        int j = 0;        for(int i = 1;i < s.size(); i++){            while(j > 0 && s[i] != s[j]) {                j = next[j - 1];            }            if(s[i] == s[j]) {                j++;            }            next[i] = j;        }    }    bool repeatedSubstringPattern(string s) {        int len = s.size();        int next[len];        getNext(next, s);        if(next[len - 1] != 0 && len % (len - (next[len - 1])) == 0) return true;        else return false;    }};</code></pre>]]></content>
    
    
    <summary type="html">反转字符串
力扣题目链接(opens new window)

编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 char[] 的形式给出。

不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。

你可以假设数组中的所有字符都是 ASCII 码表中的可打印字符。

示例 1：
输入：[“h”,”e”,”l”,”l”,”o”]
输出：[“o”,”l”,”l”,”e”,”h”]

示例 2：
输入：[“H”,”a”,”n”,”n”,”a”,”h”]
输出：[“h”,”a”,”n”,”n”,”a”,”H”]

class Solutio</summary>
    
    
    
    <category term="CPP" scheme="https://youngyyp.github.io/categories/CPP/"/>
    
    
  </entry>
  
  <entry>
    <title>数组</title>
    <link href="https://youngyyp.github.io/2023/02/01/cpp/%E6%95%B0%E7%BB%84/"/>
    <id>https://youngyyp.github.io/2023/02/01/cpp/%E6%95%B0%E7%BB%84/</id>
    <published>2023-02-01T13:14:33.000Z</published>
    <updated>2023-03-11T06:35:58.017Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><ul><li>坚持<strong>左闭右闭or左闭又开</strong><ul><li>while(left &lt;= right)  or  while(left &lt; right)</li></ul></li><li>比较left、middle和right三个值</li></ul><h2 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h2><p>数组的元素在内存地址中是连续的，不能单独删除数组中的某个元素，只能覆盖。</p><p><strong>双指针法（快慢指针法</strong>）：通过一个快指针和慢指针在一个for循环下完成两个for循环的工作</p><ul><li>快指针：寻找不等于有目标元素的值 （通常快指针就是for循环里面的索引）</li><li>慢指针：指向新数组最后一个下标的位置</li></ul><pre class=" language-lang-cpp"><code class="language-lang-cpp">        for (int fast=0;fast<nums.size();fast++){            if (nums[fast] != val){                nums[slow] = nums[fast];                slow++;            }        }</code></pre><h2 id="长度最小的子数组"><a href="#长度最小的子数组" class="headerlink" title="长度最小的子数组"></a>长度最小的子数组</h2><blockquote><p>给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的 连续 子数组，并返回其长度。如果不存在符合条件的子数组，返回 0。<br>示例：<br>输入：s = 7, nums = [2,3,1,2,4,3] 输出：2 解释：子数组 [4,3] 是该条件下的长度最小的子数组</p></blockquote><p><strong>滑动窗口</strong>：不断的调节子序列的起始位置和终止位置。其实算是双指针法的一种，一个指向滑动窗口起始位置，一个指向末端。</p><p>滑动窗口主要确定如下三点：</p><ul><li>窗口内是什么？</li><li>如何移动窗口的起始位置？</li><li>如何移动窗口的结束位置？</li></ul><p><img src="/2023/02/01/cpp/%E6%95%B0%E7%BB%84/209.长度最小的子数组.gif" alt="209.长度最小的子数组"></p>]]></content>
    
    
    <summary type="html">二分查找
 * 坚持左闭右闭or左闭又开 * while(left &amp;lt;= right) or while(left &amp;lt; right)
   
   
 * 比较left、middle和right三个值

移除元素
数组的元素在内存地址中是连续的，不能单独删除数组中的某个元素，只能覆盖。

双指针法（快慢指针法）：通过一个快指针和慢指针在一个for循环下完成两个for循环的工作

 * 快指针：寻找不等于有目标元素的值 （通常快指针就是for循环里面的索引）
 * 慢指针：指向新数组最后一个下标的位置

        for (int fast=0;fast</summary>
    
    
    
    <category term="CPP" scheme="https://youngyyp.github.io/categories/CPP/"/>
    
    
  </entry>
  
  <entry>
    <title>贪心算法</title>
    <link href="https://youngyyp.github.io/2023/02/01/cpp/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    <id>https://youngyyp.github.io/2023/02/01/cpp/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</id>
    <published>2023-02-01T13:14:33.000Z</published>
    <updated>2023-03-11T06:35:58.075Z</updated>
    
    <content type="html"><![CDATA[<h2 id="贪心算法理论基础"><a href="#贪心算法理论基础" class="headerlink" title="贪心算法理论基础"></a>贪心算法理论基础</h2><p><strong>贪心的本质是选择每一阶段的局部最优，从而达到全局最优</strong>。</p><p>有同学问了如何验证可不可以用贪心算法呢？</p><p><strong>最好用的策略就是举反例，如果想不到反例，那么就试一试贪心吧</strong>。</p><h2 id="455-分发饼干"><a href="#455-分发饼干" class="headerlink" title="455.分发饼干"></a>455.分发饼干</h2><p><a href="https://leetcode.cn/problems/assign-cookies/">力扣题目链接(opens new window)</a></p><p>假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。</p><p>对每个孩子 i，都有一个胃口值 g[i]，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j，都有一个尺寸 s[j] 。如果 s[j] &gt;= g[i]，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。</p><p>思路：排序后遍历，将最大的饼干喂给能喂饱的胃口最大的孩子。</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    int findContentChildren(vector<int>& g, vector<int>& s) {        sort(g.begin(), g.end());        sort(s.begin(), s.end());        int index = s.size() - 1; // 饼干数组的下标        int result = 0;        for (int i = g.size() - 1; i >= 0; i--) { // 遍历胃口             if (index >= 0 && s[index] >= g[i]) { // 遍历饼干                 result++;                index--;            }        }        return result;    }};</code></pre><h2 id="135-分发糖果"><a href="#135-分发糖果" class="headerlink" title="135. 分发糖果"></a>135. 分发糖果</h2><p><a href="https://leetcode.cn/problems/candy/">力扣题目链接(opens new window)</a></p><p>老师想给孩子们分发糖果，有 N 个孩子站成了一条直线，老师会根据每个孩子的表现，预先给他们评分。</p><p>你需要按照以下要求，帮助老师给这些孩子分发糖果：</p><ul><li>每个孩子至少分配到 1 个糖果。</li><li>相邻的孩子中，评分高的孩子必须获得更多的糖果。</li></ul><p>那么这样下来，老师至少需要准备多少颗糖果呢？</p><p>思路：</p><p>这道题目一定是要确定一边之后，再确定另一边，例如比较每一个孩子的左边，然后再比较右边，<strong>如果两边一起考虑一定会顾此失彼</strong>。</p><p>先确定右边评分大于左边的情况（也就是从前向后遍历）</p><p>此时局部最优：只要右边评分比左边大，右边的孩子就多一个糖果，全局最优：相邻的孩子中，评分高的右孩子获得比左边孩子更多的糖果</p><p>局部最优可以推出全局最优。</p><p>再确定左孩子大于右孩子的情况（从后向前遍历）</p><p>取candyVec[i + 1] + 1 和 candyVec[i] 最大的糖果数量，<strong>candyVec[i]只有取最大的才能既保持对左边candyVec[i - 1]的糖果多，也比右边candyVec[i + 1]的糖果多</strong>。</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    int candy(vector<int>& ratings) {        vector<int> candyVec(ratings.size(), 1);        // 从前向后        for (int i = 1; i < ratings.size(); i++) {            if (ratings[i] > ratings[i - 1]) candyVec[i] = candyVec[i - 1] + 1;        }        // 从后向前        for (int i = ratings.size() - 2; i >= 0; i--) {            if (ratings[i] > ratings[i + 1] ) {                candyVec[i] = max(candyVec[i], candyVec[i + 1] + 1);            }        }        // 统计结果        int result = 0;        for (int i = 0; i < candyVec.size(); i++) result += candyVec[i];        return result;    }};</code></pre><h3 id="BM96-主持人调度（二）"><a href="#BM96-主持人调度（二）" class="headerlink" title="BM96 主持人调度（二）"></a><strong>BM96</strong> <strong>主持人调度（二）</strong></h3><h2 id="方法二（排序-贪心）"><a href="#方法二（排序-贪心）" class="headerlink" title="方法二（排序+贪心）"></a>方法二（排序+贪心）</h2><h4 id="1-解题思路"><a href="#1-解题思路" class="headerlink" title="1.解题思路"></a>1.解题思路</h4><ul><li>首先建立两个数组分别存储开始时间（记为start）和结束时间（记为end）。</li><li>然后分别对start和end数组进行排序。</li><li>接着遍历start数组，判断当前开始时间是否大于等于最小的结束时间，如果是，则说明当前主持人就可以搞定（对应当前最小的结束时间的那个活动）；如果否，则需要新增一个主持人，并将end数组下标后移（表示对应的活动已经有人主持）。</li></ul><h4 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2.代码实现"></a>2.代码实现</h4><pre class=" language-lang-cpp"><code class="language-lang-cpp">public class Solution {    public int minmumNumberOfHost (int n, int[][] startEnd) {        //初始化两个数组，分别记录开始时间和结束时间 ， 用vector也可以        int[] start=new int[n];        int[] end=new int[n];        //将活动的开始和结束时间赋值道start和end数组        for(int i=0;i<n;i++){            start[i]=startEnd[i][0];            end[i]=startEnd[i][1];        }        //按从小到大的顺序对start和end数组排序        Arrays.sort(start);        Arrays.sort(end);        int res=0,index=0;        for(int i=0;i<n;i++){            //如果大于等于当前最小的结束时间，说明当前主持人可以搞定 ????why？？？            if(start[i]>=end[index]){                index++;            }            //否则，需要新增主持人            else{                res++;            }        }        return res;    }}</code></pre><h4 id="3-复杂度分析"><a href="#3-复杂度分析" class="headerlink" title="3.复杂度分析"></a>3.复杂度分析</h4><ul><li>时间复杂度：需要进行排序，排序接口的时间复杂度是<script type="math/tex">O(nlogn)</script>，所以时间复杂度为<script type="math/tex">O(nlogn)</script></li><li>空间复杂度：需要额外大小为n的start和end数组，所以空间复杂度为<script type="math/tex">O(n)</script>。</li></ul>]]></content>
    
    
    <summary type="html">贪心算法理论基础
贪心的本质是选择每一阶段的局部最优，从而达到全局最优。

有同学问了如何验证可不可以用贪心算法呢？

最好用的策略就是举反例，如果想不到反例，那么就试一试贪心吧。

455.分发饼干
力扣题目链接(opens new window)

假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。

对每个孩子 i，都有一个胃口值 g[i]，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j，都有一个尺寸 s[j] 。如果 s[j] &amp;gt;= g[i]，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，</summary>
    
    
    
    <category term="CPP" scheme="https://youngyyp.github.io/categories/CPP/"/>
    
    
  </entry>
  
  <entry>
    <title>链表</title>
    <link href="https://youngyyp.github.io/2023/02/01/cpp/%E9%93%BE%E8%A1%A8/"/>
    <id>https://youngyyp.github.io/2023/02/01/cpp/%E9%93%BE%E8%A1%A8/</id>
    <published>2023-02-01T13:14:33.000Z</published>
    <updated>2023-03-11T06:35:58.340Z</updated>
    
    <content type="html"><![CDATA[<h2 id="链表理论基础"><a href="#链表理论基础" class="headerlink" title="链表理论基础"></a>链表理论基础</h2><p><img src="/2023/02/01/cpp/%E9%93%BE%E8%A1%A8/20200806194529815.png" alt="链表1"></p><pre class=" language-lang-cpp"><code class="language-lang-cpp">// 单链表struct ListNode {    int val;  // 节点上存储的元素    ListNode *next;  // 指向下一个节点的指针    ListNode(int x) : val(x), next(NULL) {}  // 节点的构造函数，val初始化为x，next初始化为NULL};</code></pre><p><img src="/2023/02/01/cpp/%E9%93%BE%E8%A1%A8/image-20221218173554982.png" alt="image-20221218173554982"></p><p>删除节点和添加节点：</p><p><img src="/2023/02/01/cpp/%E9%93%BE%E8%A1%A8/20200806195114541.png" alt="链表-删除节点"></p><p><img src="/2023/02/01/cpp/%E9%93%BE%E8%A1%A8/20200806195134331.png" alt="链表-添加节点"></p><p><img src="/2023/02/01/cpp/%E9%93%BE%E8%A1%A8/20200806195200276.png" alt="链表-链表与数据性能对比"></p><p>使用C，C++编程语言的话，不要忘了还要从<strong>内存中删除</strong>被移除的节点</p><h2 id="移除链表元素"><a href="#移除链表元素" class="headerlink" title="移除链表元素"></a>移除链表元素</h2><p>为了使用一种统一的逻辑来移除链表的节点，我们可以设置<strong>虚拟头节点</strong></p><p>最后在题目中，return 头结点的时候，需要 <code>return dummyNode-&gt;next;</code></p><h3 id="新建虚拟头节点："><a href="#新建虚拟头节点：" class="headerlink" title="新建虚拟头节点："></a>新建虚拟头节点：</h3><pre class=" language-lang-cpp"><code class="language-lang-cpp">ListNode* dummyHead = new ListNode(-1);</code></pre><p>注：当需要避免对头节点的情况进行特殊处理时，采用虚拟头节点</p><p><a href="https://blog.csdn.net/qq_54182926/article/details/119193250">(63条消息) C++之new的使用_软硬兼施的程序员的博客-CSDN博客_c++ new</a></p><p>一、new的使用。<br>new+数据类型（初值），返回值为申请空间的对应数据类型的地址。<br>1.使用new申请一个对象</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">int *p = new int(10);//申请了一个初值为10的整型数据</code></pre><p>2.使用new申请数组</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">int *arr = new int[10];//申请了能存放10个整型数据元素的数组，其首地址为arr</code></pre><p>二、delete运算符的使用。<br>new运算符通常搭配delete元素安抚来使用，new用来动态申请存储空间，delete用于释放new申请的空间。<br>语法格式如下：</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">delete p；delete[] arr;//注意要删除数组时，需要加[]，以表示arr为数组。</code></pre><h2 id="翻转链表"><a href="#翻转链表" class="headerlink" title="翻转链表"></a>翻转链表</h2><p>双指针法</p><p><img src="/2023/02/01/cpp/%E9%93%BE%E8%A1%A8/008eGmZEly1gnrf1oboupg30gy0c44qp.gif" alt="img"></p><h2 id="删除链表的倒数第N个节点"><a href="#删除链表的倒数第N个节点" class="headerlink" title="删除链表的倒数第N个节点"></a>删除链表的倒数第N个节点</h2><p>双指针法：fast先走n+1步，slow再和fast同时走。注意使用虚拟头节点</p><p><img src="https://code-thinking.cdn.bcebos.com/pics/19.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B93.png" alt="img" style="zoom:50%;"></p><h2 id="链表相交"><a href="#链表相交" class="headerlink" title="链表相交"></a>链表相交</h2><p>思路：相交部分长度相同，交点处指针相等。即先将长度对齐，再比较指针是否相同。</p><p>注：<strong>判断链表结束是看是否指向NULL，</strong>而不是0。没有使用虚拟头节点的话，判断如下<code>while(curA != NULL)</code>,不需要用curA-&gt;next</p><h2 id="环形链表"><a href="#环形链表" class="headerlink" title="环形链表"></a>环形链表</h2><p>题意： 给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</p><p><strong>判断环内相遇</strong>：双指针，慢指针每走一步，快指针走两步，如果两指针相遇，则表明有环。</p><p><img src="/2023/02/01/cpp/%E9%93%BE%E8%A1%A8/141.环形链表.gif" alt="141.环形链表"></p><p><strong>找到环的入口：</strong>（快指针可能走N圈才会和慢的相遇）</p><p><img src="/2023/02/01/cpp/%E9%93%BE%E8%A1%A8/142.环形链表II（求入口）.gif" alt="142.环形链表II（求入口）"></p><p><strong>从头结点出发一个指针，从相遇节点 也出发一个指针，这两个指针每次只走一个节点， 那么当这两个指针相遇的时候就是 环形入口的节点</strong>。</p>]]></content>
    
    
    <summary type="html">链表理论基础


// 单链表
struct ListNode {
    int val;  // 节点上存储的元素
    ListNode *next;  // 指向下一个节点的指针
    ListNode(int x) : val(x), next(NULL) {}  // 节点的构造函数，val初始化为x，next初始化为NULL
};




删除节点和添加节点：







使用C，C++编程语言的话，不要忘了还要从内存中删除被移除的节点

移除链表元素
为了使用一种统一的逻辑来移除链表的节点，我们可以设置虚拟头节点

最后在题目中，return 头结点的时候，需要 retu</summary>
    
    
    
    <category term="CPP" scheme="https://youngyyp.github.io/categories/CPP/"/>
    
    
  </entry>
  
  <entry>
    <title>哈希表</title>
    <link href="https://youngyyp.github.io/2023/02/01/cpp/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    <id>https://youngyyp.github.io/2023/02/01/cpp/%E5%93%88%E5%B8%8C%E8%A1%A8/</id>
    <published>2023-02-01T13:14:33.000Z</published>
    <updated>2023-03-11T06:35:57.686Z</updated>
    
    <content type="html"><![CDATA[<h2 id="哈希表理论基础"><a href="#哈希表理论基础" class="headerlink" title="哈希表理论基础"></a>哈希表理论基础</h2><p>哈希表是根据关键码的值而直接进行访问的数据结构。</p><p>当我们需要<strong>查询一个元素是否出现过，或者一个元素是否在集合里的时候</strong>，就要第一时间想到哈希法。</p><p><strong>拉链法</strong></p><p>刚刚小李和小王在索引1的位置发生了冲突，发生冲突的元素都被存储在链表中。 这样我们就可以通过索引找到小李和小王了</p><p><img src="/2023/02/01/cpp/%E5%93%88%E5%B8%8C%E8%A1%A8/20210104235015226.png" alt="哈希表4"></p><p>（数据规模是dataSize， 哈希表的大小为tableSize）</p><p>其实拉链法就是要选择适当的哈希表的大小，这样既不会因为数组空值而浪费大量内存，也不会因为链表太长而在查找上浪费太多时间。</p><p><strong>线性探测法</strong></p><p>使用线性探测法，一定要保证tableSize大于dataSize。 我们需要依靠哈希表中的空位来解决碰撞问题。</p><p>例如冲突的位置，放了小李，那么就向下找一个空位放置小王的信息。所以要求tableSize一定要大于dataSize ，要不然哈希表上就没有空置的位置来存放 冲突的数据了。如图所示：</p><p><img src="/2023/02/01/cpp/%E5%93%88%E5%B8%8C%E8%A1%A8/20210104235109950.png" alt="哈希表5"></p><p>常见的哈希结构：数组、set（集合）、map（映射）</p><blockquote><p>std::unordered_set底层实现为哈希表，std::set 和std::multiset 的底层实现是红黑树，红黑树是一种平衡二叉搜索树，所以key值是有序的，但key不可以修改，改动key值会导致整棵树的错乱，所以只能删除和增加。</p><p>std::unordered_map 底层实现为哈希表，std::map 和std::multimap 的底层实现是红黑树。同理，std::map 和std::multimap 的key也是有序的（这个问题也经常作为面试题，考察对语言容器底层的理解）。</p></blockquote><p><strong>当我们要使用集合来解决哈希问题的时候，优先使用unordered_set，因为它的查询和增删效率是最优的，如果需要集合是有序的，那么就用set，如果要求不仅有序还要有重复数据的话，那么就用multiset</strong></p><p>虽然std::set、std::multiset 的底层实现是红黑树，不是哈希表，不过给我们的使用方式，还是哈希法的使用方式，即key和value。map同理。</p><h2 id="有效的字母异位词"><a href="#有效的字母异位词" class="headerlink" title="有效的字母异位词"></a>有效的字母异位词</h2><p>题目：给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。</p><p>示例 1: 输入: s = “anagram”, t = “nagaram” 输出: true</p><p>示例 2: 输入: s = “rat”, t = “car” 输出: false</p><p><strong>说明:</strong> 你可以假设字符串只包含小写字母。</p><blockquote><p>数组就是简单的哈希表，但是数组的大小可不是无限开辟的</p></blockquote><p>本题使用数组模拟哈希表，数组大小为26，元素值代表字母出现的次数</p><p><img src="/2023/02/01/cpp/%E5%93%88%E5%B8%8C%E8%A1%A8/242.有效的字母异位词.gif" alt="242.有效的字母异位词"></p><h2 id="两个数组的交集"><a href="#两个数组的交集" class="headerlink" title="两个数组的交集"></a>两个数组的交集</h2><p><img src="/2023/02/01/cpp/%E5%93%88%E5%B8%8C%E8%A1%A8/20200818193523911.png" alt="349. 两个数组的交集"></p><p>本题结果是无重复的，且没有限制数组的长度，且无需排序，因此使用<strong>unordered_set</strong></p><blockquote><p><strong>使用数组来做哈希的题目，是因为题目都限制了数值的长度。</strong>而这道题目没有限制数值的长度，就无法使用数组来做哈希表了。</p><p>（用vector代替数组是否能解决限制长度的问题）</p><p><strong>而且如果哈希值比较少、特别分散、跨度非常大，使用数组就造成空间的极大浪费。</strong></p></blockquote><p><a href="https://blog.csdn.net/qq_40286920/article/details/124731777">c++ unordered<em>set详细操作</em>好人好事代表nxx的博客-CSDN博客_unordered_set</a></p><p><strong>使用迭代器构造</strong></p><pre class=" language-lang-cpp"><code class="language-lang-cpp">unordered_set<int> set3(set1.begin(), set1.end());</code></pre><p><strong>find()函数——查找</strong><br>//查找2，找到返回迭代器，失败返回end()</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">set1.find(2);</code></pre><p>题解：</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {        unordered_set<int> result_set;        unordered_set<int> nums_set(nums1.begin(),nums1.end());        for(int num:nums2){            if (nums_set.find(num) != nums_set.end()) {                result_set.insert(num);            }        }        return vector<int>(result_set.begin(), result_set.end()); //注意返回值类型    }};</code></pre><p>注：</p><p>那有同学可能问了，遇到哈希问题我直接都用set不就得了，用什么数组啊。</p><p>直接使用set 不仅占用空间比数组大，而且速度要比数组慢，set把数值映射到key上都要做hash计算的。</p><p>不要小瞧 这个耗时，在数据量大的情况，差距是很明显的。</p><h2 id="快乐数"><a href="#快乐数" class="headerlink" title="快乐数"></a>快乐数</h2><p>编写一个算法来判断一个数 n 是不是快乐数。</p><p>「快乐数」定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是 <strong>无限循环</strong> 但始终变不到 1。如果 可以变为 1，那么这个数就是快乐数。</p><p>如果 n 是快乐数就返回 True ；不是，则返回 False 。</p><p><strong>示例：</strong></p><p>输入：19<br>输出：true<br>解释：<br>1^2 + 9^2 = 82<br>8^2 + 2^2 = 68<br>6^2 + 8^2 = 100<br>1^2 + 0^2 + 0^2 = 1</p><p>题解：</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    int getSum(int n){        int sum = 0;        //取数值各个位上的单数操作        while(n){            sum += (n % 10) * (n % 10); //不可使用^2表示平方            n = n/10;        }        return sum;    }    bool isHappy(int n) {        unordered_set<int> sums_set;        while(1){            int sum = getSum(n);            if(sum == 1) return true;            if(sums_set.find(sum) != sums_set.end()) return false;            sums_set.insert(sum);            n = sum;        }    }};</code></pre><h2 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h2><p><a href="https://leetcode.cn/problems/two-sum/">力扣题目链接(opens new window)</a></p><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p><p><strong>示例:</strong></p><p>给定 nums = [2, 7, 11, 15], target = 9</p><p>因为 nums[0] + nums[1] = 2 + 7 = 9</p><p>所以返回 [0, 1]</p><p><strong>思路：</strong></p><p>每次遍历时要看这个<strong>元素</strong>之前是否出现过–&gt;考虑用哈希</p><p>同时要存元素和下表两个值–&gt;用map–&gt;元素对应key，下标对应value</p><p><strong>题解：</strong></p><p><a href="https://blog.csdn.net/zyc2018/article/details/93591189">(73条消息) C++之auto的使用<em>Waldeinsamkeit</em>的博客-CSDN博客_auto iter</a></p><p><a href="https://blog.csdn.net/u010112268/article/details/81153034">(73条消息) C++中pair的用法_淼淼1111的博客-CSDN博客_pair</a></p><pre class=" language-lang-c++"><code class="language-lang-c++">class Solution {public:    vector<int> twoSum(vector<int>& nums, int target) {        std::unordered_map <int,int> map;        for(int i = 0; i < nums.size(); i++){            auto iter = map.find(target-nums[i]);            if(iter != map.end()){                return {iter->second,i};            }else{                map.insert(pair<int, int>(nums[i], i));//可用此用法            }        }        return {};    }};</code></pre><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    vector<int> twoSum(vector<int>& nums, int target) {        unordered_map <int,int> map;        for(int i = 0; i < nums.size(); i++){            auto iter = map.find(target-nums[i]);            if(iter != map.end()){                return {iter->second,i};            }else{                map[nums[i]]=i;  //可用此用法            }        }        return {};    }};</code></pre><h2 id="四数相加"><a href="#四数相加" class="headerlink" title="四数相加"></a>四数相加</h2><p><a href="https://leetcode.cn/problems/4sum-ii/">力扣题目链接</a></p><p>给定四个包含整数的数组列表 A , B , C , D ,计算有多少个元组 (i, j, k, l) ，使得 A[i] + B[j] + C[k] + D[l] = 0。</p><p>为了使问题简单化，所有的 A, B, C, D 具有相同的长度 N，且 0 ≤ N ≤ 500 。所有整数的范围在 -2^28 到 2^28 - 1 之间，最终结果不会超过 2^31 - 1 。</p><p><strong>例如:</strong></p><p>输入:</p><ul><li>A = [ 1, 2]</li><li>B = [-2,-1]</li><li>C = [-1, 2]</li><li>D = [ 0, 2]</li></ul><p>输出:</p><p>2</p><p><strong>思路：</strong></p><p>HashMap 存一个数组，如 A。然后计算三个数组之和，如 BCD。时间复杂度为：O(n)+O(n^3)，得到 O(n^3).<br>HashMap 存三个数组之和，如 ABC。然后计算一个数组，如 D。时间复杂度为：O(n^3)+O(n)，得到 O(n^3).<br>HashMap 存两个数组之和，如AB。然后计算两个数组之和，如 CD。时间复杂度为：O(n^2) + O(n^2)，得到 O(n^2).</p><p>要存a+b的所有可能，以及出现的次数</p><p><strong>题解：</strong></p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    int fourSumCount(vector<int>& nums1, vector<int>& nums2, vector<int>& nums3, vector<int>& nums4) {        std::unordered_map <int,int> map12;        int sum12;        int sum34;        int num=0;        for(int i = 0; i < nums1.size(); i++){            for(int j = 0; j < nums2.size(); j++){                map12[nums1[i]+nums2[j]]++;            }        }        for(int i = 0; i < nums3.size(); i++){            for(int j = 0; j < nums4.size(); j++){                sum34 = nums3[i]+nums4[j];                if(map12.find(-sum34) != map12.end()){                    num = num + map12[-sum34];                }            }        }        return num;    }};</code></pre><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    int fourSumCount(vector<int>& A, vector<int>& B, vector<int>& C, vector<int>& D) {        unordered_map<int, int> umap; //key:a+b的数值，value:a+b数值出现的次数        // 遍历大A和大B数组，统计两个数组元素之和，和出现的次数，放到map中        for (int a : A) {   // 注意这种特殊用法            for (int b : B) {                umap[a + b]++;            }        }        int count = 0; // 统计a+b+c+d = 0 出现的次数        // 在遍历大C和大D数组，找到如果 0-(c+d) 在map中出现过的话，就把map中key对应的value也就是出现次数统计出来。        for (int c : C) {            for (int d : D) {                if (umap.find(0 - (c + d)) != umap.end()) {                    count += umap[0 - (c + d)];                }            }        }        return count;    }};</code></pre><p>后面大概还剩150道题</p><h2 id="赎金信"><a href="#赎金信" class="headerlink" title="赎金信"></a>赎金信</h2><p><a href="https://leetcode.cn/problems/ransom-note/">力扣题目链接</a></p><p>给定一个赎金信 (ransom) 字符串和一个杂志(magazine)字符串，判断第一个字符串 ransom 能不能由第二个字符串 magazines 里面的字符构成。如果可以构成，返回 true ；否则返回 false。</p><p>(题目说明：为了不暴露赎金信字迹，要从杂志上搜索各个需要的字母，组成单词来表达意思。杂志字符串中的每个字符只能在赎金信字符串中使用一次。)</p><p><strong>注意：</strong></p><p>你可以假设两个字符串均只含有小写字母。</p><p>canConstruct(“a”, “b”) -&gt; false<br>canConstruct(“aa”, “ab”) -&gt; false<br>canConstruct(“aa”, “aab”) -&gt; true</p><p><strong>题解：</strong></p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    bool canConstruct(string ransomNote, string magazine) {        unordered_map <int,int> map;        for(int i = 0; i < magazine.size(); i++){            map[magazine[i]]++;        }        for(int i = 0; i < ransomNote.size(); i++){            if(map.find(ransomNote[i]) != map.end()){                if(map[ransomNote[i]]>0){                    map[ransomNote[i]]--;                }else{                    return false;                }            }else{                return false;            }        }        return true;    }};</code></pre><p><strong>其实在本题的情况下，使用map的空间消耗要比数组大一些的，因为map要维护红黑树或者哈希表，而且还要做哈希函数，是费时的！数据量大的话就能体现出来差别了。 所以数组更加简单直接有效！</strong></p><pre class=" language-lang-cpp"><code class="language-lang-cpp">// 时间复杂度: O(n)// 空间复杂度：O(1)class Solution {public:    bool canConstruct(string ransomNote, string magazine) {        int record[26] = {0};        //add        if (ransomNote.size() > magazine.size()) {            return false;        }        for (int i = 0; i < magazine.length(); i++) {            // 通过recode数据记录 magazine里各个字符出现次数            record[magazine[i]-'a'] ++;        }        for (int j = 0; j < ransomNote.length(); j++) {            // 遍历ransomNote，在record里对应的字符个数做--操作            record[ransomNote[j]-'a']--;            // 如果小于零说明ransomNote里出现的字符，magazine没有            if(record[ransomNote[j]-'a'] < 0) {                return false;            }        }        return true;    }};</code></pre><h2 id="三数之和"><a href="#三数之和" class="headerlink" title="三数之和"></a>三数之和</h2><p><a href="https://leetcode.cn/problems/3sum/">力扣题目链接(opens new window)</a></p><p>给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有满足条件且不重复的三元组。</p><p><strong>注意：</strong> 答案中<strong>不可以包含重复</strong>的三元组。</p><p>示例：</p><p>给定数组 nums = [-1, 0, 1, 2, -1, -4]，</p><p>满足要求的三元组集合为： [ [-1, 0, 1], [-1, -1, 2] ]</p><p><strong>思考：</strong></p><p>哈希法C++代码:（此题不宜使用哈希法，去重比较复杂）</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    vector<vector<int>> threeSum(vector<int>& nums) {        vector<vector<int>> result;        sort(nums.begin(), nums.end());        // 找出a + b + c = 0        // a = nums[i], b = nums[j], c = -(a + b)        for (int i = 0; i < nums.size(); i++) {            // 排序之后如果第一个元素已经大于零，那么不可能凑成三元组            if (nums[i] > 0) {                break;            }            if (i > 0 && nums[i] == nums[i - 1]) { //三元组元素a去重                continue;            }            unordered_set<int> set;            for (int j = i + 1; j < nums.size(); j++) {                if (j > i + 2                        && nums[j] == nums[j-1]                        && nums[j-1] == nums[j-2]) { // 三元组元素b去重                    continue;                }                int c = 0 - (nums[i] + nums[j]);                if (set.find(c) != set.end()) {                    result.push_back({nums[i], nums[j], c});                    set.erase(c);// 三元组元素c去重                } else {                    set.insert(nums[j]);                }            }        }        return result;    }};</code></pre><p>使用双指针法更高效：</p><p><img src="/2023/02/01/cpp/%E5%93%88%E5%B8%8C%E8%A1%A8/15.三数之和.gif" alt="15.三数之和"></p><p>遇事不决先排序，两边逼近双指针</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    vector<vector<int>> threeSum(vector<int>& nums) {        vector<vector<int>> results;        sort(nums.begin(),nums.end());        for(int i = 0; i < nums.size(); i++){            if(nums[i] > 0) break;            //a去重            if(i>0 && nums[i] == nums[i-1]) continue;            //定义双指针            int left = i + 1;            int right = nums.size() - 1;            while(right > left){                int sum = nums[i]+nums[left]+nums[right];                if(sum > 0) right--;                else if(sum <0) left++;                else{                    results.push_back(vector<int>{nums[i],nums[left],nums[right]});                    //去重                    while (right > left && nums[right] == nums[right - 1]) right--;                    while (right > left && nums[left] == nums[left + 1]) left++;                    right--;                    left++;                }            }        }        return results;    }};</code></pre><h2 id="四数之和"><a href="#四数之和" class="headerlink" title="四数之和"></a>四数之和</h2><p><a href="https://leetcode.cn/problems/4sum/">力扣题目链接(opens new window)</a></p><p>题意：给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d ，使得 a + b + c + d 的值与 target 相等？找出所有满足条件且不重复的四元组。</p><p><strong>注意：</strong></p><p>答案中不可以包含重复的四元组。</p><p>示例： 给定数组 nums = [1, 0, -1, 0, -2, 2]，和 target = 0。 满足要求的四元组集合为： [ [-1, 0, 0, 1], [-2, -1, 1, 2], [-2, 0, 0, 2] ]</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    vector<vector<int>> fourSum(vector<int>& nums, int target) {        vector<vector<int>> results;        sort(nums.begin(),nums.end());        for(int j = 0; j < nums.size(); j++){            if(j>0 && nums[j] == nums[j-1]) continue;            for(int i = j + 1; i < nums.size(); i++){                //a去重                if(i>j+1 && nums[i] == nums[i-1]) continue;                //定义双指针                int left = i + 1;                int right = nums.size() - 1;                while(right > left){                    //此处需要强制转换为long，否则会溢出                    long sum =(long) nums[j]+nums[i]+nums[left]+nums[right];                    if(sum > target) right--;                    else if(sum <target) left++;                    else{                        results.push_back(vector<int>{nums[j],nums[i],nums[left],nums[right]});                        //去重                        while (right > left && nums[right] == nums[right - 1]) right--;                        while (right > left && nums[left] == nums[left + 1]) left++;                        right--;                        left++;                    }                }            }        }        return results;    }};</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在两数之和中map正式登场。</p><p>来说一说：使用数组和set来做哈希法的局限。</p><ul><li>数组的大小是受限制的，而且如果元素很少，而哈希值太大会造成内存空间的浪费。</li><li>set是一个集合，里面放的元素只能是一个key，而两数之和这道题目，不仅要判断y是否存在而且还要记录y的下标位置，因为要返回x 和 y的下标。所以set 也不能用。</li></ul><p>map是一种<code>&lt;key, value&gt;</code>的结构，两数之和可以用key保存数值，用value在保存数值所在的下标。所以使用map最为合适。</p>]]></content>
    
    
    <summary type="html">哈希表理论基础
哈希表是根据关键码的值而直接进行访问的数据结构。

当我们需要查询一个元素是否出现过，或者一个元素是否在集合里的时候，就要第一时间想到哈希法。

拉链法

刚刚小李和小王在索引1的位置发生了冲突，发生冲突的元素都被存储在链表中。 这样我们就可以通过索引找到小李和小王了



（数据规模是dataSize， 哈希表的大小为tableSize）

其实拉链法就是要选择适当的哈希表的大小，这样既不会因为数组空值而浪费大量内存，也不会因为链表太长而在查找上浪费太多时间。

线性探测法

使用线性探测法，一定要保证tableSize大于dataSize。 我们需要依靠哈希表中的空位来解决</summary>
    
    
    
    <category term="CPP" scheme="https://youngyyp.github.io/categories/CPP/"/>
    
    
  </entry>
  
  <entry>
    <title>回溯</title>
    <link href="https://youngyyp.github.io/2023/02/01/cpp/%E5%9B%9E%E6%BA%AF/"/>
    <id>https://youngyyp.github.io/2023/02/01/cpp/%E5%9B%9E%E6%BA%AF/</id>
    <published>2023-02-01T13:14:33.000Z</published>
    <updated>2023-03-11T06:35:57.689Z</updated>
    
    <content type="html"><![CDATA[<h2 id="回溯算法理论基础"><a href="#回溯算法理论基础" class="headerlink" title="回溯算法理论基础"></a>回溯算法理论基础</h2><p>回溯是递归的副产品，只要有递归就会有回溯。在下文中，<strong>回溯函数也就是递归函数，指的都是一个函数</strong></p><p><strong>回溯法解决的问题都可以抽象为树形结构</strong>，因为回溯法解决的都是在集合中递归查找子集，<strong>集合的大小就构成了树的宽度，递归的深度，都构成的树的深度</strong>。</p><p>回溯三部曲：</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">void backtracking(参数){    if (终止条件) {        存放结果;        return;    }    for (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) {        处理节点;        backtracking(路径，选择列表); // 递归        回溯，撤销处理结果    }}</code></pre><h2 id="第77题-组合"><a href="#第77题-组合" class="headerlink" title="第77题. 组合"></a>第77题. 组合</h2><p><a href="https://leetcode.cn/problems/combinations/">力扣题目链接(opens new window)</a></p><p>给定两个整数 n 和 k，返回 1 … n 中所有可能的 k 个数的组合。</p><p>示例:<br>输入: n = 4, k = 2<br>输出:<br>[<br>[2,4],<br>[3,4],<br>[2,3],<br>[1,2],<br>[1,3],<br>[1,4],<br>]</p><p>思路：</p><p>把组合问题抽象为如下树形结构：</p><p><img src="/2023/02/01/cpp/%E5%9B%9E%E6%BA%AF/20201123195223940-16777567027868.png" alt="77.组合" style="zoom:33%;"></p><p>题解：</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    vector<vector<int>> result; // 存放符合条件结果的集合    vector<int> path; // 用来存放符合条件结果    void backtracking(int n, int k, int startIndex) {        if(path.size() == k){            result.push_back(path);            return;        }        for(int i = startIndex; i <=n; i++){ //注意此处是<=            path.push_back(i);            backtracking(n, k, i + 1);            path.pop_back();        }    }    vector<vector<int>> combine(int n, int k) {        backtracking(n, k, 1);        return result;    }};</code></pre><p>剪枝优化题解：</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    vector<vector<int>> result; // 存放符合条件结果的集合    vector<int> path; // 用来存放符合条件结果    void backtracking(int n, int k, int startIndex) {        if(path.size() == k){            result.push_back(path);            return;        }        // n-i+1 >= k-path.size() 大多数回溯算法的剪枝操作，都是改这里i的范围        for(int i = startIndex; i <= n + 1 - k + path.size(); i++){ //注意此处是<=            path.push_back(i);            backtracking(n, k, i + 1);            path.pop_back();        }    }    vector<vector<int>> combine(int n, int k) {        backtracking(n, k, 1);        return result;    }};</code></pre><h2 id="216-组合总和III"><a href="#216-组合总和III" class="headerlink" title="216.组合总和III"></a>216.组合总和III</h2><p><a href="https://leetcode.cn/problems/combination-sum-iii/">力扣题目链接(opens new window)</a></p><p>找出所有相加之和为 n 的 k 个数的组合。组合中只允许含有 1 - 9 的正整数，并且每种组合中不存在重复的数字。</p><p>说明：</p><ul><li>所有数字都是正整数。</li><li>解集不能包含重复的组合。</li></ul><p>示例 1: 输入: k = 3, n = 7 输出: [[1,2,4]]</p><p>示例 2: 输入: k = 3, n = 9 输出: [[1,2,6], [1,3,5], [2,3,4]]</p><p>思路：</p><p>k是树的深度，n是树的宽度</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    vector<vector<int>> result;    vector<int> path;    void backtracking(int targetSum, int k, int sum, int startIndex){        if(path.size() == k){            if(sum == targetSum) result.push_back(path);            return;        }        for(int i = startIndex; i <= 9; i++){            path.push_back(i);            sum = sum + i;            backtracking(targetSum, k, sum, i+1);            sum = sum - i;            path.pop_back();        }    }    vector<vector<int>> combinationSum3(int k, int n) {        backtracking(n, k, 0, 1);        return result;    }};</code></pre><p>剪枝后：</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    vector<vector<int>> result;    vector<int> path;    void backtracking(int targetSum, int k, int sum, int startIndex){        if(sum > targetSum) return;        if(path.size() == k){            if(sum == targetSum) result.push_back(path);            return;        }        for(int i = startIndex; i <= 9 + 1 - k + path.size(); i++){            path.push_back(i);            sum = sum + i;            backtracking(targetSum, k, sum, i+1);            sum = sum - i;            path.pop_back();        }    }    vector<vector<int>> combinationSum3(int k, int n) {        backtracking(n, k, 0, 1);        return result;    }};</code></pre><h2 id="17-电话号码的字母组合"><a href="#17-电话号码的字母组合" class="headerlink" title="17.电话号码的字母组合"></a>17.电话号码的字母组合</h2><p><a href="https://leetcode.cn/problems/letter-combinations-of-a-phone-number/">力扣题目链接(opens new window)</a></p><p>给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。</p><p><img src="/2023/02/01/cpp/%E5%9B%9E%E6%BA%AF/2020102916424043.png" alt="17.电话号码的字母组合"></p><p>思路：</p><p><img src="/2023/02/01/cpp/%E5%9B%9E%E6%BA%AF/20201123200304469.png" alt="17. 电话号码的字母组合"></p><p>代码：</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    const string letterMap[10] = {        "", // 0        "", // 1        "abc", // 2        "def", // 3        "ghi", // 4        "jkl", // 5        "mno", // 6        "pqrs", // 7        "tuv", // 8        "wxyz", // 9    };    vector<string> result;    string s;    void backtracking(string digits, int index){        if (index == digits.size()) {            result.push_back(s);            return;        }        int digit = digits[index] - '0'; // 将index指向的数字转为int        string letters = letterMap[digit];        for (int i = 0; i < letters.size(); i++) {            s.push_back(letters[i]);            backtracking(digits,index + 1); // 递归            s.pop_back();        }    }    vector<string> letterCombinations(string digits) {        if(digits == "") return result;        backtracking(digits, 0);        return result;    }};</code></pre><h2 id="39-组合总和"><a href="#39-组合总和" class="headerlink" title="39. 组合总和"></a>39. 组合总和</h2><p><a href="https://leetcode.cn/problems/combination-sum/">力扣题目链接(opens new window)</a></p><p>给定一个<strong>无重复元素</strong>的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</p><p><code>candidates</code> 中的 <strong>同一个</strong> 数字可以 <strong>无限制重复被选取</strong></p><p><img src="/2023/02/01/cpp/%E5%9B%9E%E6%BA%AF/20201223170730367.png" alt="39.组合总和"></p><p>我的代码：</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    vector<vector<int>> results;    vector<int> path;    void backtracking(vector<int> candidates, int target, int index, int sum){        if(sum == target){            results.push_back(path);            return;        }        if(sum > target){            return;        }        for (int i = index; i < candidates.size(); i++) {            path.push_back(candidates[i]);            backtracking(candidates, target, i, sum + candidates[i]); // 递归            path.pop_back();        }    }    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {        backtracking(candidates, target, 0, 0);        return  results;    }};</code></pre><h2 id="40-组合总和II"><a href="#40-组合总和II" class="headerlink" title="40.组合总和II"></a>40.组合总和II</h2><p><a href="https://leetcode.cn/problems/combination-sum-ii/">力扣题目链接(opens new window)</a></p><p>给定一个数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</p><p>candidates 中的每个数字在每个组合中只能使用一次。</p><p>注意：数组candidates中会出现重复数字，需要<strong>排序后去重</strong></p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {private:    vector<vector<int>> result;    vector<int> path;    void backtracking(vector<int>& candidates, int target, int sum, int startIndex) {        if (sum == target) {            result.push_back(path);            return;        }        if(sum > target){            return;        }        for (int i = startIndex; i < candidates.size(); i++) {            // 要对同一树层使用过的元素进行跳过，这是本题的关键            if (i > startIndex && candidates[i] == candidates[i - 1]) {                continue;            }            path.push_back(candidates[i]);            backtracking(candidates, target, sum + candidates[i], i + 1); // 和39.组合总和的区别1，这里是i+1，每个数字在每个组合中只能使用一次            path.pop_back();        }    }public:    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {        path.clear();        result.clear();        // 首先把给candidates排序，让其相同的元素都挨在一起。        sort(candidates.begin(), candidates.end());        backtracking(candidates, target, 0, 0);        return result;    }};</code></pre><h2 id="131-分割回文串"><a href="#131-分割回文串" class="headerlink" title="131.分割回文串"></a>131.分割回文串</h2><p><a href="https://leetcode.cn/problems/palindrome-partitioning/">力扣题目链接(opens new window)</a></p><p>给定一个字符串 s，将 s 分割成一些子串，使每个子串都是回文串。</p><p>返回 s 所有可能的分割方案。</p><p>示例: 输入: “aab” 输出: [ [“aa”,”b”], [“a”,”a”,”b”] ]</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    // 用双指针法，一个指针从前向后，一个指针从后向前，如果前后指针所指向的元素是相等的，就是回文字符串    bool isPalindrome(const string& s, int start, int end) {        for (int i = start, j = end; i < j; i++, j--) {            if (s[i] != s[j]) {                return false;            }        }        return true;    }    vector<vector<string>> result;    vector<string> path; // 放已经回文的子串    void backtracking (const string& s, int startIndex) {        if (startIndex >= s.size()) {            result.push_back(path);            return;        }        for (int i = startIndex; i < s.size(); i++) {            if (isPalindrome(s, startIndex, i)) { // 是回文子串                // 获取[startIndex,i]在s中的子串                string str = s.substr(startIndex, i - startIndex + 1);                path.push_back(str);            } else {                // 如果不是则直接跳过                continue;            }            backtracking(s, i + 1); // 寻找i+1为起始位置的子串            path.pop_back();        // 回溯过程，弹出本次已经填在的子串        }    }    vector<vector<string>> partition(string s) {        backtracking(s, 0);        return result;    }};</code></pre><h2 id="93-复原IP地址"><a href="#93-复原IP地址" class="headerlink" title="93.复原IP地址"></a>93.复原IP地址</h2><p><a href="https://leetcode.cn/problems/restore-ip-addresses/">力扣题目链接(opens new window)</a></p><p>给定一个只包含数字的字符串，复原它并返回所有可能的 IP 地址格式。</p><p>有效的 IP 地址 正好由四个整数（每个整数位于 0 到 255 之间组成，且不能含有前导 0），整数之间用 ‘.’ 分隔。</p><p>示例 1：</p><ul><li>输入：s = “25525511135”</li><li>输出：[“255.255.11.135”,”255.255.111.35”]</li></ul><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    // 判断字符串s在左闭又闭区间[start, end]所组成的数字是否合法    bool isValid(const string& s, int start, int end) {        if (start > end) {            return false;        }        if (s[start] == '0' && start != end) { // 0开头的数字不合法                return false;        }        int num = 0;        for (int i = start; i <= end; i++) {            if (s[i] > '9' || s[i] < '0') { // 遇到非数字字符不合法                return false;            }            num = num * 10 + (s[i] - '0');            if (num > 255) { // 如果大于255了不合法                return false;            }        }        return true;    }    vector<string> result;// 记录结果    // startIndex: 搜索的起始位置，pointNum:添加逗点的数量    void backtracking(string& s, int startIndex, int pointNum){        if (pointNum == 3) { // 逗点数量为3时，分隔结束            // 判断第四段子字符串是否合法，如果合法就放进result中            if (isValid(s, startIndex, s.size() - 1)) {                result.push_back(s);            }            return;        }        for (int i = startIndex; i < s.size(); i++) {            if (isValid(s, startIndex, i)) { // 判断 [startIndex,i] 这个区间的子串是否合法                s.insert(s.begin() + i + 1 , '.');  // 在i的后面插入一个逗点                pointNum++;                backtracking(s, i + 2, pointNum);   // 插入逗点之后下一个子串的起始位置为i+2                pointNum--;                         // 回溯                s.erase(s.begin() + i + 1);         // 回溯删掉逗点            } else break; // 不合法，直接结束本层循环        }    }    vector<string> restoreIpAddresses(string s) {        if (s.size() < 4 || s.size() > 12) return result; // 算是剪枝了        backtracking(s, 0, 0);        return result;    }};</code></pre><h2 id="78-子集"><a href="#78-子集" class="headerlink" title="78.子集"></a>78.子集</h2><p><a href="https://leetcode.cn/problems/subsets/">力扣题目链接(opens new window)</a></p><p>给定一组<strong>不含重复元素</strong>的整数数组 nums，返回该数组所有可能的子集（幂集）。</p><p>说明：解集不能包含重复的子集。</p><p>示例: 输入: nums = [1,2,3] 输出: [ [3],  [1],  [2],  [1,2,3],  [1,3],  [2,3],  [1,2],  [] ]</p><p><strong>子集是收集树形结构中树的所有节点的结果</strong>。<strong>而组合问题、分割问题是收集树形结构中叶子节点的结果</strong>。</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    vector<vector<int>> result;    vector<int> path;    void backtracking(vector<int> nums, int index){        result.push_back(path);// 重点！不管到没到最后都要收集结果        //下面这个可要可不要,因为在for循环中给出了判断        if (index >= nums.size()) {            //不是在这里才收集结果            return;        }        for (int i = index; i < nums.size(); i++) {            path.push_back(nums[i]);            backtracking(nums, i + 1); // 递归            path.pop_back();        }    }    vector<vector<int>> subsets(vector<int>& nums) {        backtracking(nums, 0);        return result;    }};</code></pre><h2 id="90-子集II"><a href="#90-子集II" class="headerlink" title="90.子集II"></a>90.子集II</h2><p><a href="https://leetcode.cn/problems/subsets-ii/">力扣题目链接(opens new window)</a></p><p>给定一个可能包含<strong>重复元素</strong>的整数数组 nums，返回该数组所有可能的子集（幂集）。</p><p>说明：解集不能包含重复的子集。</p><p>示例:</p><ul><li>输入: [1,2,2]</li><li>输出: [ [2], [1], [1,2,2], [2,2], [1,2], [] ]</li></ul><p>思路：</p><p>本题就是在上一题的基础上加上了<strong>去重</strong>，通过<strong>排序去重</strong></p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {private:    vector<vector<int>> result;    vector<int> path;    void backtracking(vector<int>& nums, int startIndex) {        result.push_back(path);        //if (startIndex >= nums.size()) {        //    return;        //}        for (int i = startIndex; i < nums.size(); i++) {            //跳过重复元素            if (i > startIndex && nums[i] == nums[i - 1]) {                continue;            }            path.push_back(nums[i]);            backtracking(nums, i + 1);            path.pop_back();        }    }public:    vector<vector<int>> subsetsWithDup(vector<int>& nums) {        sort(nums.begin(), nums.end()); // 去重需要排序        backtracking(nums, 0);        return result;    }};</code></pre><h2 id="491-递增子序列"><a href="#491-递增子序列" class="headerlink" title="491.递增子序列"></a>491.递增子序列</h2><p><a href="https://leetcode.cn/problems/non-decreasing-subsequences/">力扣题目链接(opens new window)</a></p><p>给定一个整型数组, 你的任务是找到所有该数组的递增子序列，递增子序列的长度至少是2。</p><p>示例:</p><ul><li>输入: [4, 6, 7, 7]</li><li>输出: [[4, 6], [4, 7], [4, 6, 7], [4, 6, 7, 7], [6, 7], [6, 7, 7], [7,7], [4,7,7]]</li></ul><p>说明:</p><ul><li>给定数组的长度不会超过15。</li><li>数组中的整数范围是 [-100,100]。</li><li>给定数组中可能包含重复数字，相等的数字应该被视为递增的一种情况。</li></ul><p>思路：</p><p>不可对原数组进行重排，而且重复的数字不一定挨着出现，所以可以使用哈希表来判断数字是否用过</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {private:    vector<vector<int>> result;    vector<int> path;    void backtracking(vector<int>& nums, int startIndex) {        if (path.size() > 1) {            result.push_back(path);            // 注意这里不要加return，要取树上的节点        }        unordered_set<int> uset; // 使用set对本层元素进行去重        for (int i = startIndex; i < nums.size(); i++) {            //若当前数比上一个小（注意上一个是path.back），或者使用过，则跳过            if ((!path.empty() && nums[i] < path.back())                    || uset.find(nums[i]) != uset.end()) {                    continue;            }            uset.insert(nums[i]); // 记录这个元素在本层用过了，本层后面不能再用了            path.push_back(nums[i]);            backtracking(nums, i + 1);            path.pop_back();        }    }public:    vector<vector<int>> findSubsequences(vector<int>& nums) {        result.clear();        path.clear();        backtracking(nums, 0);        return result;    }};</code></pre><h2 id="46-全排列"><a href="#46-全排列" class="headerlink" title="46.全排列"></a>46.全排列</h2><p><a href="https://leetcode.cn/problems/permutations/">力扣题目链接(opens new window)</a></p><p>给定一个 没有重复 数字的序列，返回其所有可能的全排列。</p><p>示例:</p><ul><li>输入: [1,2,3]</li><li>输出: [ [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1] ]</li></ul><p>思路：</p><p>用used数组，用过的记为1</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    vector<vector<int>> result;    vector<int> path;    void backtracking (vector<int>& nums, vector<bool>& used) {        // 此时说明找到了一组        if (path.size() == nums.size()) {            result.push_back(path);            return;        }        for (int i = 0; i < nums.size(); i++) {            if (used[i] == true) continue; // path里已经收录的元素，直接跳过            used[i] = true;            path.push_back(nums[i]);            backtracking(nums, used);            path.pop_back();            used[i] = false;        }    }    vector<vector<int>> permute(vector<int>& nums) {        result.clear();        path.clear();        vector<bool> used(nums.size(), false);//注意vector的初始化方式        backtracking(nums, used);        return result;    }};</code></pre><h2 id="47-全排列-II"><a href="#47-全排列-II" class="headerlink" title="47.全排列 II"></a>47.全排列 II</h2><p><a href="https://leetcode.cn/problems/permutations-ii/">力扣题目链接(opens new window)</a></p><p>给定一个<strong>可包含重复</strong>数字的序列 nums ，按任意顺序返回所有<strong>不重复</strong>的全排列。</p><p>思路：</p><p>排序+used+set</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {private:    vector<vector<int>> result;    vector<int> path;    void backtracking (vector<int>& nums, vector<bool>& used) {        if (path.size() == nums.size()) {            result.push_back(path);            return;        }        unordered_set<int> uset; // 控制某一节点下的同一层元素不能重复        for (int i = 0; i < nums.size(); i++) {            if (uset.find(nums[i]) != uset.end()) {                continue;            }            if (used[i] == false) {  //控制同一树枝不重复                uset.insert(nums[i]); // 记录元素                used[i] = true;                path.push_back(nums[i]);                backtracking(nums, used);                path.pop_back();                used[i] = false;            }        }    }public:    vector<vector<int>> permuteUnique(vector<int>& nums) {        result.clear();        path.clear();        sort(nums.begin(), nums.end()); // 排序        vector<bool> used(nums.size(), false);        backtracking(nums, used);        return result;    }};</code></pre><h2 id="51-N皇后"><a href="#51-N皇后" class="headerlink" title="51. N皇后*"></a>51. N皇后*</h2><p><a href="https://leetcode.cn/problems/n-queens/">力扣题目链接(opens new window)</a></p><p>按照国际象棋的规则，皇后可以攻击与之处在同一行或同一列或<strong>同一斜线</strong>！上的棋子。</p><p>n 皇后问题 研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。</p><p>给你一个整数 n ，返回所有不同的 n 皇后问题 的解决方案。</p><p>每一种解法包含一个不同的 n 皇后问题 的棋子放置方案，该方案中 ‘Q’ 和 ‘.’ 分别代表了皇后和空位。</p><p>题解：</p><p>重点是 isValid函数的逻辑</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {private:vector<vector<string>> result;// n 为输入的棋盘大小// row 是当前递归到棋盘的第几行了void backtracking(int n, int row, vector<string>& chessboard) {    if (row == n) {        result.push_back(chessboard);        return;    }    for (int col = 0; col < n; col++) {        if (isValid(row, col, chessboard, n)) { // 验证合法就可以放            chessboard[row][col] = 'Q'; // 放置皇后            backtracking(n, row + 1, chessboard);            chessboard[row][col] = '.'; // 回溯，撤销皇后        }    }}bool isValid(int row, int col, vector<string>& chessboard, int n) {    // 检查列    for (int i = 0; i < row; i++) { // 这是一个剪枝        if (chessboard[i][col] == 'Q') {            return false;        }    }    // 检查 45度角是否有皇后    for (int i = row - 1, j = col - 1; i >=0 && j >= 0; i--, j--) {        if (chessboard[i][j] == 'Q') {            return false;        }    }    // 检查 135度角是否有皇后    for(int i = row - 1, j = col + 1; i >= 0 && j < n; i--, j++) {        if (chessboard[i][j] == 'Q') {            return false;        }    }    return true;}public:    vector<vector<string>> solveNQueens(int n) {        result.clear();        vector<string> chessboard(n, string(n, '.'));        backtracking(n, 0, chessboard);        return result;    }};</code></pre>]]></content>
    
    
    <summary type="html">回溯算法理论基础
回溯是递归的副产品，只要有递归就会有回溯。在下文中，回溯函数也就是递归函数，指的都是一个函数

回溯法解决的问题都可以抽象为树形结构，因为回溯法解决的都是在集合中递归查找子集，集合的大小就构成了树的宽度，递归的深度，都构成的树的深度。

回溯三部曲：

void backtracking(参数){
    if (终止条件) {
        存放结果;
        return;
    }

    for (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) {
        处理节点;
        backtracking(路径，选择列表); //</summary>
    
    
    
    <category term="CPP" scheme="https://youngyyp.github.io/categories/CPP/"/>
    
    
  </entry>
  
  <entry>
    <title>栈与队列</title>
    <link href="https://youngyyp.github.io/2023/02/01/cpp/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/"/>
    <id>https://youngyyp.github.io/2023/02/01/cpp/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/</id>
    <published>2023-02-01T13:14:33.000Z</published>
    <updated>2023-03-11T06:35:58.014Z</updated>
    
    <content type="html"><![CDATA[<h2 id="栈与队列理论基础"><a href="#栈与队列理论基础" class="headerlink" title="栈与队列理论基础"></a>栈与队列理论基础</h2><p>队列是先进先出，栈是先进后出。</p><p><strong>我们常用的SGI STL，如果没有指定底层实现的话，默认是以deque为缺省情况下栈的底层结构。</strong></p><p>deque是一个双向队列，只要封住一段，只开通另一端就可以实现栈的逻辑了。</p><p><strong>SGI STL中队列一样是以deque为缺省情况下的底部结构</strong></p><p>STL 栈和队列都不被归类为容器，而被归类为container adapter（ 容器适配器）。</p><h2 id="用栈实现队列"><a href="#用栈实现队列" class="headerlink" title="用栈实现队列"></a>用栈实现队列</h2><p><a href="https://leetcode.cn/problems/implement-queue-using-stacks/">力扣题目链接(opens new window)</a></p><p>使用栈实现队列的下列操作：</p><p>push(x) — 将一个元素放入队列的尾部。<br>pop() — 从队列首部移除元素。<br>peek() — 返回队列首部的元素。<br>empty() — 返回队列是否为空。</p><p>示例:</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">MyQueue queue = new MyQueue();queue.push(1);queue.push(2);queue.peek();  // 返回 1queue.pop();   // 返回 1queue.empty(); // 返回 false</code></pre><p>说明:</p><ul><li>你只能使用标准的栈操作 — 也就是只有 push to top, peek/pop from top, size, 和 is empty 操作是合法的。</li><li>你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。</li><li>假设所有操作都是有效的 （例如，一个空的队列不会调用 pop 或者 peek 操作）。</li></ul><p><strong>思路：</strong></p><p><img src="https://code-thinking.cdn.bcebos.com/gifs/232.%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97%E7%89%88%E6%9C%AC2.gif" alt="232.用栈实现队列版本2" style="zoom: 67%;"></p><p>在push数据的时候，只要数据放进输入栈就好，<strong>但在pop的时候，操作就复杂一些，输出栈如果为空，就把进栈数据全部导入进来（注意是全部导入）</strong>，再从出栈弹出数据，如果输出栈不为空，则直接从出栈弹出数据就可以了。</p><p>最后如何判断队列为空呢？<strong>如果进栈和出栈都为空的话，说明模拟的队列为空了。</strong></p><p><strong>代码：</strong></p><p>类的构造函数</p><p><a href="https://www.runoob.com/cplusplus/cpp-constructor-destructor.html">https://www.runoob.com/cplusplus/cpp-constructor-destructor.html</a></p><pre class=" language-lang-cpp"><code class="language-lang-cpp">stack<type> s; // 初始化s.push(value); // 入栈s.pop(); // 出栈，返回voids.empty(); // 判断空否s.top(); // 返回栈顶元素s.size();  // 返回栈元素个数</code></pre><p>在pop()之前要先用top()访问，pop()本身是不返回元素的。这个想法看来还真是有意义的</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class MyQueue {public:    stack<int> stIn;    stack<int> stOut;    MyQueue() {    }    void push(int x) {        stIn.push(x);    }    int pop() {        if(stOut.empty()){            while(!stIn.empty()){                stOut.push(stIn.top());                stIn.pop();            }        }        int result = stOut.top();        stOut.pop();        return result;    }    int peek() {        int res = this->pop(); // 直接使用已有的pop函数        stOut.push(res); // 因为pop函数弹出了元素res，所以再添加回去        return res;    }    bool empty() {        if(stOut.empty()&&stIn.empty()) return true;        else return false;    }};/** * Your MyQueue object will be instantiated and called as such: * MyQueue* obj = new MyQueue(); * obj->push(x); * int param_2 = obj->pop(); * int param_3 = obj->peek(); * bool param_4 = obj->empty(); */</code></pre><h2 id="225-用队列实现栈"><a href="#225-用队列实现栈" class="headerlink" title="225. 用队列实现栈"></a>225. 用队列实现栈</h2><p><a href="https://leetcode.cn/problems/implement-stack-using-queues/">力扣题目链接(opens new window)</a></p><p>使用单向队列实现栈的下列操作：</p><ul><li>push(x) — 元素 x 入栈</li><li>pop() — 移除栈顶元素</li><li>top() — 获取栈顶元素</li><li>empty() — 返回栈是否为空</li></ul><p>注意:</p><ul><li>你只能使用队列的基本操作— 也就是 push to back, peek/pop from front, size, 和 is empty 这些操作是合法的。</li><li>你所使用的语言也许不支持队列。 你可以使用 list 或者 deque（双端队列）来模拟一个队列 , 只要是标准的队列操作即可。</li><li>你可以假设所有操作都是有效的（例如, 对一个空的栈不会调用 pop 或者 top 操作）。</li></ul><p><strong>代码：</strong></p><p>queue操作：</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">q.front();        //获取队首q.back();        //获取队尾q.push(x);        //插入元素,x表示要插入的值,什么都行（但是类型必须和定义的相同）q.pop();        //将队头弹出,无返回值q.size();        //返回队列里有多少个元素q.empty();        //如果队列为空，返回true，否则返回false（ 等同于q.size()==0 ）q.swap(q2);        //交换q和q2里面的值(q2需要和q是一个类型)</code></pre><p><strong>一个队列在模拟栈弹出元素的时候只要将队列头部的元素（除了最后一个元素外） 重新添加到队列尾部，此时再去弹出元素就是栈的顺序了。</strong></p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class MyStack {public:    queue<int> que;    MyStack() {    }    void push(int x) {        que.push(x);    }    int pop() {        int size = que.size();        while(size >1){            que.push(que.front());            que.pop();            size--;        }        int result = que.front();        que.pop();        return result;    }    int top() {        int result = this->pop();        que.push(result);        return result;    }    bool empty() {        return que.empty();    }};/** * Your MyStack object will be instantiated and called as such: * MyStack* obj = new MyStack(); * obj->push(x); * int param_2 = obj->pop(); * int param_3 = obj->top(); * bool param_4 = obj->empty(); */</code></pre><h2 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20. 有效的括号"></a>20. 有效的括号</h2><p><a href="https://leetcode.cn/problems/valid-parentheses/">力扣题目链接(opens new window)</a></p><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</p><p>有效字符串需满足：</p><ul><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li><li>注意空字符串可被认为是有效字符串。</li></ul><p>示例 1:</p><ul><li>输入: “()”</li><li>输出: true</li></ul><p>示例 2:</p><ul><li>输入: “()[]{}”</li><li>输出: true</li></ul><p>示例 3:</p><ul><li>输入: “(]”</li><li>输出: false</li></ul><p>示例 4:</p><ul><li>输入: “([)]”</li><li>输出: false</li></ul><p>示例 5:</p><ul><li>输入: “{[]}”</li><li>输出: true</li></ul><p>我的代码：</p><p>使用单个栈实现</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    bool isValid(string s) {        stack<char> t;        for(int i = 0; i < s.size(); i++){            if(s[i] == '(' or s[i] == '[' or s[i] == '{'){                t.push(s[i]);            }else if(!t.empty()){                if((t.top() == '(' && s[i] == ')') or (t.top() == '[' && s[i] == ']') or (t.top() == '{' && s[i] == '}')) t.pop();                else return false;            }else return false;        }        if(t.size() == 0) return true;        else return false;    }};</code></pre><p>题解：</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    bool isValid(string s) {        if (s.size() % 2 != 0) return false; // 如果s的长度为奇数，一定不符合要求        stack<char> st;        for (int i = 0; i < s.size(); i++) {            if (s[i] == '(') st.push(')');            else if (s[i] == '{') st.push('}');            else if (s[i] == '[') st.push(']');            // 第三种情况：遍历字符串匹配的过程中，栈已经为空了，没有匹配的字符了，说明右括号没有找到对应的左括号 return false            // 第二种情况：遍历字符串匹配的过程中，发现栈里没有我们要匹配的字符。所以return false            else if (st.empty() || st.top() != s[i]) return false;            else st.pop(); // st.top() 与 s[i]相等，栈弹出元素        }        // 第一种情况：此时我们已经遍历完了字符串，但是栈不为空，说明有相应的左括号没有右括号来匹配，所以return false，否则就return true        return st.empty();    }};</code></pre><h2 id="1047-删除字符串中的所有相邻重复项"><a href="#1047-删除字符串中的所有相邻重复项" class="headerlink" title="1047. 删除字符串中的所有相邻重复项"></a>1047. 删除字符串中的所有相邻重复项</h2><p><a href="https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/">力扣题目链接(opens new window)</a></p><p>给出由小写字母组成的字符串 S，重复项删除操作会选择两个相邻且相同的字母，并删除它们。</p><p>在 S 上反复执行重复项删除操作，直到无法继续删除。</p><p>在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。</p><p>示例：</p><ul><li>输入：”abbaca”</li><li>输出：”ca”</li><li>解释：例如，在 “abbaca” 中，我们可以删除 “bb” 由于两字母相邻且相同，这是此时唯一可以执行删除操作的重复项。之后我们得到字符串 “aaca”，其中又只有 “aa” 可以执行重复项删除操作，所以最后的字符串为 “ca”。</li></ul><p>提示：</p><ul><li>1 &lt;= S.length &lt;= 20000</li><li>S 仅由小写英文字母组成。</li></ul><p>我的代码：</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    string removeDuplicates(string s) {        stack<char> t;        for(int i = 0; i < s.size(); i++){            if(t.empty() || s[i] != t.top()) t.push(s[i]);            else t.pop();        }        string result = "";        while (!t.empty()){            result += t.top(); //注意字符串的+操作            t.pop();        }        reverse (result.begin(), result.end()); // 此时字符串需要反转一下        return result;    }};</code></pre><p>题解：</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    string removeDuplicates(string S) {        stack<char> st;        for (char s : S) {            if (st.empty() || s != st.top()) {                st.push(s);            } else {                st.pop(); // s 与 st.top()相等的情况            }        }        string result = "";        while (!st.empty()) { // 将栈中元素放到result字符串汇总            result += st.top();            st.pop();        }        reverse (result.begin(), result.end()); // 此时字符串需要反转一下        return result;    }};</code></pre><p>还可以拿字符串直接作为栈，这样省去了栈还要转为字符串的操作。</p><p>代码如下：</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    string removeDuplicates(string S) {        string result;        for(char s : S) {            if(result.empty() || result.back() != s) {                result.push_back(s); //注意字符串操作            }            else {                result.pop_back();//注意字符串操作            }        }        return result;    }};</code></pre><h2 id="150-逆波兰表达式求值"><a href="#150-逆波兰表达式求值" class="headerlink" title="150. 逆波兰表达式求值"></a>150. 逆波兰表达式求值</h2><p><a href="https://leetcode.cn/problems/evaluate-reverse-polish-notation/">力扣题目链接</a></p><p>根据 逆波兰表示法，求表达式的值。</p><p>有效的运算符包括 + , - , * , / 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。</p><p>说明：</p><p>整数除法只保留整数部分。 给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。</p><p>示例 1：</p><ul><li>输入: [“2”, “1”, “+”, “3”, “ * “]</li><li>输出: 9</li><li>解释: 该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) = 9</li></ul><p>逆波兰表达式主要有以下两个优点：</p><ul><li>去掉括号后表达式无歧义，上式即便写成 1 2 + 3 4 + * 也可以依据次序计算出正确结果。</li><li>适合用栈操作运算：遇到数字则入栈；遇到运算符则取出栈顶两个数字进行计算，并将结果压入栈中。</li></ul><p><strong>代码：</strong></p><p>C++字符串转换(stoi；stol；stoul；stoll；stoull；stof；stod；stold)</p><p><a href="https://blog.csdn.net/weixin_43899069/article/details/110290292?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-4-110290292-blog-114146606.pc_relevant_multi_platform_whitelistv4&amp;spm=1001.2101.3001.4242.3&amp;utm_relevant_index=7">https://blog.csdn.net/weixin_43899069/article/details/110290292?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-4-110290292-blog-114146606.pc_relevant_multi_platform_whitelistv4&amp;spm=1001.2101.3001.4242.3&amp;utm_relevant_index=7</a></p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    int evalRPN(vector<string>& tokens) {        stack<long long> st;         for(int i = 0; i < tokens.size(); i++){            if (tokens[i] == "+" || tokens[i] == "-" || tokens[i] == "*" || tokens[i] == "/") {                long long num1 = st.top();                st.pop();                long long num2 = st.top();                st.pop();                if (tokens[i] == "+") st.push(num2 + num1);                if (tokens[i] == "-") st.push(num2 - num1);                if (tokens[i] == "*") st.push(num2 * num1);                if (tokens[i] == "/") st.push(num2 / num1);            }else{                st.push(stoll(tokens[i]));            }        }        return st.top();    }};</code></pre><h2 id="239-滑动窗口最大值——单调队列"><a href="#239-滑动窗口最大值——单调队列" class="headerlink" title="239. 滑动窗口最大值——单调队列"></a>239. 滑动窗口最大值——单调队列</h2><p><a href="https://leetcode.cn/problems/sliding-window-maximum/">力扣题目链接(opens new window)</a></p><p>给定一个数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。</p><p>返回滑动窗口中的最大值。</p><p>进阶：</p><p>你能在线性时间复杂度内解决此题吗？</p><p><img src="/2023/02/01/cpp/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/image-20230216192400940.png" alt="image-20230216192400940" style="zoom:33%;"></p><p><strong>思路：</strong></p><p><img src="https://code-thinking.cdn.bcebos.com/gifs/239.%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC-2.gif" alt="239.滑动窗口最大值-2" style="zoom:67%;"></p><p>使用<strong>单调队列</strong>:</p><ol><li>pop(value)：如果窗口移除的元素value等于单调队列的front元素，那么队列弹出元素，否则不用任何操作</li><li>push(value)：如果push的元素value大于<strong>back元素</strong>的数值，那么就将队列front的元素弹出，直到push元素的数值小于等于队列入口元素的数值为止</li></ol><p><strong>代码：</strong></p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    class MyQueue{ //单调队列（从大到小），由于需要访问q.back()和pop_back()，需要用双向的        public:            deque<int> q;            void pop(int x){                if(!q.empty() && x == q.front()) q.pop_front();            }        // 判断非空需要放在前面，如果改为x == q.front() && !q.empty()就会报错            void push(int x){                while(!q.empty() && x > q.back()) {                    q.pop_back();                }                q.push_back(x);            }            int front(){                return q.front();            }    };    vector<int> maxSlidingWindow(vector<int>& nums, int k) {        MyQueue que;        vector<int> results;        for(int i = 0; i < k; i++){            que.push(nums[i]);        }        results.push_back(que.front());        for(int i = k; i < nums.size(); i++){            que.pop(nums[i-k]);            que.push(nums[i]);            results.push_back(que.front());        }        return results;    }};</code></pre><h2 id="347-前-K-个高频元素——优先级队列"><a href="#347-前-K-个高频元素——优先级队列" class="headerlink" title="347.前 K 个高频元素——优先级队列"></a>347.前 K 个高频元素——优先级队列</h2><p><a href="https://leetcode.cn/problems/top-k-frequent-elements/">力扣题目链接(opens new window)</a></p><p>给定一个非空的整数数组，返回其中出现频率前 k 高的元素。</p><p>示例 1:</p><ul><li>输入: nums = [1,1,1,2,2,3], k = 2</li><li>输出: [1,2]</li></ul><p>思路：</p><p><strong>堆是一棵完全二叉树，树中每个结点的值都不小于（或不大于）其左右孩子的值。</strong> 如果父亲结点是大于等于左右孩子就是大顶堆，小于等于左右孩子就是小顶堆。</p><p>使用map（key元素  value频率）和小顶堆</p><p>【priority_queue优先队列的基础知识】</p><p><a href="https://leetcode.cn/problems/top-k-frequent-elements/solutions/1283998/c-xiao-bai-you-hao-you-xian-dui-lie-de-j-53ay/">https://leetcode.cn/problems/top-k-frequent-elements/solutions/1283998/c-xiao-bai-you-hao-you-xian-dui-lie-de-j-53ay/</a></p><p><a href="https://blog.csdn.net/qq_43679351/article/details/124825229">https://blog.csdn.net/qq_43679351/article/details/124825229</a></p><pre class=" language-lang-cpp"><code class="language-lang-cpp">// 时间复杂度：O(nlogk)// 空间复杂度：O(n)class Solution {public:    //小顶堆    class mycomparison{    public:        bool operator()(const pair<int, int>& lhs, const pair<int, int>& rhs) {            return lhs.second > rhs.second;        }    }; //注意这里的分号    vector<int> topKFrequent(vector<int>& nums, int k) {         // 要统计元素出现频率        unordered_map<int, int> map; // map<nums[i],对应出现的次数>        for (int i = 0; i < nums.size(); i++) {            map[nums[i]]++; //key元素  value频率        }        //上式可以改写为        // for (int i : nums) {        //    map[i]++; //key元素  value频率        //}        // 对频率排序        // 定义一个小顶堆，大小为k        priority_queue<pair<int, int>, vector<pair<int, int>>, mycomparison> q;        // 用固定大小为k的小顶堆，扫描所有频率的数值        for(auto& a:map){            q.push(a);            if(q.size()>k){               q.pop();             }        }        // 找出前K个高频元素，因为小顶堆先弹出的是最小的，所以倒序来输出到数组        vector<int> result(k);        for (int i = k - 1; i >= 0; i--) {            result[i] = q.top().first;            q.pop();        }        return result;    }};</code></pre>]]></content>
    
    
    <summary type="html">栈与队列理论基础
队列是先进先出，栈是先进后出。

我们常用的SGI STL，如果没有指定底层实现的话，默认是以deque为缺省情况下栈的底层结构。

deque是一个双向队列，只要封住一段，只开通另一端就可以实现栈的逻辑了。

SGI STL中队列一样是以deque为缺省情况下的底部结构

STL 栈和队列都不被归类为容器，而被归类为container adapter（ 容器适配器）。

用栈实现队列
力扣题目链接(opens new window)

使用栈实现队列的下列操作：

push(x) — 将一个元素放入队列的尾部。
pop() — 从队列首部移除元素。
peek() — 返回队</summary>
    
    
    
    <category term="CPP" scheme="https://youngyyp.github.io/categories/CPP/"/>
    
    
  </entry>
  
  <entry>
    <title>二叉树</title>
    <link href="https://youngyyp.github.io/2023/02/01/cpp/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://youngyyp.github.io/2023/02/01/cpp/%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2023-02-01T13:14:33.000Z</published>
    <updated>2023-03-11T06:35:57.362Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二叉树理论基础篇"><a href="#二叉树理论基础篇" class="headerlink" title="#二叉树理论基础篇"></a><a href="https://www.programmercarl.com/二叉树理论基础.html#二叉树理论基础篇">#</a>二叉树理论基础篇</h2><p><strong>C++中map、set、multimap，multiset的底层实现都是平衡二叉搜索树</strong>，所以map、set的增删操作时间时间复杂度是logn</p><p>unordered_map、unordered_set，unordered_map、unordered_map底层实现是哈希表</p><p>一棵树当中没有子结点（即度为0）的结点称为<em>叶子</em>结点，简称“<em>叶子</em>”</p><p><strong>二叉树主要有两种遍历方式：</strong></p><ol><li>深度优先遍历：先往深走，遇到叶子节点再往回走。</li><li>广度优先遍历：一层一层的去遍历。</li></ol><ul><li>深度优先遍历<ul><li>前序遍历（递归法，迭代法）</li><li>中序遍历（递归法，迭代法）</li><li>后序遍历（递归法，迭代法）</li></ul></li><li>广度优先遍历<ul><li>层次遍历（迭代法）</li></ul></li></ul><p>前中后是针对中间的节点</p><p><img src="/2023/02/01/cpp/%E4%BA%8C%E5%8F%89%E6%A0%91/20200806191109896.png" alt="img" style="zoom:50%;"></p><h3 id="二叉树的定义"><a href="#二叉树的定义" class="headerlink" title="#二叉树的定义"></a><a href="https://www.programmercarl.com/二叉树理论基础.html#二叉树的定义">#</a>二叉树的定义</h3><p>刚刚我们说过了二叉树有两种存储方式顺序存储，和链式存储，顺序存储就是用数组来存，这个定义没啥可说的，我们来看看链式存储的二叉树节点的定义方式。</p><p>C++代码如下：</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">struct TreeNode {    int val;    TreeNode *left;    TreeNode *right;    TreeNode(int x) : val(x), left(NULL), right(NULL) {}};</code></pre><h2 id="二叉树的递归遍历"><a href="#二叉树的递归遍历" class="headerlink" title="二叉树的递归遍历"></a>二叉树的递归遍历</h2><ul><li><a href="https://leetcode.cn/problems/binary-tree-preorder-traversal/">144.二叉树的前序遍历(opens new window)</a></li><li><a href="https://leetcode.cn/problems/binary-tree-postorder-traversal/">145.二叉树的后序遍历(opens new window)</a></li><li><a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/">94.二叉树的中序遍历</a></li></ul><h4 id="递归三要素："><a href="#递归三要素：" class="headerlink" title="递归三要素："></a>递归三要素：</h4><ol><li><p><strong>确定递归函数的参数和返回值：</strong> 确定哪些参数是递归的过程中需要处理的，那么就在递归函数里加上这个参数， 并且还要明确每次递归的返回值是什么进而确定递归函数的返回类型。</p></li><li><p><strong>确定终止条件：</strong> 写完了递归算法, 运行的时候，经常会遇到栈溢出的错误，就是没写终止条件或者终止条件写的不对，操作系统也是用一个栈的结构来保存每一层递归的信息，如果递归没有终止，操作系统的内存栈必然就会溢出。</p></li><li><p><strong>确定单层递归的逻辑：</strong> 确定每一层递归需要处理的信息。在这里也就会重复调用自己来实现递归的过程。</p></li></ol><p><strong>以下以前序遍历为例：</strong></p><ol><li><strong>确定递归函数的参数和返回值</strong>：因为要打印出前序遍历节点的数值，所以参数里需要传入vector来放节点的数值，除了这一点就不需要再处理什么数据了也不需要有返回值，所以递归函数返回类型就是void，代码如下：</li></ol><pre class=" language-lang-cpp"><code class="language-lang-cpp">void traversal(TreeNode* cur, vector<int>& vec)</code></pre><ol><li><strong>确定终止条件</strong>：在递归的过程中，如何算是递归结束了呢，当然是当前遍历的节点是空了，那么本层递归就要结束了，所以如果当前遍历的这个节点是空，就直接return，代码如下：</li></ol><pre class=" language-lang-cpp"><code class="language-lang-cpp">if (cur == NULL) return;</code></pre><ol><li><strong>确定单层递归的逻辑</strong>：前序遍历是中左右的循序，所以在单层递归的逻辑，是要先取中节点的数值，代码如下：</li></ol><pre class=" language-lang-cpp"><code class="language-lang-cpp">vec.push_back(cur->val);    // 中traversal(cur->left, vec);  // 左traversal(cur->right, vec); // 右</code></pre><p>前序遍历：</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    void traversal(TreeNode* cur, vector<int>& vec) {        if (cur == NULL) return;        vec.push_back(cur->val);    // 中        traversal(cur->left, vec);  // 左        traversal(cur->right, vec); // 右    }    vector<int> preorderTraversal(TreeNode* root) {        vector<int> result;        traversal(root, result);        return result;    }};</code></pre><p>那么前序遍历写出来之后，中序和后序遍历就不难理解了，代码如下：</p><p>中序遍历：</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">void traversal(TreeNode* cur, vector<int>& vec) {    if (cur == NULL) return;    traversal(cur->left, vec);  // 左    vec.push_back(cur->val);    // 中    traversal(cur->right, vec); // 右}</code></pre><p>后序遍历：</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">void traversal(TreeNode* cur, vector<int>& vec) {    if (cur == NULL) return;    traversal(cur->left, vec);  // 左    traversal(cur->right, vec); // 右    vec.push_back(cur->val);    // 中}</code></pre><h2 id="二叉树的迭代遍历"><a href="#二叉树的迭代遍历" class="headerlink" title="二叉树的迭代遍历"></a>二叉树的迭代遍历</h2><p><strong>递归的实现就是：每一次递归调用都会把函数的局部变量、参数值和返回地址等压入调用栈中</strong></p><p>可以用<strong>栈</strong>实现二叉树的前后中序遍历</p><h4 id="前序遍历（迭代法）"><a href="#前序遍历（迭代法）" class="headerlink" title="前序遍历（迭代法）"></a>前序遍历（迭代法）</h4><p>前序遍历是中左右，每次先处理的是中间节点，那么先将根节点放入栈中，然后将右孩子加入栈，再加入左孩子。</p><p>为什么要先加入 右孩子，再加入左孩子呢？ 因为这样出栈的时候才是中左右的顺序。</p><p><img src="/2023/02/01/cpp/%E4%BA%8C%E5%8F%89%E6%A0%91/二叉树前序遍历（迭代法）-16766184074375.gif" alt="二叉树前序遍历（迭代法）" style="zoom: 67%;"></p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    vector<int> preorderTraversal(TreeNode* root) {        stack<TreeNode*> st;        vector<int> result;        if (root == NULL) return result;        st.push(root);        while (!st.empty()) {            TreeNode* node = st.top();                       // 中            st.pop();            result.push_back(node->val);            if (node->right) st.push(node->right);           // 右（空节点不入栈）            if (node->left) st.push(node->left);             // 左（空节点不入栈）        }        return result;    }};</code></pre><p><strong>中序遍历，可以写出如下代码：</strong></p><p><strong>需要借用指针的遍历来帮助访问节点，栈则用来处理节点上的元素</strong></p><p><strong>这是因为前序遍历中访问节点（遍历节点）和处理节点（将元素放进result数组中）可以同步处理，但是中序就无法做到同步！</strong></p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    vector<int> inorderTraversal(TreeNode* root) {        vector<int> result;        stack<TreeNode*> st;        TreeNode* cur = root;        while (cur != NULL || !st.empty()) {            if (cur != NULL) { // 指针来访问节点，访问到最底层                st.push(cur); // 将访问的节点放进栈                cur = cur->left;                // 左            } else {                cur = st.top(); // 从栈里弹出的数据，就是放进result数组里的数据                st.pop();                result.push_back(cur->val);     // 中                cur = cur->right;               // 右            }        }        return result;    }};</code></pre><p>后序：</p><p><img src="https://img-blog.csdnimg.cn/20200808200338924.png" alt="前序到后序" style="zoom:50%;"></p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    vector<int> postorderTraversal(TreeNode* root) {        stack<TreeNode*> st;        vector<int> result;        if (root == NULL) return result;        st.push(root);        while (!st.empty()) {            TreeNode* node = st.top();            st.pop();            result.push_back(node->val);            if (node->left) st.push(node->left); // 相对于前序遍历，这更改一下入栈顺序 （空节点不入栈）            if (node->right) st.push(node->right); // 空节点不入栈        }        reverse(result.begin(), result.end()); // 将结果反转之后就是左右中的顺序了        return result;    }};</code></pre><h2 id="二叉树的统一迭代法"><a href="#二叉树的统一迭代法" class="headerlink" title="二叉树的统一迭代法"></a>二叉树的统一迭代法</h2><h4 id="迭代法中序遍历"><a href="#迭代法中序遍历" class="headerlink" title="迭代法中序遍历"></a>迭代法中序遍历</h4><p>中序遍历代码如下：（详细注释）</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    vector<int> inorderTraversal(TreeNode* root) {        vector<int> result;        stack<TreeNode*> st;        if (root != NULL) st.push(root);        while (!st.empty()) {            TreeNode* node = st.top();            if (node != NULL) {                st.pop(); // 将该节点弹出，避免重复操作，下面再将右中左节点添加到栈中                if (node->right) st.push(node->right);  // 添加右节点（空节点不入栈）                st.push(node);                          // 添加中节点                st.push(NULL); // 中节点访问过，但是还没有处理，加入空节点做为标记。                if (node->left) st.push(node->left);    // 添加左节点（空节点不入栈）            } else { // 只有遇到空节点的时候，才将下一个节点放进结果集                st.pop();           // 将空节点弹出                node = st.top();    // 重新取出栈中元素                st.pop();                result.push_back(node->val); // 加入到结果集            }        }        return result;    }};</code></pre><p><strong>中节点放入栈之后，紧接着放入一个空指针作为标记</strong></p><h2 id="102-二叉树的层序遍历——广度优先"><a href="#102-二叉树的层序遍历——广度优先" class="headerlink" title="102.二叉树的层序遍历——广度优先"></a>102.二叉树的层序遍历——广度优先</h2><p>广度用队列，深度用栈</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">//迭代法class Solution {public:    vector<vector<int>> levelOrder(TreeNode* root) {        queue<TreeNode*> que;        if (root != NULL) que.push(root);        vector<vector<int>> result;        while (!que.empty()) {            int size = que.size();            vector<int> vec;            // 这里一定要使用固定大小size，不要使用que.size()，因为que.size是不断变化的            for (int i = 0; i < size; i++) {                TreeNode* node = que.front();                que.pop();                vec.push_back(node->val);                if (node->left) que.push(node->left);                if (node->right) que.push(node->right);            }            result.push_back(vec);        }        return result;    }};</code></pre><pre class=" language-lang-cpp"><code class="language-lang-cpp">// 递归法class Solution {public:    void order(TreeNode* cur, vector<vector<int>>& result, int depth)    {        if (cur == nullptr) return;        if (result.size() == depth) result.push_back(vector<int>());        result[depth].push_back(cur->val);        order(cur->left, result, depth + 1);        order(cur->right, result, depth + 1);    }    vector<vector<int>> levelOrder(TreeNode* root) {        vector<vector<int>> result;        int depth = 0;        order(root, result, depth);        return result;    }};</code></pre><h1 id="226-翻转二叉树"><a href="#226-翻转二叉树" class="headerlink" title="226.翻转二叉树"></a>226.翻转二叉树</h1><p><a href="https://leetcode.cn/problems/invert-binary-tree/">力扣题目链接(opens new window)</a></p><p>翻转一棵二叉树。</p><p>思路：</p><p>采用递归前序的方法。</p><p><a href="https://www.programmercarl.com/0226.%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91.html#%E6%8B%93%E5%B1%95">题解还有更多其他方法</a></p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    void order(TreeNode* cur)    {        if (cur == nullptr) return;        TreeNode* temp = cur->left;        cur->left = cur->right;        cur->right = temp;        order(cur->left);        order(cur->right);    }    TreeNode* invertTree(TreeNode* root) {        order(root);        return root;    }};</code></pre><h2 id="101-对称二叉树"><a href="#101-对称二叉树" class="headerlink" title="101. 对称二叉树"></a>101. 对称二叉树</h2><p>递归法：</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    bool compare(TreeNode* left, TreeNode* right){        if (left == NULL && right != NULL) return false;        else if (left != NULL && right == NULL) return false;        else if (left == NULL && right == NULL) return true;        else if (left->val != right->val) return false;         else{            bool outside = compare(left->left, right->right);            bool inside = compare(left->right, right->left);            bool isSame = outside && inside;            return isSame;        }    }    bool isSymmetric(TreeNode* root) {        if(root == NULL) return true;        return compare(root->left,root->right);    }};</code></pre><p>迭代法的条件判断和递归的逻辑是一样的。</p><p>代码如下：</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    bool isSymmetric(TreeNode* root) {        if (root == NULL) return true;        queue<TreeNode*> que;        que.push(root->left);   // 将左子树头结点加入队列        que.push(root->right);  // 将右子树头结点加入队列        while (!que.empty()) {  // 接下来就要判断这两个树是否相互翻转            TreeNode* leftNode = que.front(); que.pop();            TreeNode* rightNode = que.front(); que.pop();            if (!leftNode && !rightNode) {  // 左节点为空、右节点为空，此时说明是对称的                continue;            }            // 左右一个节点不为空，或者都不为空但数值不相同，返回false            if ((!leftNode || !rightNode || (leftNode->val != rightNode->val))) {                return false;            }            que.push(leftNode->left);   // 加入左节点左孩子            que.push(rightNode->right); // 加入右节点右孩子            que.push(leftNode->right);  // 加入左节点右孩子            que.push(rightNode->left);  // 加入右节点左孩子        }        return true;    }};</code></pre><h2 id="104-二叉树的最大深度"><a href="#104-二叉树的最大深度" class="headerlink" title="104.二叉树的最大深度"></a>104.二叉树的最大深度</h2><p><a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/">力扣题目链接(opens new window)</a></p><p>给定一个二叉树，找出其最大深度。</p><p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p><p>说明: 叶子节点是指没有子节点的节点。</p><p>示例： 给定二叉树 [3,9,20,null,null,15,7]，</p><p><img src="https://img-blog.csdnimg.cn/20210203153031914.png" alt="104. 二叉树的最大深度"></p><p>返回它的最大深度 3 。</p><p><strong>我的代码：</strong></p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    //使用递归法    int order(TreeNode* cur, int depth){        if(cur == NULL) return depth;        depth++;        int d1 = order(cur->left,depth);        int d2 = order(cur->right,depth);        depth = max(d1,d2);        return depth;    }    int maxDepth(TreeNode* root) {        int depth = 0;        return order(root, depth);    }};</code></pre><pre class=" language-lang-cpp"><code class="language-lang-cpp">//迭代法 层序遍历class Solution {public:    int maxDepth(TreeNode* root) {        if(root == NULL) return 0;        int depth = 0;        queue<TreeNode*> que;        que.push(root);        while(!que.empty()){            int size = que.size();            for(int i = 0; i < size; i++){                TreeNode* node = que.front();                que.pop();                if(node->left) que.push(node->left);                if(node->right) que.push(node->right);            }            depth++;        }        return depth;    }};</code></pre><p>我的n叉树求最大深度代码：</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    //使用递归法    int order(Node* cur, int depth){        if(cur == NULL) return depth;        depth++;        int maxDepth = depth;        for(int i = 0; i < cur->children.size(); i++){            int d1 = order(cur->children[i],depth);            maxDepth = max(d1,maxDepth);        }        return maxDepth;    }    int maxDepth(Node* root) {        int depth = 0;        return order(root, depth);    }};</code></pre><p>题解：</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    int maxDepth(Node* root) {        if (root == 0) return 0;        int depth = 0;        for (auto child : root->children){            depth = max(depth, maxDepth(child));        }        return depth + 1;    }};</code></pre><h2 id="111-二叉树的最小深度"><a href="#111-二叉树的最小深度" class="headerlink" title="111.二叉树的最小深度"></a>111.二叉树的最小深度</h2><p><a href="https://leetcode.cn/problems/minimum-depth-of-binary-tree/">力扣题目链接(opens new window)</a></p><p>给定一个二叉树，找出其最小深度。</p><p>最小深度是从<strong>根节点到最近叶子节点</strong>的最短路径上的节点数量。</p><p>说明: 叶子节点是指没有子节点的节点。</p><p>示例:</p><p>给定二叉树 [3,9,20,null,null,15,7],</p><p><img src="https://img-blog.csdnimg.cn/2021020315582586.png" alt="111.二叉树的最小深度1"></p><p>返回它的最小深度 2</p><p><img src="https://img-blog.csdnimg.cn/20210203155800503.png" alt="111.二叉树的最小深度" style="zoom:33%;"></p><p>我的代码 ：</p><p>本题核心就是找到根节点</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">// 后续遍历class Solution {public:// 如果左子树为空，右子树不为空，说明最小深度是 1 + 右子树的深度。// 反之，右子树为空，左子树不为空，最小深度是 1 + 左子树的深度。// 最后如果左右子树都不为空，返回左右子树深度最小值 + 1     int getDepth(TreeNode* node){        int depth = 0;        if(node == NULL) return 0;        //上式不等价于node->left == NULL && node->right == NULL 的情况，而是表明这个节点为空，不会增加深度。        int leftDepth = getDepth(node->left);//左        int rightDepth = getDepth(node->right);//右        // 中  但是没有要处理的        if(node->left == NULL && node->right != NULL) return rightDepth + 1;        if(node->left != NULL && node->right == NULL) return leftDepth + 1;        // if(node->left != NULL && node->right != NULL) return min(leftDepth,rightDepth) + 1;        // if(node->left == NULL && node->right == NULL) return 0 + 1;  叶子节点 深度加1        return min(leftDepth,rightDepth) + 1;  //最好还是在所有分支都给返回值，防止编译器判断为无返回值    }    int minDepth(TreeNode* root) {        return getDepth(root);    }};</code></pre><pre class=" language-lang-cpp"><code class="language-lang-cpp">//题解：前序class Solution {private:    int result;    void getdepth(TreeNode* node, int depth) {        if (node->left == NULL && node->right == NULL) {            result = min(depth, result);              return;        }        // 中 只不过中没有处理的逻辑        if (node->left) { // 左            getdepth(node->left, depth + 1);        }        if (node->right) { // 右            getdepth(node->right, depth + 1);        }        return ;    }public:    int minDepth(TreeNode* root) {        if (root == NULL) return 0;        result = INT_MAX;        getdepth(root, 1);        return result;    }};</code></pre><pre class=" language-lang-cpp"><code class="language-lang-cpp">//用队列进行层序遍历，逻辑比较清晰class Solution {public:    int minDepth(TreeNode* root) {        if (root == NULL) return 0;        int depth = 0;        queue<TreeNode*> que;        que.push(root);        while(!que.empty()) {            int size = que.size();            depth++; // 记录最小深度            for (int i = 0; i < size; i++) {                TreeNode* node = que.front();                que.pop();                if (node->left) que.push(node->left);                if (node->right) que.push(node->right);                if (!node->left && !node->right) { // 当左右孩子都为空的时候，说明是最低点的一层了，退出                    return depth;                }            }        }        return depth;    }};</code></pre><h2 id="222-完全二叉树的节点个数"><a href="#222-完全二叉树的节点个数" class="headerlink" title="222.完全二叉树的节点个数"></a>222.完全二叉树的节点个数</h2><p><a href="https://leetcode.cn/problems/count-complete-tree-nodes/">力扣题目链接(opens new window)</a></p><p>给出一个完全二叉树，求出该树的节点个数。</p><p><img src="/2023/02/01/cpp/%E4%BA%8C%E5%8F%89%E6%A0%91/20200920221638903.png" alt="img" style="zoom: 33%;"></p><p>我的代码（没有针对完全二叉树做优化）：</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    int countNodes(TreeNode* root) {        queue<TreeNode*> que;        if(root != NULL) que.push(root);        int num = 0;        while(!que.empty()){            int size = que.size();            for(int i = 0; i < size; i++){                TreeNode* node = que.front();                que.pop();                num++;                if(node->left) que.push(node->left);                if(node->right) que.push(node->right);            }        }        return num;    }};</code></pre><p>题解：</p><p>这个就不是满二叉树</p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20220829163709.png" alt="img" style="zoom:33%;"></p><p>判断其子树是不是满二叉树(一直向左遍历的深度==一直向右遍历的深度)，如果是则利用公式（2^树深度 - 1 ，注意这里根节点深度为1）计算这个子树（满二叉树）的节点数量，如果不是则继续递归</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    int countNodes(TreeNode* root) {        if (root == nullptr) return 0;        TreeNode* left = root->left;        TreeNode* right = root->right;        int leftDepth = 0, rightDepth = 0; // 这里初始为0是有目的的，为了下面求指数方便        while (left) {  // 求左子树深度            left = left->left;            leftDepth++;        }        while (right) { // 求右子树深度            right = right->right;            rightDepth++;        }        if (leftDepth == rightDepth) {            return (2 << leftDepth) - 1; // 注意(2<<1) 相当于2^2，所以leftDepth初始为0        }        //上面是返回条件        return countNodes(root->left) + countNodes(root->right) + 1;    }};</code></pre><h2 id="110-平衡二叉树"><a href="#110-平衡二叉树" class="headerlink" title="110.平衡二叉树"></a>110.平衡二叉树</h2><p><a href="https://leetcode.cn/problems/balanced-binary-tree/">力扣题目链接(opens new window)</a></p><p>给定一个二叉树，判断它是否是高度平衡的二叉树。</p><p>本题中，一棵高度平衡二叉树定义为：一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过1。</p><p>这里强调一波概念：</p><ul><li>二叉树节点的深度：指从根节点到该节点的最长简单路径边的条数。</li><li>二叉树节点的高度：指从该节点到叶子节点的最长简单路径边的条数。</li></ul><p><img src="https://img-blog.csdnimg.cn/20210203155515650.png" alt="110.平衡二叉树2" style="zoom:50%;"></p><p>采用递归：</p><p>分别求出其左右子树的高度，然后如果差值小于等于1，则返回当前二叉树的高度，否则返回-1，表示已经不是二叉平衡树了。</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    int getHeight(TreeNode* node){        if(node == NULL) return 0;        int leftHeight = getHeight(node->left);        if(leftHeight == -1) return -1;        int rightHeight = getHeight(node->right);        if(rightHeight == -1) return -1;        if(abs(leftHeight-rightHeight)>1) return -1;        else return 1 + max(leftHeight, rightHeight); // 以当前节点为根节点的树的最大高度    }    bool isBalanced(TreeNode* root) {        int result = getHeight(root);        if(result != -1) return true;        else return false;    }};</code></pre><h2 id="257-二叉树的所有路径"><a href="#257-二叉树的所有路径" class="headerlink" title="257. 二叉树的所有路径"></a>257. 二叉树的所有路径</h2><p><a href="https://leetcode.cn/problems/binary-tree-paths/">力扣题目链接(opens new window)</a></p><p>给定一个二叉树，返回所有从根节点到叶子节点的路径。</p><p>题解：</p><p>to_string() 将数字转为string</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {private:    void traversal(TreeNode* cur, string path, vector<string>& result) {        path += to_string(cur->val); // 中        if (cur->left == NULL && cur->right == NULL) {            result.push_back(path);            return;        }        if (cur->left) traversal(cur->left, path + "->", result); // 左        if (cur->right) traversal(cur->right, path + "->", result); // 右    }public:    vector<string> binaryTreePaths(TreeNode* root) {        vector<string> result;        string path;        if (root == NULL) return result;        traversal(root, path, result);        return result;    }};</code></pre><h2 id="404-左叶子之和"><a href="#404-左叶子之和" class="headerlink" title="404.左叶子之和"></a>404.左叶子之和</h2><p><a href="https://leetcode.cn/problems/sum-of-left-leaves/">力扣题目链接(opens new window)</a></p><p>计算给定二叉树的所有左叶子之和。</p><p>我的代码：</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    int sumleft(TreeNode* root , int leftfig, int sum){        // int leftfig = 0;        // int sum = 0;        if(root->left == NULL && root->right == NULL && leftfig == 1){            return sum + root->val;        }        int sum1 = 0;        int sum2 = 0;        if(root->left) sum1 = sumleft(root->left, 1 ,sum);        if(root->right) sum2 = sumleft(root->right, 0 ,sum);        return sum1 + sum2;    }    int sumOfLeftLeaves(TreeNode* root) {        int leftfig = 0;        int sum = 0;        if(root == NULL) return 0;        return sumleft(root, leftfig, sum);    }};</code></pre><h2 id="513-找树左下角的值"><a href="#513-找树左下角的值" class="headerlink" title="513.找树左下角的值"></a>513.找树左下角的值</h2><p><a href="https://leetcode.cn/problems/find-bottom-left-tree-value/">力扣题目链接(opens new window)</a></p><p>给定一个二叉树，在树的最后一行找到最左边的值。</p><p>我的代码：</p><p>层序遍历</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    int findBottomLeftValue(TreeNode* root) {        queue <TreeNode*> que;        que.push(root);        int result;        while(!que.empty()){            int size = que.size();            for(int i = 0; i < size; i++){                TreeNode* node = que.front();                que.pop();                if(i == 0) result = node->val; //关键是这一行，记录最后一层的第一个元素                if(node->left) que.push(node->left);                if(node->right) que.push(node->right);            }        }        return result;    }};</code></pre><h2 id="112-路径总和"><a href="#112-路径总和" class="headerlink" title="112. 路径总和"></a>112. 路径总和</h2><p><a href="https://leetcode.cn/problems/path-sum/">力扣题目链接(opens new window)</a></p><p>给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。</p><p>我的代码：参考<strong>257. 二叉树的所有路径</strong></p><p>当不用遍历所有二叉树时，需要返回值，如本题，一旦找到路径就返回。</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    bool traversal(TreeNode* cur, int pathsum, int targetSum) {        pathsum += cur->val; // 中        if (cur->left == NULL && cur->right == NULL) {            if(pathsum == targetSum) return true;            else return false;        }        bool leftsig;        bool rightsig;        if (cur->left) leftsig = traversal(cur->left, pathsum, targetSum); // 左        if (cur->right) rightsig = traversal(cur->right, pathsum, targetSum); // 右        return leftsig || rightsig; //这里也可以优化一下，只要leftsig=1，就返回，right同理    }    bool hasPathSum(TreeNode* root, int targetSum) {        if(root == NULL) return false;        return traversal(root, 0, targetSum);    }};</code></pre><h2 id="113-路径总和ii"><a href="#113-路径总和ii" class="headerlink" title="113. 路径总和ii"></a>113. 路径总和ii</h2><p><a href="https://leetcode.cn/problems/path-sum-ii/">力扣题目链接(opens new window)</a></p><p>给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于给定目标和的路径。</p><p>说明: 叶子节点是指没有子节点的节点。</p><p>我的代码：参考<strong>257. 二叉树的所有路径</strong></p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    void traversal(TreeNode* cur, vector<int> path, int pathsum, int targetSum, vector<vector<int>>& path_results) {        path.push_back(cur->val);        pathsum += cur->val; // 中        if (cur->left == NULL && cur->right == NULL) {            if(pathsum == targetSum){                path_results.push_back(path);                return ;            }             else return;        }        if (cur->left) traversal(cur->left, path, pathsum, targetSum, path_results); // 左        if (cur->right) traversal(cur->right, path, pathsum, targetSum, path_results); // 右        return ;    }    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {        vector<vector<int>> path_results;        vector<int> path;        if(root == NULL) return path_results;        traversal(root, path, 0, targetSum, path_results);        return path_results;    }};</code></pre><h2 id="106-从中序与后序遍历序列构造二叉树"><a href="#106-从中序与后序遍历序列构造二叉树" class="headerlink" title="106.从中序与后序遍历序列构造二叉树*"></a>106.从中序与后序遍历序列构造二叉树*</h2><p><a href="https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal/">力扣题目链接(opens new window)</a></p><p>根据一棵树的中序遍历与后序遍历构造二叉树。</p><p>注意: 你可以假设树中没有重复的元素。</p><p>例如，给出</p><p>中序遍历 inorder = [9,3,15,20,7] 后序遍历 postorder = [9,15,7,20,3] 返回如下的二叉树：</p><p><img src="/2023/02/01/cpp/%E4%BA%8C%E5%8F%89%E6%A0%91/20210203154316774-16775032045302.png" alt="106. 从中序与后序遍历序列构造二叉树1" style="zoom:100%;"></p><p>思路：</p><p>以 后序数组的最后一个元素为切割点，先切中序数组，根据中序数组，反过来再切后序数组。一层一层切下去，每次后序数组最后一个元素就是节点元素</p><p>题解：</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    TreeNode* traversal(vector<int>& inorder, vector<int>& postorder) {            // 第一步 终止条件        if (postorder.size() == 0) return NULL;        int rootValue = postorder[postorder.size() - 1];        TreeNode* root = new TreeNode(rootValue);        if (postorder.size() == 1) return root;// 叶子节点        // 找到中序遍历的切割点        int delimiterIndex;        for (delimiterIndex = 0; delimiterIndex < inorder.size(); delimiterIndex++) {            if (inorder[delimiterIndex] == rootValue) break;        }        // 切割中序数组  这题关键：这里切割的写法        // 左闭右开区间：[0, delimiterIndex)        vector<int> leftInorder(inorder.begin(), inorder.begin() + delimiterIndex);        // [delimiterIndex + 1, end)        vector<int> rightInorder(inorder.begin() + delimiterIndex + 1, inorder.end() );        // 切割后序        vector<int> leftPostorder(postorder.begin(), postorder.begin() + leftInorder.size());        // [leftInorder.size(), end)        vector<int> rightPostorder(postorder.begin() + leftInorder.size(), postorder.end()- 1);        root->left = traversal(leftInorder, leftPostorder);        root->right = traversal(rightInorder, rightPostorder);        return root;        }    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {        if (inorder.size() == 0 || postorder.size() == 0) return NULL;        return traversal(inorder, postorder);    }};</code></pre><h2 id="654-最大二叉树"><a href="#654-最大二叉树" class="headerlink" title="654.最大二叉树"></a>654.最大二叉树</h2><p><a href="https://leetcode.cn/problems/maximum-binary-tree/">力扣题目地址(opens new window)</a></p><p>给定一个不含重复元素的整数数组。一个以此数组构建的最大二叉树定义如下：</p><ul><li>二叉树的根是数组中的最大元素。</li><li>左子树是通过数组中最大值左边部分构造出的最大二叉树。</li><li>右子树是通过数组中最大值右边部分构造出的最大二叉树。</li></ul><p><img src="https://assets.leetcode.com/uploads/2020/12/24/tree1.jpg" alt="img" style="zoom:50%;"></p><p>我的代码：</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    TreeNode* recursion(vector<int> nums) {        if(nums.size() == 0) return NULL;        int rootValue = 0;        int rootValueIndex = 0;        for(int i = 0; i < nums.size(); i++){            if(nums[i]>rootValue){                rootValue = nums[i];                rootValueIndex = i;            }        }        TreeNode* root = new TreeNode(rootValue);        vector<int> leftnums(nums.begin(), nums.begin() + rootValueIndex);        vector<int> rightnums(nums.begin() + rootValueIndex + 1, nums.end());        root->left = recursion(leftnums);        root->right = recursion(rightnums);        return root;    }    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {        return recursion(nums);    }};</code></pre><h2 id="617-合并二叉树"><a href="#617-合并二叉树" class="headerlink" title="617.合并二叉树"></a>617.合并二叉树</h2><p><a href="https://leetcode.cn/problems/merge-two-binary-trees/">力扣题目链接(opens new window)</a></p><p>给定两个二叉树，想象当你将它们中的一个覆盖到另一个上时，两个二叉树的一些节点便会重叠。</p><p>你需要将他们合并为一个新的二叉树。合并的规则是如果两个节点重叠，那么将他们的值相加作为节点合并后的新值，否则不为 NULL 的节点将直接作为新二叉树的节点。</p><p>我的代码：</p><p>也可以不new，在root1上改</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {        TreeNode* root = new TreeNode();        if(root1 == NULL) return root2;        if(root2 == NULL) return root1;        root->val = root1->val + root2->val;        root->left = mergeTrees(root1->left,root2->left);        root->right = mergeTrees(root1->right,root2->right);        return root;     }};</code></pre><h2 id="700-二叉搜索树中的搜索"><a href="#700-二叉搜索树中的搜索" class="headerlink" title="700.二叉搜索树中的搜索"></a>700.二叉搜索树中的搜索</h2><p><a href="https://leetcode.cn/problems/search-in-a-binary-search-tree/">力扣题目地址(opens new window)</a></p><p>给定二叉搜索树（BST）的根节点和一个值。 你需要在BST中找到节点值等于给定值的节点。 返回以该节点为根的子树。 如果节点不存在，则返回 NULL。</p><p>思路：</p><p>二叉搜索树是一个有序树：</p><ul><li>若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；</li><li>若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值；</li><li>它的左、右子树也分别为二叉搜索树</li></ul><p>我的代码：</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    TreeNode* searchBST(TreeNode* root, int val) {        if(root == NULL) return NULL;        if(root->val == val){            return root;        }        if(root->val < val){            return searchBST(root->right, val);        }        if(root->val > val){            return searchBST(root->left, val);        }        return NULL;    }};</code></pre><h2 id="98-验证二叉搜索树"><a href="#98-验证二叉搜索树" class="headerlink" title="98.验证二叉搜索树*"></a>98.验证二叉搜索树*</h2><p><a href="https://leetcode.cn/problems/validate-binary-search-tree/">力扣题目链接(opens new window)</a></p><p>给定一个二叉树，判断其是否是一个有效的二叉搜索树。</p><p>假设一个二叉搜索树具有如下特征：</p><ul><li>节点的左子树只包含小于当前节点的数。</li><li>节点的右子树只包含大于当前节点的数。</li><li>所有左子树和右子树自身必须也是二叉搜索树。</li></ul><p>思路：</p><p>这道题目比较容易陷入两个陷阱：</p><ul><li>陷阱1</li></ul><p><strong>不能单纯的比较左节点小于中间节点，右节点大于中间节点就完事了</strong>。<strong>我们要比较的是 左子树所有节点小于中间节点，右子树所有节点大于中间节点</strong>。</p><p>例如： [10,5,15,null,null,6,20] 这个case：</p><p><img src="https://img-blog.csdnimg.cn/20200812191501419.png" alt="二叉搜索树" style="zoom: 67%;"></p><p>节点10大于左节点5，小于右节点15，但右子树里出现了一个6 这就不符合了！</p><ul><li>陷阱2</li></ul><p>样例中最小节点 可能是int的最小值，如果这样使用最小的int来比较也是不行的。</p><p>此时可以初始化比较元素为longlong的最小值<code>long long maxVal = LONG_MIN;</code></p><p><strong>核心思想：二叉搜索树如果按左中右（中序）顺序遍历，则数据是递增的</strong></p><p>题解：</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">//先变成数组class Solution {private:    vector<int> vec;    void traversal(TreeNode* root) {        if (root == NULL) return;        traversal(root->left);        vec.push_back(root->val); // 将二叉搜索树转换为有序数组        traversal(root->right);    }public:    bool isValidBST(TreeNode* root) {        vec.clear(); // 不加这句在leetcode上也可以过，但最好加上        traversal(root);        for (int i = 1; i < vec.size(); i++) {            // 注意要小于等于，搜索树里不能有相同元素            if (vec[i] <= vec[i - 1]) return false;        }        return true;    }};</code></pre><h2 id="530-二叉搜索树的最小绝对差"><a href="#530-二叉搜索树的最小绝对差" class="headerlink" title="530.二叉搜索树的最小绝对差"></a>530.二叉搜索树的最小绝对差</h2><p><a href="https://leetcode.cn/problems/minimum-absolute-difference-in-bst/">力扣题目链接(opens new window)</a></p><p>给你一棵所有节点为非负值的二叉搜索树，请你计算树中任意两节点的差的绝对值的最小值。</p><p>我的代码（参考98）：</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    vector<int> vec;    void traversal(TreeNode* root){        if(root == NULL) return;        traversal(root->left);        vec.push_back(root->val); // 将二叉搜索树转换为有序数组        traversal(root->right);    }    int getMinimumDifference(TreeNode* root) {        traversal(root);        int min_sub = 100000;        for (int i = 1; i < vec.size(); i++) {            min_sub = min(min_sub,vec[i] - vec[i - 1]);        }        return min_sub;    }};</code></pre><h2 id="501-二叉搜索树中的众数"><a href="#501-二叉搜索树中的众数" class="headerlink" title="501.二叉搜索树中的众数"></a>501.二叉搜索树中的众数</h2><p><a href="https://leetcode.cn/problems/find-mode-in-binary-search-tree/">力扣题目链接(opens new window)</a></p><p>给定一个有相同值的二叉搜索树（BST），找出 BST 中的所有众数（出现频率最高的元素）。</p><p>假定 BST 有如下定义：</p><ul><li>结点左子树中所含结点的值小于等于当前结点的值</li><li>结点右子树中所含结点的值大于等于当前结点的值</li><li>左子树和右子树都是二叉搜索树</li></ul><p>思路：</p><p>针对任意二叉树，可以使用map（有序，key是次数，value是节点值）</p><p>这里是二叉搜索树，是递增的，可以只比较相邻元素</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    vector<int> vec;    void traversal(TreeNode* root){        if(root == NULL) return;        traversal(root->left);        vec.push_back(root->val); // 将二叉搜索树转换为有序数组        traversal(root->right);    }    vector<int> findMode(TreeNode* root) {        traversal(root);        int left = 0;        int maxnum = 0;        vector<int> results;        for (int right = 0; right < vec.size(); right++) {            if(vec[left] != vec[right]) left = right;            if(maxnum < right - left){                maxnum = right - left;                results.clear(); //这里很关键                results.push_back(vec[right]);            }else if(maxnum == right - left){                results.push_back(vec[right]);            }        }        return results;    }};</code></pre><h2 id="236-二叉树的最近公共祖先"><a href="#236-二叉树的最近公共祖先" class="headerlink" title="236. 二叉树的最近公共祖先"></a>236. 二叉树的最近公共祖先</h2><p><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/">力扣题目链接(opens new window)</a></p><p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p><p>我的代码：</p><p>返回子树中找到目标值的个数</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    TreeNode* result = NULL;    int traversal(TreeNode* node, TreeNode* p, TreeNode* q) {        if(result != NULL) return 2;        int leftfig = 0;        int rightfig = 0;        if(node->left) leftfig = traversal(node->left, p, q);        else leftfig = 0;        if(node->right) rightfig = traversal(node->right, p, q);        else rightfig = 0;        if(leftfig == 1 && rightfig == 1) {            result = node;            return 2;        }else if((leftfig == 1 && rightfig == 0)or(leftfig == 0 && rightfig == 1)){            if(node == p || node == q) {                result = node;                return 2;            }            else return 1;        }         else if(leftfig == 0 && rightfig == 0) {            if(node == p || node == q) return 1;            else return 0;        }        else return 2;    }    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {        traversal(root, p, q);        return result;    }};</code></pre><p>题解：</p><p>主要是理清这张图的逻辑</p><p><img src="/2023/02/01/cpp/%E4%BA%8C%E5%8F%89%E6%A0%91/202102041512582.png" alt="236.二叉树的最近公共祖先2" style="zoom:50%;"></p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {        if (root == q || root == p || root == NULL) return root;        TreeNode* left = lowestCommonAncestor(root->left, p, q);        TreeNode* right = lowestCommonAncestor(root->right, p, q);        if (left != NULL && right != NULL) return root;        if (left == NULL && right != NULL) return right;        else if (left != NULL && right == NULL) return left;        else  { //  (left == NULL && right == NULL)            return NULL;        }    }};</code></pre><ol><li>求最小公共祖先，需要<strong>从底向上遍历</strong>，那么二叉树，只能通过<strong>后序遍历（</strong>即：回溯）实现从底向上的遍历方式。</li><li>在回溯的过程中，必然要遍历整棵二叉树，即使已经找到结果了，依然要把其他节点遍历完，因为要使用递归函数的返回值（也就是代码中的left和right）做逻辑判断。</li><li>要理解如果返回值left为空，right不为空为什么要返回right，为什么可以用返回right传给上一层结果。</li></ol><pre class=" language-lang-cpp"><code class="language-lang-cpp">//后序遍历left = 递归函数(root->left);  // 左right = 递归函数(root->right); // 右left与right的逻辑处理;         // 中</code></pre><p>搜索一条边的写法（本题，下题）：</p><pre class=" language-lang-text"><code class="language-lang-text">if (递归函数(root->left)) return ;if (递归函数(root->right)) return ;</code></pre><p>搜索整个树写法：</p><pre class=" language-lang-text"><code class="language-lang-text">left = 递归函数(root->left);right = 递归函数(root->right);left与right的逻辑处理;</code></pre><h2 id="235-二叉搜索树的最近公共祖先"><a href="#235-二叉搜索树的最近公共祖先" class="headerlink" title="235. 二叉搜索树的最近公共祖先"></a>235. 二叉搜索树的最近公共祖先</h2><p><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-search-tree/">力扣题目链接(opens new window)</a></p><p>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。</p><p>题解：</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">//对于二叉搜索树，从上向下去递归遍历，第一次遇到 cur节点是数值在[p, q]区间中，那么cur就是 p和q的最近公共祖先class Solution {public:    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {        while(root) {            if (root->val > p->val && root->val > q->val) {                root = root->left;            } else if (root->val < p->val && root->val < q->val) {                root = root->right;            } else return root;        }        return NULL;    }};</code></pre><h2 id="701-二叉搜索树中的插入操作"><a href="#701-二叉搜索树中的插入操作" class="headerlink" title="701.二叉搜索树中的插入操作"></a>701.二叉搜索树中的插入操作</h2><p><a href="https://leetcode.cn/problems/insert-into-a-binary-search-tree/">力扣题目链接</a></p><p><img src="/2023/02/01/cpp/%E4%BA%8C%E5%8F%89%E6%A0%91/insertbst-16777246991064.jpg" alt="img" style="zoom:50%;"></p><p>我的代码：</p><p>迭代法</p><p>找到空的就插入新节点</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    TreeNode* insertIntoBST(TreeNode* root, int val) {        TreeNode* node = root;         TreeNode* insert = new TreeNode(val);//注意新插入节点的创建方式        if(node == NULL) return insert;        while(node != NULL){            if(val > node->val) {                if(node->right) node = node->right;                else {                    node->right = insert;                    break;                }            }            if(val < node->val) {                if(node->left) node = node->left;                else {                    node->left = insert;                    break;                }            }        }        return root;    }};</code></pre><p>题解：</p><p>记录了父节点</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    TreeNode* insertIntoBST(TreeNode* root, int val) {        if (root == NULL) {            TreeNode* node = new TreeNode(val);            return node;        }        TreeNode* cur = root;        TreeNode* parent = root; // 这个很重要，需要记录上一个节点，否则无法赋值新节点        while (cur != NULL) {            parent = cur;            if (cur->val > val) cur = cur->left;            else cur = cur->right;        }        TreeNode* node = new TreeNode(val);        if (val < parent->val) parent->left = node;// 此时是用parent节点的进行赋值        else parent->right = node;        return root;    }};</code></pre><h2 id="450-删除二叉搜索树中的节点"><a href="#450-删除二叉搜索树中的节点" class="headerlink" title="450.删除二叉搜索树中的节点*"></a>450.删除二叉搜索树中的节点*</h2><p><a href="https://leetcode.cn/problems/delete-node-in-a-bst/">力扣题目链接(opens new window)</a></p><p>给定一个二叉搜索树的根节点 root 和一个值 key，删除二叉搜索树中的 key 对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。</p><p>一般来说，删除节点可分为两个步骤：</p><p>首先找到需要删除的节点； 如果找到了，删除它。 说明： 要求算法时间复杂度为 $O(h)$，h 为树的高度。</p><p>思路：</p><ol><li><p>暴力：中序遍历后变成数组再处理</p></li><li><p><strong>分析各种可能的情况</strong></p><p> 有以下五种情况：</p><ul><li>第一种情况：没找到删除的节点，遍历到空节点直接返回了</li><li>找到删除的节点<ul><li>第二种情况：左右孩子都为空（叶子节点），直接删除节点， 返回NULL为根节点</li><li>第三种情况：删除节点的左孩子为空，右孩子不为空，删除节点，右孩子补位，返回右孩子为该节点</li><li>第四种情况：删除节点的右孩子为空，左孩子不为空，删除节点，左孩子补位，返回左孩子为该节点</li><li>第五种情况：左右孩子节点都不为空，则将删除节点的左子树头结点（左孩子）放到删除节点的右子树的最左面节点的左孩子上，返回删除节点右孩子为该节点。</li></ul></li></ul></li></ol><p>题解：</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    TreeNode* deleteNode(TreeNode* root, int key) {        if (root == nullptr) return nullptr; //1        if (root->val == key) {            if(root->left == nullptr && root->right == nullptr) return nullptr; //2            if(root->left == nullptr) return root->right; //3            if(root->right == nullptr) return root->left; //4            if(root->left != nullptr && root->right != nullptr){ //5                // 找右子树最左面的节点                TreeNode* cur = root->right;                 while(cur->left != nullptr) {                    cur = cur->left;                }                cur->left = root->left; // 把要删除的节点（root）左子树放在cur的左孩子的位置                root = root->right;                 return root;            }         }   //上面相当于把新的节点返回给上一层，上一层就要用 root->left 或者 root->right接住，代码如下：        if (root->val > key) root->left = deleteNode(root->left, key);        if (root->val < key) root->right = deleteNode(root->right, key);        return root;    }};</code></pre><h2 id="669-修剪二叉搜索树"><a href="#669-修剪二叉搜索树" class="headerlink" title="669. 修剪二叉搜索树*"></a>669. 修剪二叉搜索树*</h2><p><a href="https://leetcode.cn/problems/trim-a-binary-search-tree/">力扣题目链接</a></p><p><img src="/2023/02/01/cpp/%E4%BA%8C%E5%8F%89%E6%A0%91/trim2.jpg" alt="img" style="zoom:33%;"></p><p>题解：</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {public:    TreeNode* trimBST(TreeNode* root, int low, int high) {        if (root == nullptr ) return nullptr;        if (root->val < low) {            TreeNode* right = trimBST(root->right, low, high); // 寻找符合区间[low, high]的节点            return right;        }        if (root->val > high) {            TreeNode* left = trimBST(root->left, low, high); // 寻找符合区间[low, high]的节点            return left;        }        root->left = trimBST(root->left, low, high); // root->left接入符合条件的左孩子        root->right = trimBST(root->right, low, high); // root->right接入符合条件的右孩子        return root;    }};</code></pre><h2 id="108-将有序数组转换为二叉搜索树"><a href="#108-将有序数组转换为二叉搜索树" class="headerlink" title="108.将有序数组转换为二叉搜索树"></a>108.将有序数组转换为二叉搜索树</h2><p><a href="https://leetcode.cn/problems/convert-sorted-array-to-binary-search-tree/">力扣题目链接(opens new window)</a></p><p>将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。</p><p>本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。</p><p>思路：</p><ol><li>选取数组中间的节点为根节点，分割数组为左右两部分</li><li>分别在两部分中间再找中间节点</li></ol><p>题解：</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {private:    TreeNode* traversal(vector<int>& nums, int left, int right) {        if (left > right) return nullptr;        int mid = left + ((right - left) / 2); // 防止溢出         // 等价于int mid = (left + right) / 2;        TreeNode* root = new TreeNode(nums[mid]);        root->left = traversal(nums, left, mid - 1);        root->right = traversal(nums, mid + 1, right);        return root;    }public:    TreeNode* sortedArrayToBST(vector<int>& nums) {        TreeNode* root = traversal(nums, 0, nums.size() - 1);        return root;    }};</code></pre><h2 id="538-把二叉搜索树转换为累加树"><a href="#538-把二叉搜索树转换为累加树" class="headerlink" title="538.把二叉搜索树转换为累加树"></a>538.把二叉搜索树转换为累加树</h2><p><a href="https://leetcode.cn/problems/convert-bst-to-greater-tree/">力扣题目链接(opens new window)</a></p><p>给出二叉 搜索 树的根节点，该树的节点值各不相同，请你将其转换为累加树（Greater Sum Tree），使每个节点 node 的新值等于原树中大于或等于 node.val 的值之和。</p><p>思路：</p><p>右中左序遍历，需要记录前一个节点的数值</p><pre class=" language-lang-cpp"><code class="language-lang-cpp">class Solution {private:    int pre = 0; // 记录前一个节点的数值    void traversal(TreeNode* cur) { // 右中左遍历        if (cur == NULL) return;        traversal(cur->right);        cur->val += pre;        pre = cur->val;        traversal(cur->left);    }public:    TreeNode* convertBST(TreeNode* root) {        pre = 0;        traversal(root);        return root;    }};</code></pre>]]></content>
    
    
    <summary type="html">#二叉树理论基础篇
C++中map、set、multimap，multiset的底层实现都是平衡二叉搜索树，所以map、set的增删操作时间时间复杂度是logn

unordered_map、unordered_set，unordered_map、unordered_map底层实现是哈希表

一棵树当中没有子结点（即度为0）的结点称为叶子结点，简称“叶子”

二叉树主要有两种遍历方式：

 1. 深度优先遍历：先往深走，遇到叶子节点再往回走。
 2. 广度优先遍历：一层一层的去遍历。

 * 深度优先遍历 * 前序遍历（递归法，迭代法）
    * 中序遍历（递归法，迭代法）
    * 后序</summary>
    
    
    
    <category term="CPP" scheme="https://youngyyp.github.io/categories/CPP/"/>
    
    
  </entry>
  
  <entry>
    <title>pytorch冻结网络模型</title>
    <link href="https://youngyyp.github.io/2022/11/08/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E8%AE%AD%E7%BB%83%E6%8A%80%E5%B7%A7/"/>
    <id>https://youngyyp.github.io/2022/11/08/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E8%AE%AD%E7%BB%83%E6%8A%80%E5%B7%A7/</id>
    <published>2022-11-08T01:49:41.000Z</published>
    <updated>2023-03-11T06:28:19.073Z</updated>
    
    <content type="html"><![CDATA[<h2 id="冻结模型"><a href="#冻结模型" class="headerlink" title="冻结模型"></a>冻结模型</h2><p><a href="https://www.zhihu.com/question/311095447/answer/589307812">https://www.zhihu.com/question/311095447/answer/589307812</a></p><pre class=" language-lang-python"><code class="language-lang-python"># 冻结model.fc1.weight.requires_grad = Falseoptimizer = optim.Adam(filter(lambda p: p.requires_grad, net.parameters()), lr=0.1)# # compute loss # loss.backward()# optmizer.step()# 解冻model.fc1.weight.requires_grad = Trueoptimizer.add_param_group({'params': model.fc1.parameters()})</code></pre><p><strong>终极方法代码实现：</strong></p><pre class=" language-lang-python"><code class="language-lang-python">from collections.abc import Iterabledef set_freeze_by_names(model, layer_names, freeze=True):    if not isinstance(layer_names, Iterable):        layer_names = [layer_names]    for name, child in model.named_children():        if name not in layer_names:            continue        for param in child.parameters():            param.requires_grad = not freezedef freeze_by_names(model, layer_names):    set_freeze_by_names(model, layer_names, True)def unfreeze_by_names(model, layer_names):    set_freeze_by_names(model, layer_names, False)def set_freeze_by_idxs(model, idxs, freeze=True):    if not isinstance(idxs, Iterable):        idxs = [idxs]    num_child = len(list(model.children()))    idxs = tuple(map(lambda idx: num_child + idx if idx < 0 else idx, idxs))    for idx, child in enumerate(model.children()):        if idx not in idxs:            continue        for param in child.parameters():            param.requires_grad = not freezedef freeze_by_idxs(model, idxs):    set_freeze_by_idxs(model, idxs, True)def unfreeze_by_idxs(model, idxs):    set_freeze_by_idxs(model, idxs, False)</code></pre><pre class=" language-lang-python"><code class="language-lang-python"># 冻结第一层freeze_by_idxs(model, 0)# 冻结第一、二层freeze_by_idxs(model, [0, 1])#冻结倒数第一层freeze_by_idxs(model, -1)# 解冻第一层unfreeze_by_idxs(model, 0)# 解冻倒数第一层unfreeze_by_idxs(model, -1)# 冻结 em层freeze_by_names(model, 'em')# 冻结 fc1, fc3层freeze_by_names(model, ('fc1', 'fc3'))# 解冻em, fc1, fc3层unfreeze_by_names(model, ('em', 'fc1', 'fc3'))</code></pre>]]></content>
    
    
    <summary type="html">冻结模型
https://www.zhihu.com/question/311095447/answer/589307812

# 冻结
model.fc1.weight.requires_grad = False
optimizer = optim.Adam(filter(lambda p: p.requires_grad, net.parameters()), lr=0.1)
# 
# compute loss 
# loss.backward()
# optmizer.step()

# 解冻
model.fc1.weight.requires_grad = True
optimizer</summary>
    
    
    
    <category term="计算机视觉" scheme="https://youngyyp.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    
    <category term="pytorch" scheme="https://youngyyp.github.io/tags/pytorch/"/>
    
  </entry>
  
  <entry>
    <title>UAV和卫星图像配准论文阅读</title>
    <link href="https://youngyyp.github.io/2022/11/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/UAV&amp;Satellite/%E8%B0%83%E7%A0%94/"/>
    <id>https://youngyyp.github.io/2022/11/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/UAV&amp;Satellite/%E8%B0%83%E7%A0%94/</id>
    <published>2022-11-08T01:49:41.000Z</published>
    <updated>2023-03-11T06:21:01.076Z</updated>
    
    <content type="html"><![CDATA[<h2 id="UAV-Geolocalization-Using-Satellite-Imagery"><a href="#UAV-Geolocalization-Using-Satellite-Imagery" class="headerlink" title="UAV Geolocalization Using Satellite Imagery"></a><a href="https://abhinavtripathi95.github.io/lets-talk/technical/2020/08/03/uav-geolocalization.html">UAV Geolocalization Using Satellite Imagery</a></h2><h3 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h3><p>无人机通常靠GPS来获得全局姿态估计，然而为了使用GPS进行精确的地理定位，无人机必须能够从四个或更多的GPS卫星接收直接的视线。这可能是一个问题，如果存在高楼大厦，山脉或干扰器，可以阻碍来自卫星的信号。<br>那么我们能在没有GPS的情况下推断出无人机的全局姿态吗?<br>答案是肯定的，我们可以使用无人机下面附加的相机传感器来比较场景和卫星图像，并推断出无人机的位置。</p><h3 id="Geolocalization-as-an-Image-Matching-Problem"><a href="#Geolocalization-as-an-Image-Matching-Problem" class="headerlink" title="Geolocalization as an Image Matching Problem"></a>Geolocalization as an Image Matching Problem</h3><p>考虑这样一个场景，您有一个卫星图像数据库，其中标注了它们的位置。<br>通过将无人机相机的图像与数据库进行精确匹配，可以很好地获得无人机的经纬度近似。<br>为了从卫星数据库中检索相似的图像，我们必须能够精确地匹配卫星图像与无人机相机馈送。<br>因此，在本研究中，我们将自己局限于<strong>航空图像匹配问题</strong>，训练一个深度学习模型，<strong>可以精确匹配来自卫星和无人机相机的图像</strong>。</p><h2 id="UAV-Pose-Estimation-using-Cross-view-Geolocalization-with-Satellite-Imagery-ICRA-2019"><a href="#UAV-Pose-Estimation-using-Cross-view-Geolocalization-with-Satellite-Imagery-ICRA-2019" class="headerlink" title="UAV Pose Estimation using Cross-view Geolocalization with Satellite Imagery (ICRA 2019)"></a>UAV Pose Estimation using Cross-view Geolocalization with Satellite Imagery (ICRA 2019)</h2><p><img src="/2022/11/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/UAV&amp;Satellite/%E8%B0%83%E7%A0%94/image-20221031184827896.png" alt="image-20221031184827896" style="zoom:30%;"></p><p>数据集是从谷歌地图上收集的“Sample matching pairs of UAV images from Google Earth (top row) and satellite images from Google Maps (bottom row).”</p><p>scene localization network 用于对每张图片生成一个描述符，计算欧式距离d，用于计算权重</p><p>Camera Localization network 是一个双分支网络，第一个分支输出一个热力图，最大值位置代表x,y水平位置，第二个分支直接回归垂直位置，朝向(heading)和倾斜角度(tilt)</p><p>Cross-view Geolocalization 模块，将多张图像经过两个网络后的结果根据d计算加权，生成最终相机位姿</p><h2 id="Visual-Localization-with-Google-Earth-Images-for-Robust-Global-Pose-Estimation-of-UAVs（ICRA-2020）"><a href="#Visual-Localization-with-Google-Earth-Images-for-Robust-Global-Pose-Estimation-of-UAVs（ICRA-2020）" class="headerlink" title="Visual Localization with Google Earth Images for Robust Global Pose Estimation of UAVs（ICRA 2020）"></a>Visual Localization with Google Earth Images for Robust Global Pose Estimation of UAVs（ICRA 2020）</h2><p>数据集：<a href="https://www.dynsyslab.org/cloud-dataset/">CLOUD: Canadian Longterm Outdoor UAV Dataset | Dynamic Systems Lab | Prof. Angela Schoellig (dynsyslab.org)</a></p><p>包含季节变化和光照变化的无人机图像，以及UAV的GPS位置信息和姿态信息</p><p>还包括对应的卫星图像（由谷歌地球生成）</p><p>在这项工作中，所有真实的和渲染的图像都是用指向最低点的相机拍摄的</p><h2 id="UAV-Localization-Using-Autoencoded-Satellite-Images（IEEE-ROBOTICS-AND-AUTOMATION-LETTERS-2021）"><a href="#UAV-Localization-Using-Autoencoded-Satellite-Images（IEEE-ROBOTICS-AND-AUTOMATION-LETTERS-2021）" class="headerlink" title="UAV Localization Using Autoencoded Satellite Images（IEEE ROBOTICS AND AUTOMATION LETTERS 2021）"></a>UAV Localization Using Autoencoded Satellite Images（IEEE ROBOTICS AND AUTOMATION LETTERS 2021）</h2><p>和上一篇是一个团队</p><p><img src="/2022/11/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/UAV&amp;Satellite/%E8%B0%83%E7%A0%94/image-20221031194705659.png" alt="image-20221031194705659" style="zoom:33%;"></p><h3 id="动机："><a href="#动机：" class="headerlink" title="动机："></a>动机：</h3><p>由于谷歌地图中用于重建的卫星图像是多年前拍摄的，在照明、小对象移动(例如车辆、拖车)、大的结构变化(例如建筑物的增建/拆除)以及不寻常的对象重建方面与现场图像有所不同，特别是对于树木等非矩形对象。这使得<strong>基于特征的方法在很多情况下很难获得准确和稳健的结果。</strong></p><h3 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h3><p>图像在GE中围绕所需的飞行路线进行渲染。对这些特定于路径的图像进行自动编码器训练，以将它们压缩成小得多的矢量表示。同样的自动编码器也用于压缩实时图像。通过内积核将压缩的实时图像向量与附近的所有压缩GE图像向量进行比较。这会产生与每个相应GE图像姿势相关联的权重。<br>根据这些权重，计算出带有伴随协方差的经度、纬度和航向的位置。</p><h3 id="数据集："><a href="#数据集：" class="headerlink" title="数据集："></a>数据集：</h3><p>uav图像+GE图像</p><p>一天中六个不同时刻的1.1公里路径上的真实无人机图像数据集上进行了演示，覆盖了几种照明条件</p><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><p>查找速度快</p><h3 id="缺陷："><a href="#缺陷：" class="headerlink" title="缺陷："></a>缺陷：</h3><p>不是端到端训练</p><h3 id="改进："><a href="#改进：" class="headerlink" title="改进："></a>改进：</h3><p>用最新的基于特征的方法进行尝试</p><h2 id="UAV-Satellite-View-Synthesis-for-Cross-view-Geo-Localization"><a href="#UAV-Satellite-View-Synthesis-for-Cross-view-Geo-Localization" class="headerlink" title="UAV-Satellite View Synthesis for Cross-view Geo-Localization"></a>UAV-Satellite View Synthesis for Cross-view Geo-Localization</h2><p>（IEEE Transactions on Circuits and Systems for Video Technology TCSVT 2021)</p><h3 id="数据集：-1"><a href="#数据集：-1" class="headerlink" title="数据集："></a>数据集：</h3><p>本研究使用的数据集是大学1652[30]，其中包含来自全球72所大学的1652栋建筑（1652个地点）。据我们所知，这是迄今为止<strong>唯一一个同时包含无人机视图图像和卫星视图图像的数据集</strong>。每个建筑物都与三个不同视角的图像相关联（见图7），包括一个卫星视图图像、54个不同高度和角度的无人机视图图像以及一个或多个地面视图图像。在本文中，我们使用了卫星图像（垂直视图）和无人机图像（斜视图）。大多数无人机视图是倾斜的，这为使用透视投影变换实现更好的匹配性能提供了巨大的潜力。</p><h3 id="方法：-1"><a href="#方法：-1" class="headerlink" title="方法："></a>方法：</h3><p><img src="/2022/11/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/UAV&amp;Satellite/%E8%B0%83%E7%A0%94/image-20221102151027518.png" alt="image-20221102151027518" style="zoom:33%;"></p><p>通过数据集的先验信息进行的透视投影变换（？？？），然后采用GAN网络生成和卫星图像风格相似的图像（同时视角也更相似），如下图所示</p><p><img src="/2022/11/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/UAV&amp;Satellite/%E8%B0%83%E7%A0%94/image-20221101105655053.png" alt="image-20221101105655053" style="zoom: 80%;"></p><p>随后对特征图采用一个方环分割策略来获取距离图像中心不同距离的上下文特征信息</p><pre><code>如图6所示，我们将高级特征分为正方形环形分区中的几个部分。由于地理目标通常位于图像的中心，周围有上下文信息，分割方法不仅可以获得地理目标信息（区域A和B），还可以获得与地理目标具有不同距离的若干上下文信息部分（区域C和D）。因此，我们可以显式地利用上下文信息来优化PCL。我们观察到，我们的分割策略在本质上对图像旋转是鲁棒的。例如，当将图6中中间行的图像旋转到顶行的图像时，四个区域（A、B、C和D）仍然包含与中间图像的对应区域相同的信息。因此，根据方环分割策略设计的网络对图像旋转具有良好的鲁棒性</code></pre><p>(缺陷：只对90°旋转鲁棒，且目标不一定位于图像中心)</p><p><img src="/2022/11/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/UAV&amp;Satellite/%E8%B0%83%E7%A0%94/image-20221101110400421.png" alt="image-20221101110400421" style="zoom:33%;"></p><p>最后对图片生成一个描述符，并比较和其他图像的余弦相似性</p><h3 id="疑问："><a href="#疑问：" class="headerlink" title="疑问："></a>疑问：</h3><p>UAV图像和卫星图像的视野范围基本一样？</p><p>是否能生成已知对应关系的GAN网络</p><h2 id="University-1652-A-Multi-view-Multi-source-Benchmark-for-Drone-based-Geo-localization"><a href="#University-1652-A-Multi-view-Multi-source-Benchmark-for-Drone-based-Geo-localization" class="headerlink" title="University-1652: A Multi-view Multi-source Benchmark for Drone-based Geo-localization"></a>University-1652: A Multi-view Multi-source Benchmark for Drone-based Geo-localization</h2><p>（ACM Multimedia 2020）</p><p>针对跨视角地理定位问题，提出一个baseline和dataset</p><p>数据集包含三种视角（地面、无人机、卫星）</p><p>Google Earth中的3D引擎用于模拟相机的不同视点。</p><h2 id="Joint-Representation-Learning-and-Keypoint-Detection-for-Cross-View-Geo-Localization"><a href="#Joint-Representation-Learning-and-Keypoint-Detection-for-Cross-View-Geo-Localization" class="headerlink" title="Joint Representation Learning and Keypoint Detection for Cross-View Geo-Localization"></a>Joint Representation Learning and Keypoint Detection for Cross-View Geo-Localization</h2><p>(IEEE TRANSACTIONS ON IMAGE PROCESSING 2022)</p><p>我们的模型自动从卫星视图图像和无人机视图图像的相应区域提取关键点，而无需额外监督</p><p>USAM提取的关键点仅用于增强图像的特征识别，而不是检测实际映射。</p><p>（1）我们的方法不需要额外的注释，例如相机姿势、深度等。</p><p>（2） 我们的方法不进行方位估计。</p><p>（3） 所提出的方法考虑了点对点关系</p><p><img src="/2022/11/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/UAV&amp;Satellite/%E8%B0%83%E7%A0%94/image-20221108091237749.png" alt="image-20221108091237749"></p><p>USC相当于算子</p><p>-1 -1 -1</p><p>-1  8 -1</p><p>-1 -1 -1</p><p><a href="https://github.com/AggMan96/RK-Net">AggMan96/RK-Net: Code for RK-Net (github.com)</a></p><h2 id="Real-time-Geo-localization-Using-Satellite-Imagery-and-Topography-for-Unmanned-Aerial-Vehicles"><a href="#Real-time-Geo-localization-Using-Satellite-Imagery-and-Topography-for-Unmanned-Aerial-Vehicles" class="headerlink" title="Real-time Geo-localization Using Satellite Imagery and Topography for Unmanned Aerial Vehicles"></a>Real-time Geo-localization Using Satellite Imagery and Topography for Unmanned Aerial Vehicles</h2><p>使用谷歌地球提供的3D模型+blender渲染卫星图像和深度图像</p><p><img src="/2022/11/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/UAV&amp;Satellite/%E8%B0%83%E7%A0%94/image-20221108110109358.png" alt="image-20221108110109358" style="zoom: 50%;"></p><h2 id="Multiple-environment-Self-adaptive-Network-for-Aerial-view-Geo-localization"><a href="#Multiple-environment-Self-adaptive-Network-for-Aerial-view-Geo-localization" class="headerlink" title="Multiple-environment Self-adaptive Network for Aerial-view Geo-localization"></a>Multiple-environment Self-adaptive Network for Aerial-view Geo-localization</h2><p>(arXiv 2022.4.18)</p><p>现有的方法在真实的天气（如雨天和雾天）下会遇到较大的性能下降，因为它们没有考虑训练数据和多个测试环境之间的域转换。为了缩小这一领域差距，我们提出了一种多环境自适应网络（MuSe-Net），以动态调整环境变化引起的领域偏移。<br>特别是，MuSe-Net采用了包含一个多环境类型提取网络和一个自适应特征提取网络的两分支神经网络。顾名思义，多环境风格提取网络用于提取与环境相关的风格信息，而自适应特征提取网络利用自适应调制模块来动态地最小化与环境有关的风格差距。</p><p><img src="/2022/11/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/UAV&amp;Satellite/%E8%B0%83%E7%A0%94/image-20221108105026501.png" alt="image-20221108105026501"></p><h2 id="CMU-amp-ICRA22-UAV俯瞰视觉定位竞赛"><a href="#CMU-amp-ICRA22-UAV俯瞰视觉定位竞赛" class="headerlink" title="CMU&amp;ICRA22 UAV俯瞰视觉定位竞赛"></a>CMU&amp;ICRA22 UAV俯瞰视觉定位竞赛</h2><p>[ICRA2022] General Place Recognition: Visual Terrain Relative Navigation</p><p><a href="https://www.bilibili.com/video/BV1NG411G78L/?spm_id_from=333.337.search-card.all.click&amp;vd_source=0bb4d13f4bd26eaf7f64c37f29dc9f27">CMU &amp; ICRA22 UAV俯瞰视觉定位竞赛冠军技术方案分享|军事科学院_哔哩哔哩_bilibili</a></p><p><a href="https://www.sohu.com/a/587059840_121124366">CMU&amp;ICRA22 UAV俯瞰视觉定位竞赛亚军技术方案分享_VINS-Mono_VINS-Fusion_cvlife (sohu.com)</a></p><p><a href="https://sites.google.com/andrew.cmu.edu/gpr-competition/">竞赛官网GPR-Competition (google.com)</a></p><p><a href="https://github.com/MetaSLAM/ALTO">数据集：MetaSLAM/ALTO: ALTO (Aerial-view Large-scale Terrain-Oriented) dataset (github.com)</a></p><h3 id="数据集简介："><a href="#数据集简介：" class="headerlink" title="数据集简介："></a>数据集简介：</h3><p><a href="https://www.dropbox.com/sh/q1w5dmghbkut553/AAASkcJEpfsV9PbdLjszzdYAa/UAV?dl=0&amp;preview=readme.txt&amp;subfolder_nav_tracking=1">自述文件.txt (dropbox.com)</a></p><ul><li><p>俄亥俄州到匹兹堡的150公里长的飞行轨迹，使用直升飞机拍摄；</p></li><li><p>轨迹上包括几种不同难度的环境，包括城市/郊区、森林、农村和其他自然地形。</p></li><li>测试集中有几年前的图像（2017年同样是飞机拍的），同时也包括2012年的卫星图像</li><li>500*500像素</li><li>每张直升机图像有成对的卫星图像</li><li>包括GPS（全局的位置，亚米级精度, UTM坐标系）和IMU（四元数，相机相对于ECEF参考帧的方向）信息</li></ul><pre><code>This dataset contains nadir-facing RGB camera imagery captured via commercial helicopter (query), as wellas by high-altitude plane (reference, captured by USGS). We include some query telemetry information thatmay be useful for preprocessing or incorporated into your algorithm as contextual information.We provide three data splits: Train, Val, and Test. These are non-overlapping and include (24701), (3979), and (4209) images, respectively. These are all part of a 150km helicopter flight over a variety ofdifferent terrains, including Urban, Suburban, Rural, Dense Forest, Rivers, and Lakes.For ease of use with deep learning pipelines, we include the images in png format. All images are RGBand in 500x500 pixel resolution.In addition to the imagery in the Train and Val sets, we also provide a few csv files.  Their contents are as follows:    - gt_matches.csv: This file provides the ground truth best match between the query images and the reference images.        As states above, multiple query images may map to a single reference image. We determine "best match" by using the L2         distance of the UTM coordinates associated with the respective images.        - query_ind: The index of the query image.        - query_name: The name of the query image.        - ref_ind: The index of the reference image that best matches the query image.        - ref_name: The name of the reference image that best matches the query image.        - distance: The distance (meters) between the query and best matching reference image.    - query.csv: Telemetry information about each query image frame.        - easting: The ground truth Easting coordinate (meters) where the image was taken.        - northing: The ground truth Northing coordinate (meters) where the image was taken.        - altitude: The ground truth Altitude (meters) above the WGS84 ellipsoid surface.        - orient_x, orient_y, orient_z, orient_w: The orientation (scalar last quaternion) of the camera with respect the the ECEF reference frame.        - name: The name of the query image.    - reference.csv: Information about each reference image frame. Contains information about all offset reference images as well.        - easting: The ground truth Easting coordinate (meters) where the image was taken.        - northing: The ground truth Northing coordinate (meters) where the image was taken.        - name: The directory and name of the reference image.</code></pre><h2 id="Deep-learning-based-robust-positioning-for-all-weather-autonomous-driving"><a href="#Deep-learning-based-robust-positioning-for-all-weather-autonomous-driving" class="headerlink" title="Deep learning-based robust positioning for all-weather autonomous driving"></a>Deep learning-based robust positioning for all-weather autonomous driving</h2><p>定位能力负责精确预测AV在地图上的位置。AV的大多数核心组件（如预测和规划）都依赖于精确定位，例如在几厘米以内。尽管AV严重依赖于GPS等天基全球导航卫星系统的信号进行定位，但由于障碍物或反射，无线电信号可能在许多环境中丢失或退化。尤其是，在被高层建筑包围的城市地区，AV运营仍然极具挑战性。此外，GPS仅提供米级定位精度，而没有方位信息，这对AV乘客或周围环境中的乘客来说可能是致命的。</p><p>自我运动估计方法应利用摄像机（丰富、密集的视觉信息）、激光雷达（可见范围内的精细粒度）和雷达（对恶劣天气的免疫力）的优势，同时解决其相对缺点。</p><p>通过重建的质量来创建监督信号</p><p>自监督的核心思想<a href="https://blog.csdn.net/weixin_43882112/article/details/108610832">(54条消息) 【SLAM系列】Unsupervised Learning of Depth and Ego-Motion from Video<em>^</em>^ 晅菲的博客-CSDN博客</a></p><p><img src="/2022/11/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/UAV&amp;Satellite/%E8%B0%83%E7%A0%94/image-20221106211924306.png" alt="image-20221106211924306"></p>]]></content>
    
    
    <summary type="html">UAV Geolocalization Using Satellite Imagery
Motivation
无人机通常靠GPS来获得全局姿态估计，然而为了使用GPS进行精确的地理定位，无人机必须能够从四个或更多的GPS卫星接收直接的视线。这可能是一个问题，如果存在高楼大厦，山脉或干扰器，可以阻碍来自卫星的信号。
那么我们能在没有GPS的情况下推断出无人机的全局姿态吗?
答案是肯定的，我们可以使用无人机下面附加的相机传感器来比较场景和卫星图像，并推断出无人机的位置。

Geolocalization as an Image Matching Problem
考虑这样一个场景，您有一个卫星图像数</summary>
    
    
    
    <category term="计算机视觉" scheme="https://youngyyp.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    
    <category term="图像匹配" scheme="https://youngyyp.github.io/tags/%E5%9B%BE%E5%83%8F%E5%8C%B9%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>UAV和卫星图像配准思路</title>
    <link href="https://youngyyp.github.io/2022/11/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/UAV&amp;Satellite/%E5%BC%80%E9%A2%98%E7%9B%B8%E5%85%B3/"/>
    <id>https://youngyyp.github.io/2022/11/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/UAV&amp;Satellite/%E5%BC%80%E9%A2%98%E7%9B%B8%E5%85%B3/</id>
    <published>2022-11-08T01:49:41.000Z</published>
    <updated>2023-03-11T06:21:00.597Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>针对UAV和卫星匹配的特定任务，在图像检索的基础上进行特征匹配（可细分为图像检索和特征匹配两个任务）</p><ul><li><h3 id="目的："><a href="#目的：" class="headerlink" title="目的："></a>目的：</h3><ul><li>通过特征匹配结果协助进行图像检索<ul><li>CMU&amp;ICRA22 UAV俯瞰视觉定位竞赛（-2022.9.1）<ul><li><img src="/2022/11/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/UAV&amp;Satellite/%E5%BC%80%E9%A2%98%E7%9B%B8%E5%85%B3/image-20221114102144712.png" alt="image-20221114102144712" style="zoom:50%;"></li></ul></li></ul></li><li>通过特征匹配结果求解更精确的无人机位姿<ul><li>UAV Pose Estimation using Cross-view Geolocalization with Satellite Imagery (ICRA 2019)<ul><li><img src="/2022/11/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/UAV&amp;Satellite/%E5%BC%80%E9%A2%98%E7%9B%B8%E5%85%B3/image-20221114102216892.png" alt="image-20221114102216892"></li></ul></li></ul></li><li>通过特征匹配的feature map促进图像检索网络的训练<ul><li>Multiple-environment Self-adaptive Network for Aerial-view Geo-localization  (arXiv 2022.4.18)<ul><li><img src="/2022/11/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/UAV&amp;Satellite/%E5%BC%80%E9%A2%98%E7%9B%B8%E5%85%B3/image-20221114102429372.png" alt="image-20221114102429372"></li></ul></li></ul></li></ul></li><li></li><li><h3 id="数据集：UAV和卫星图像的对应-相对位姿"><a href="#数据集：UAV和卫星图像的对应-相对位姿" class="headerlink" title="数据集：UAV和卫星图像的对应+相对位姿"></a>数据集：UAV和卫星图像的对应+相对位姿</h3><ul><li>注：大多数数据集为图像检索数据集，即仅存在图像级的对应，不一定有每张图像的位姿，且没有点对点的监督信息<ul><li>==&gt; 若要训练特征点匹配网络，只能采用自监督(随机单应变换等)/弱监督（相机位姿监督）的方法<ul><li>特征匹配自监督训练方式可参考：<ul><li>SuperPoint: Self-Supervised Interest Point Detection and Description（CVPR 2018）<ul><li><img src="/2022/11/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/UAV&amp;Satellite/%E5%BC%80%E9%A2%98%E7%9B%B8%E5%85%B3/image-20221114104109994.png" alt="image-20221114104109994" style="zoom:33%;"></li></ul></li><li>UnSuperPoint:End-to-End Unsupervised Interest Point Detector And Descriptor (arXiv 2019)<ul><li><img src="/2022/11/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/UAV&amp;Satellite/%E5%BC%80%E9%A2%98%E7%9B%B8%E5%85%B3/image-20221114110939059.png" alt="image-20221114110939059" style="zoom:33%;"></li></ul></li><li>Digging Into Self-Supervised Learning of Feature Descriptors (3DV 2021)<ul><li><img src="/2022/11/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/UAV&amp;Satellite/%E5%BC%80%E9%A2%98%E7%9B%B8%E5%85%B3/image-20221114103344274.png" alt="image-20221114103344274" style="zoom:33%;"></li></ul></li><li>Looking Beyond Corners: Contrastive Learning of Visual Representations for Keypoint Detection and Description Extraction (arXiv 2021.12)<ul><li>对比学习的方式训练</li><li><img src="/2022/11/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/UAV&amp;Satellite/%E5%BC%80%E9%A2%98%E7%9B%B8%E5%85%B3/image-20221114103411106.png" alt="image-20221114103411106"></li></ul></li></ul></li></ul></li></ul></li><li><h3 id="数据特点："><a href="#数据特点：" class="headerlink" title="数据特点："></a>数据特点：</h3><ul><li>旋转角度大==&gt;可采用旋转不变CNN来改进网络<ul><li>A case for using rotation invariant features in state of the art feature matchers （CVPRW 2022）</li><li><img src="/2022/11/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/UAV&amp;Satellite/%E5%BC%80%E9%A2%98%E7%9B%B8%E5%85%B3/image-20221114104424545.png" alt="image-20221114104424545" style="zoom:33%;"></li></ul></li><li>UAV的斜视视角和卫星的俯视视角==&gt;不同视角的转化、不同色彩风格的转化</li></ul></li><li><p>UAV-Satellite View Synthesis for Cross-view Geo-Localization （IEEE Transactions on Circuits and Systems for Video Technology 2021）</p><pre><code>  - &lt;img src="开题相关/image-20221114104920560.png" alt="image-20221114104920560" style="zoom:33%;" /&gt;</code></pre></li></ul></li></ul></li></ul>]]></content>
    
    
    <summary type="html">* 针对UAV和卫星匹配的特定任务，在图像检索的基础上进行特征匹配（可细分为图像检索和特征匹配两个任务）
   
    * 目的：
       * 通过特征匹配结果协助进行图像检索 * CMU&amp;amp;ICRA22 UAV俯瞰视觉定位竞赛（-2022.9.1） * 
            
            
         
         
       * 通过特征匹配结果求解更精确的无人机位姿 * UAV Pose Estimation using Cross-view Geolocalization with Satellite Imagery (ICRA 2019) * 
</summary>
    
    
    
    <category term="计算机视觉" scheme="https://youngyyp.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    
    <category term="图像匹配" scheme="https://youngyyp.github.io/tags/%E5%9B%BE%E5%83%8F%E5%8C%B9%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>LoFTR代码</title>
    <link href="https://youngyyp.github.io/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/Feature%20Matching/LoFTR/"/>
    <id>https://youngyyp.github.io/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/Feature%20Matching/LoFTR/</id>
    <published>2022-11-07T01:49:41.000Z</published>
    <updated>2023-03-11T06:13:25.820Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代码运行"><a href="#代码运行" class="headerlink" title="代码运行"></a>代码运行</h2><pre class=" language-lang-python"><code class="language-lang-python">train.py "configs/data/megadepth_trainval_640.py" "configs/loftr/outdoor/loftr_ds_dense.py" --exp_name="outdoor-ds-640" --gpus=2 --num_nodes=1 --accelerator="ddp" --batch_size=1 --num_workers=0 --pin_memory=true --check_val_every_n_epoch=1 --log_every_n_steps=1 --flush_logs_every_n_steps=1 --limit_val_batches=1. --num_sanity_val_steps=10 --benchmark=True --max_epochs=30demo_loftr.py --weight /home/young/disk/code/feature_matching/LoFTR/logs/tb_logs/outdoor-ds-640-bs=6/version_2/checkpoints/epoch=6-auc@5=0.433-auc@10=0.606-auc@20=0.742.ckpt --input /home/young/disk/code/feature_matching/LoFTR/data/videos/video1.mp4</code></pre><h2 id="训练结果"><a href="#训练结果" class="headerlink" title="训练结果"></a>训练结果</h2><p><img src="/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/Feature%20Matching/LoFTR/image-20220918163227217.png" alt="image-20220918163227217"></p><p>修改train_list.txt来减少数据集的场景数目</p><p>dataset的数量不会影响显存占用，输入网络的图像尺寸才会影响显存占用</p><p>原数据量（640*640）的测试结果</p><p><img src="/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/Feature%20Matching/LoFTR/image-20220930105732853.png" alt="image-20220930105732853"></p><p>quadattention（640*640）</p><p>5 epoch  45.90  63.19  76.30</p><p>30 epoch  49.75  66.76  79.87</p><p>best 27 epoch  50.96  68.05  80.32</p><h3 id="test-1500-results"><a href="#test-1500-results" class="headerlink" title="test_1500 results"></a>test_1500 results</h3><p>loftr_od_ds</p><p><img src="/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/Feature%20Matching/LoFTR/image-20221012112651765.png" alt="image-20221012112651765"></p><p>quad_od_ds (my)</p><p>quad_od_ds(author)</p><p><img src="/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/Feature%20Matching/LoFTR/image-20221012123020189.png" alt="image-20221012123020189"></p><h3 id="用十分之一的数据测试结果"><a href="#用十分之一的数据测试结果" class="headerlink" title="用十分之一的数据测试结果"></a>用十分之一的数据测试结果</h3><p><img src="/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/Feature%20Matching/LoFTR/image-20220930110011605.png" alt="image-20220930110011605"></p><p>20epoch的效果相当于原2epoch</p><h2 id="原理部分"><a href="#原理部分" class="headerlink" title="原理部分"></a>原理部分</h2><p>线性attention</p><p><a href="https://zhuanlan.zhihu.com/p/157490738?from_voters_page=true">https://zhuanlan.zhihu.com/p/157490738?from_voters_page=true</a></p><p><img src="/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/Feature%20Matching/LoFTR/image-20221013150606391.png" alt="image-20221013150606391"></p><h2 id="改进思路"><a href="#改进思路" class="headerlink" title="改进思路"></a>改进思路</h2><ul><li>全部替换为旋转不变的transformer（包括cnn）</li><li>添加几何信息指导</li><li>大尺寸图像（图像尺寸在训练和测试时都是一样的吗？必须固定？）</li><li>每一层attention都输出匹配对信息，最后对这些信息进行投票</li><li>加入光流法or直接法</li><li>粗配准的结果已经可以求一个大致的位姿，能否根据这个位姿进行优化</li><li>可以设置一个目标：以最少数量的点，得到最准确的位姿，这样取出来的点就是最准确的点</li><li>点的误差改为3d点的误差，而不是2d点</li><li>粗匹配结果计算单应矩阵后，对图像（或者feature map）进行单应变换得到粗对齐，<a href="https://blog.csdn.net/weixin_43605641/article/details/120970142?spm=1001.2014.3001.5501">(53条消息) RANSAC-Flow: generic two-stage image alignment（ECCV 2020）图像对齐论文代码详细分析_秋山丶雪绪的博客-CSDN博客</a></li><li>同时解决旋转和尺度的问题</li><li>局部性失效时才采用更全局的信息</li><li>图像对垂直化</li></ul>]]></content>
    
    
    <summary type="html">代码运行
train.py &quot;configs/data/megadepth_trainval_640.py&quot; &quot;configs/loftr/outdoor/loftr_ds_dense.py&quot; --exp_name=&quot;outdoor-ds-640&quot; --gpus=2 --num_nodes=1 --accelerator=&quot;ddp&quot; --batch_size=1 --num_workers=0 --pin_memory=true --check_val_every_n_epoch=1 --log_every_n_steps=1 --flush_logs_every_n_steps=1 --li</summary>
    
    
    
    <category term="计算机视觉" scheme="https://youngyyp.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    
    <category term="特征匹配" scheme="https://youngyyp.github.io/tags/%E7%89%B9%E5%BE%81%E5%8C%B9%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>理解BN</title>
    <link href="https://youngyyp.github.io/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/test_time_adaptation/%E7%90%86%E8%A7%A3BN/"/>
    <id>https://youngyyp.github.io/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/test_time_adaptation/%E7%90%86%E8%A7%A3BN/</id>
    <published>2022-11-07T01:49:41.000Z</published>
    <updated>2023-03-11T06:17:10.365Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/test_time_adaptation/%E7%90%86%E8%A7%A3BN/85bab1e5493a4f74a97b8e7b473ad406.jpeg" alt="在这里插入图片描述"></p><ul><li><p>BN和Dropout在训练和测试时的差别</p><p>  (<a href="https://www.zhihu.com/people/hai-chen-wei">https://www.zhihu.com/people/hai-chen-wei</a>)</p></li><li><p><a href="https://zhuanlan.zhihu.com/p/61725100">https://zhuanlan.zhihu.com/p/61725100</a></p></li><li><p>我们<strong>在训练和推理过程中BatchNorm有不同的行为</strong>。在训练中，我们记录均值和方差的指数移动平均值，以供以后在推理时使用。其原因是，在训练期间处理批次时，我们可以获得输入随时间变化的均值和方差的更好估计，然后将其用于推理。在推理过程中使用输入批次的平均值和方差将不太准确，因为其大小可能比训练中使用的小得多，大数定律在这里发挥了作用。</p></li><li><p>即model.train()模式下会计算统计参数</p></li><li><p>BN在训练时是在每个batch上计算均值和方差来进行归一化，每个batch的样本量都不大，所以每次计算出来的均值和方差就存在差异。预测时一般传入一个样本，所以不存在归一化，其次哪怕是预测一个batch，但batch计算出来的均值和方差是偏离总体样本的，所以通常是通过滑动平均结合训练时所有batch的均值和方差来得到一个总体均值和方差。</p></li><li><p>Dropout在训练时会随机丢弃一些神经元，这样会导致输出的结果变小。而预测时往往关闭dropout，保证预测结果的一致性（不关闭dropout可能同一个输入会得到不同的输出，不过输出会服从某一分布。另外有些情况下可以不关闭dropout，比如文本生成下，不关闭会增大输出的多样性）。</p></li></ul><p><a href="https://blog.csdn.net/qq_40728667/article/details/121865517">（Pytorch）BatchNorm中的track_running_stats参数_Think@的博客-CSDN博客_track_running_stats</a></p>]]></content>
    
    
    <summary type="html">* BN和Dropout在训练和测试时的差别
   
    (https://www.zhihu.com/people/hai-chen-wei)
   
   
 * https://zhuanlan.zhihu.com/p/61725100
   
   
 * 我们在训练和推理过程中BatchNorm有不同的行为。在训练中，我们记录均值和方差的指数移动平均值，以供以后在推理时使用。其原因是，在训练期间处理批次时，我们可以获得输入随时间变化的均值和方差的更好估计，然后将其用于推理。在推理过程中使用输入批次的平均值和方差将不太准确，因为其大小可能比训练中使用的小得多，大数定律在这里发挥了作</summary>
    
    
    
    <category term="计算机视觉" scheme="https://youngyyp.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    
    <category term="batch norm" scheme="https://youngyyp.github.io/tags/batch-norm/"/>
    
  </entry>
  
  <entry>
    <title>TENT论文阅读</title>
    <link href="https://youngyyp.github.io/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/test_time_adaptation/TENT/"/>
    <id>https://youngyyp.github.io/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/test_time_adaptation/TENT/</id>
    <published>2022-11-07T01:49:41.000Z</published>
    <updated>2023-03-11T06:21:00.538Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TENT-FULLY-TEST-TIME-ADAPTATION-BY-ENTROPY-MINIMIZATION"><a href="#TENT-FULLY-TEST-TIME-ADAPTATION-BY-ENTROPY-MINIMIZATION" class="headerlink" title="TENT: FULLY TEST-TIME ADAPTATION BY ENTROPY MINIMIZATION"></a>TENT: FULLY TEST-TIME ADAPTATION BY ENTROPY MINIMIZATION</h2><h3 id="INTRODUCTION"><a href="#INTRODUCTION" class="headerlink" title="INTRODUCTION"></a>INTRODUCTION</h3><p>在测试过程中，模型必须适应新的和不同的数据。<br>在这种完全测试时间自适应的设置中，模型只有测试数据和自己的参数。我们建议通过测试熵最小化（<strong>test entropy minimization - tent</strong>）进行调整：我们优化了模型的置信度，通过其预测的熵来衡量。</p><p>深度网络可以在相同分布的训练和测试数据上实现高精度，然而，对新的和不同的数据的概括是有限的。当训练（源）数据与测试（目标）数据不同时，准确性会受到影响，这种情况被称为<strong>数据集偏移</strong>。模型在测试过程中可能对训练过程中未知的变化敏感，无论是自然变化还是腐蚀，如意外天气或传感器退化。然而，可能需要在不同的数据分布上部署模型，因此需要进行调整（<strong>adaptation</strong>）。<br>在测试期间，模型必须仅根据其参数和目标数据进行调整。这种完全测试时间自适应设置不能依赖于源数据或监督。因为源数据可能很庞大且无法及时获取当前测试数据的标签信息。</p><p>数据量、计算量和任务需求这些实际问题引出了测试时间适应性的重要性：</p><p>1.可用性。为了带宽、隐私或利润，模型可能在没有源数据的情况下分发。<br>2.效率。在测试期间（重新）处理源数据在计算上可能不实用。<br>3.准确性。如果不进行调整，模型可能太不准确，无法达到其目的。</p><p>为了在测试期间进行调整，我们将模型预测的熵最小化。我们将这个目标称为测试熵，并以其命名我们的方法tent。我们选择熵作为它与误差和偏移（domain shift）的联系。熵与误差有关，因为更有信心的预测更准确（图1）。<br>熵与损坏导致的变化有关，因为损坏越多，熵就越多，随着损坏程度的增加，熵与图像分类的损失有很强的等级相关性（图2）。</p><p><strong>我们的贡献：</strong></p><p>•我们强调了只使用目标数据而不使用源数据的完全测试时间自适应设置。为了强调推理过程中的实际适应性，我们使用离线和在线更新进行基准测试。<br>•我们将熵作为自适应目标，并提出了tent：一种测试时间熵最小化方案，通过减少测试数据上模型预测的熵来减少泛化误差。<br>•对于损坏的鲁棒性，在ImageNet-C上，tent达到44:0%的错误，优于鲁棒训练的现状（50:2%）和测试时间标准化的强大基线（49:9%）。<br>•对于领域适应，tent能够在线和无源地适应数字分类和语义分割，甚至可以与使用源数据和更多优化的方法相媲美。</p><h3 id="SETTING-FULLY-TEST-TIME-ADAPTATION"><a href="#SETTING-FULLY-TEST-TIME-ADAPTATION" class="headerlink" title="SETTING: FULLY TEST-TIME ADAPTATION"></a>SETTING: FULLY TEST-TIME ADAPTATION</h3><p>适应解决了从源到目标的泛化问题。具有在源数据和标签xs上训练的参数的模型f（x）；当对移位的目标数据xt进行测试时，ys可能不会泛化。表1总结了自适应设置、所需数据和损失类型。<strong>我们的完全测试时间自适应设置仅需要模型参数f和未标记的目标数据xt</strong>，以便在推理过程中进行自适应。</p><p><img src="/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/test_time_adaptation/TENT/image-20221117152108373.png" alt="image-20221117152108373"></p><p>现有的适应设置扩展了训练过程，使用了更多的数据和监督。通过微调进行转移学习（Donahue等人，2014；Yosinski等人，2014）需要目标标签来（重新）训练监督损失L（xt；yt）。如果没有目标标签，就无法进行这种有监督的训练。域自适应（DA）（Quionero Candela等人，2009年；Saenko等人，2010年；Ganin&amp;Lempitsky，2015年；Tzeng等人，2015年）需要源数据和目标数据来训练跨域损失L（xs；xt）。<br>测试时间训练（TTT）（Sun等人，2019b）在测试期间进行调整，但首先改变训练以联合优化其监督损失L（xs；ys）和自我监督损失L（xs）。如果没有source data，将无法使用跨域联合训练（DA）或损失（TTT）。<br>测试期间意外的目标数据需要测试时间调整（TTA）。TTT和我们的设置通过<strong>优化测试L（xt）期间的无监督损失</strong>来调整模型。在训练期间，TTT<strong>联合优化了源数据L（xs）上的无监督损失和监督损失L（xs；ys），以确保在损失之间共享参数</strong>，以与L（xt）的自适应兼容。）（测试时间训练（TTT）联合训练目标上的受监督和自监督任务，然后在测试过程中继续训练目标上自监督任务）。</p><p>完全测试时间自适应与给定参数的训练数据和训练损失无关。通过不改变训练，我们的设置有可能需要更少的数据和计算来适应。</p><h3 id="METHOD-TEST-ENTROPY-MINIMIZATION-VIA-FEATURE-MODULATION"><a href="#METHOD-TEST-ENTROPY-MINIMIZATION-VIA-FEATURE-MODULATION" class="headerlink" title="METHOD: TEST ENTROPY MINIMIZATION VIA FEATURE MODULATION"></a>METHOD: TEST ENTROPY MINIMIZATION VIA FEATURE MODULATION</h3><p><img src="/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/test_time_adaptation/TENT/image-20221117154043795.png" alt="image-20221117154043795"></p><p><em>方法概述。Tent不改变训练阶段（a），但在给定参数和目标数据xt的约束调制下，在测试（b）期间最小化预测的熵</em></p><p>模型要求：针对的是监督任务，所以模型需要经过有监督的训练；模型必须是概率模型，因为需要计算预测的熵；快速迭代优化需要梯度，所以模型必须可微。</p><h4 id="ENTROPY-OBJECTIVE"><a href="#ENTROPY-OBJECTIVE" class="headerlink" title="ENTROPY OBJECTIVE"></a>ENTROPY OBJECTIVE</h4><p>我们的测试时间目标L（xt）是最小化模型预测的熵H（^y）^y=f（xt）。特别地，我们测量了香农熵（香农，1948），<img src="/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/test_time_adaptation/TENT/image-20221117160701962.png" alt="image-20221117160701962" style="zoom: 33%;">。注意，优化单个预测有一个退化解：即将所有概率分配给最可能的类。我们通过在批处理中共享的参数上联合优化批处理预测来防止这种情况。<strong>（优化单个预测会得到退化解，因此联合优化一个批的预测概率）</strong><br><strong>熵是一个无监督的目标，因为它只依赖于预测而不是注释。然而，作为预测的度量，它与监督任务和模型直接相关</strong>。<br>相比之下，用于自我监督学习的代理任务与监督任务没有直接关系。<br>代理任务从没有任务标签y的输入xt导出自监督标签y0。这些代理的示例包括旋转预测（Gidaris等人，2018）、上下文预测（Doersch等人，2015）和跨信道自动编码（Zhang等人，2017）。代理任务上的过多进展可能会干扰受监督任务的性能，自我监督的自适应方法必须相应地限制或混合更新（Sun等人，2019b；a）。因此，需要谨慎地选择与域和任务兼容的代理，为代理模型设计架构，并平衡任务和代理目标之间的优化。我们的熵目标不需要这样的努力<strong>（自监督方法选择一个域与任务相兼容的proxy很重要）</strong></p><h4 id="MODULATION-PARAMETERS"><a href="#MODULATION-PARAMETERS" class="headerlink" title="MODULATION PARAMETERS"></a>MODULATION PARAMETERS</h4><p>模型参数是测试时间优化的自然选择，这些是列车时间熵最小化的先前工作的选择（Grand代客和Bengio，2005；Dhillon等人，2020；Carlucci等人，2017）。然而，模型参数是我们设置中训练/源数据的唯一表示，改变可能会导致模型偏离其训练。此外，f可以是非线性的，并且可以是高维的，使得优化对于测试时间的使用过于<strong>敏感</strong>和低效。</p><p><img src="/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/test_time_adaptation/TENT/image-20221117154513119.png" alt="image-20221117154513119"></p><p><em>图4：Tent通过估计归一化统计数据来调制测试期间的特征；优化变换参数；. 标准化和变换将按通道缩放和移动应用于特征。在不使用源数据的情况下，根据目标数据更新统计信息和参数。在实践中，适应；是有效的，因为它们占模型参数的&lt;1%</em></p><p>为了稳定性和效率，我们只更新线性（尺度和位移）和低维（信道方向）的特征调制。图4显示了我们调制的两个步骤：统计归一化和参数转换。标准化将输入x集中并标准化</p><p><img src="/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/test_time_adaptation/TENT/image-20221117162250401.png" alt="image-20221117162250401"></p><p>为了实现，我们只需重新调整源模型的<strong>normalization layers</strong>的用途。我们在测试期间更新了所有层和通道的归一化统计和仿射参数。</p><h4 id="ALGORITHM"><a href="#ALGORITHM" class="headerlink" title="ALGORITHM"></a>ALGORITHM</h4><p><strong>初始化</strong> 优化器收集源模型中每个归一化层l和通道k的仿射变换参数{γl，k，βl，k}。其余参数θ｛γl，k，βl，k｝是固定的。源数据的归一化统计{μl，k，σl，k}被丢弃。<br><strong>迭代 </strong>每个步骤都会更新一批数据的规范化统计信息和转换参数。在正向过程中，依次估计每个层的归一化统计。在反向传播过程中，通过预测熵的梯度更新变换参数γ、β。变换参数更新遵循当前批次的预测，因此它只影响下一批次（除非重复正向）。这只需要每个额外计算点一个梯度，因此我们默认使用此方案以提高效率。<br><strong>终止 </strong>对于在线适应，不需要终止，只要有测试数据，迭代就会继续。对于离线适应，首先更新模型，然后重复推理。<br>当然，适应可以通过多个时期的更新来继续</p><h3 id="EXPERIMENTS"><a href="#EXPERIMENTS" class="headerlink" title="EXPERIMENTS"></a>EXPERIMENTS</h3><h4 id="ROBUSTNESS-TO-CORRUPTIONS"><a href="#ROBUSTNESS-TO-CORRUPTIONS" class="headerlink" title="ROBUSTNESS TO CORRUPTIONS"></a>ROBUSTNESS TO CORRUPTIONS</h4><p>为了对损坏的健壮性进行基准测试，我们使用了常见的图像损坏（示例参见附录A）。通过复制CIFAR-10\/100和ImageNet数据集的<strong>测试/验证集</strong>，并在五个严重级别应用15种类型的损坏，将CIFAR-10/100-C和ImageNet-C数据集转换为CIFAR-10/10-C和ImageNet C损坏基准。</p><p><img src="/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/test_time_adaptation/TENT/image-20221118152903397.png" alt="image-20221118152903397" style="zoom:43%;"></p><p>Tent在不增加原始数据错误的情况下达到了大多数损坏类型的最小错误。（original的错误率基本没变）</p><p><img src="/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/test_time_adaptation/TENT/image-20221118153002103.png" alt="image-20221118153002103" style="zoom:50%;"></p><p>我们的网络配备了批量标准化（Ioffe&amp;Szegedy，2015）。<strong>对于没有自适应的源模型，在对源数据进行训练期间估计归一化统计</strong>。对于所有测试时间自适应方法，我们在对目标数据进行测试期间估计这些统计数据，正如在标准化自适应的并行工作中所做的那样（Schneider等人，2020；Nado等人，2020）。</p><p>测试时间归一化（BN）更新测试期间目标数据的批次归一化统计</p><p>（BN) updates batch normalization statistics </p><p><img src="/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/test_time_adaptation/TENT/image-20221117171421188.png" alt="image-20221117171421188" style="zoom: 50%;"></p><h3 id="RELATED-WORK"><a href="#RELATED-WORK" class="headerlink" title="RELATED WORK"></a>RELATED WORK</h3><p>我们涉及现有的自适应、熵最小化和特征调制方法。<br>训练时间自适应域自适应通过跨域损失L（xs；xt）在源和目标上联合优化，以减轻偏移。这些损失优化了特征对齐（Gretton等人，2009；Sun等人，2017）、对抗不变性（Ganin&amp;Lempitsky，2015；Tzeng等人，2017年）或共享代理任务（Sun等人，2019a）。转导（Gammerman等人，1998年；Joachims，1999年；Zhou等人，2004年）联合优化列车和测试，以更好地适应特定测试实例。尽管在其设置中有效，但当源/训练和目标/测试的联合使用被拒绝时，两者都不适用。帐篷只能适应目标。<br>最近的“无源”方法（Li等人，2020；Kundu等人，2020年；Liang等人，2020）也适用于无源数据的情况。Li等人（2020）；Kundu等人（2020）依赖于生成建模，并优化具有多重损失的多个模型。Kundu等人（2020）；Liang等人（2020）也改变了训练。Tent不需要生成建模，也不改变训练，因此它可以更广泛地部署，以更高的计算效率在线适应。SHOT（Liang等人，2020）通过信息最大化（熵最小化和多样性正则化）进行调整，但在其他损失和参数化方面有所不同。这些无源方法在多个时间段内以多个损失离线优化，这需要比帐篷更多的调整和计算，但可以通过更多的计算实现更高的精度。Tent在线优化，仅需一次损失和有效的调制参数化，以强调推理过程中的充分测试时间自适应。我们鼓励在没有原始数据的情况下，在适应的前沿对这些作品进行审查。<br>Chidlovskii等人（2016）是第一个出<strong>于法律、商业或技术考虑</strong>而在没有源数据的情况下激励适应的人。他们通过应用去噪自动编码器来调整预测，而我们通过熵最小化来调整模型。我们分享他们的动机，但方法和实验不同。<br>测试时间适配帐篷通过测试时间优化和标准化进行适配以更新模型。<br>预测的测试时间适应，通过这种适应，基于更简单和特定的情况来调整更困难和不确定的情况（Jain&amp;Learned Miller，2011），为我们自己的基于确定性的模型适应方案提供了灵感。<br>测试时间训练（TTT）（Sun等人，2019b）也在测试期间优化，但其损失不同，必须改变训练。TTT依赖于代理任务，例如识别图像的旋转，因此其损失取决于代理的选择。（事实上，其作者警告说，代理必须“在新域中既定义明确又不平凡”）。TTT改变训练以在适应目标之前优化源上的代理丢失。帐篷无需代理任务，也无需改变训练即可适应。<br>标准化特征统计对于域自适应是常见的（Gretton等人，2009；Sun等人，2017）。<br>对于批量归一化，Li等人（2017）；Carlucci等人（2017）在培训期间分离了来源和目标统计数据。Schneider等人（2020）；Nado等人（2020）在测试期间估计目标统计，以提高泛化能力。Tent建立在测试时间标准化的基础上，以进一步减少泛化误差。<br>熵最小化熵最小化是域自适应（Carlucci等人，2017；Shu等人，2018；Saito等人，2019；Roy等人，2019）、半监督学习（Grand代客和Bengio，2005；Lee，2013；Berhelot等人，2019年）和少镜头学习（Dhillon等人，2020）的关键正则化器。<br>正则化熵惩罚数据分布中高密度的决策，以提高不同类别的准确性（Grand代客和Bengio，2005）。这些方法将训练期间的熵与其他有监督和无监督的额外数据损失协调起来。帐篷是第一个将8</p><h3 id="DISCUSSION"><a href="#DISCUSSION" class="headerlink" title="DISCUSSION"></a>DISCUSSION</h3><p>Tent通过测试时间熵最小化来减少移位数据的泛化误差。在最小化熵的过程中，模型会根据自身预测的反馈进行调整。这是真正自我监督的自我提升。这种类型的自我监督完全由受监督的任务定义，与设计用于从数据中提取更多监督的代理任务不同，但它仍然显著地减少了错误。<br>尽管如此，由于腐败和其他变化导致的错误仍然存在，因此需要进行更多的调整。下一步应通过更有效和更有效的损失，在更一般的参数上，对更多更难的换档类型进行测试时间调整。<br>Shifts Tent减少了各种移位的误差，包括图像损坏、数字外观的简单变化以及模拟真实差异。这些变化作为标准化基准很受欢迎，但其他现实世界的变化也存在。例如，通过复制数据集收集过程制作的CIFAR 10.1和ImageNetV2测试集（Recht等人，2018；2019）包含自然但未知的变化。尽管这两个集合的误差都较高，表明存在移位，但帐篷并不能改善泛化。对抗性转变（Szegedy等人，2014）也威胁着现实世界的使用，攻击者不断适应防御。尽管对抗性训练（Madry et al.，2018）有所不同，但测试时间适应可以帮助对抗此类测试时间攻击。<br>参数Tent通过标准化和变换来调节模型，但大部分模型保持不变。测试时间调整可能会更新更多的模型，但问题是要确定既有表现力又可靠的参数，这可能会与损失的选择相互影响。TTT适应受监督和自我监督模型共享的多个特征层，SHOT适应模型的除最后一层以外的所有层。这些选择取决于模型架构、损失和调优。对于帐篷调制是可靠的，但通过SHOT参数化可以更好地解决VisDA上的较大偏移。联合调整投入可能是一种更普遍的选择。如果一个模型能够适应目标，那么它的输入梯度可能会优化空间转换或图像转换，以减少没有源数据的移动。<br>损失帐篷使熵最小化。对于更多的适应，一般的但不定期的测试时间优化是否存在有效的损失？熵在任务中是通用的，但范围有限。<strong>它需要批量优化，并且不能一次在一个点上偶尔更新</strong>。TTT可以这样做，但必须使用正确的代理任务。对于较少的计算，是否存在更多局部优化的有效损失？Tent和TTT都需要对模型进行完整（重新）计算以进行更新，因为它们依赖于模型的预测。如果损失是在表示上定义的，那么更新将需要更少的正向和反向计算。具体回到熵，这种损失可能与校准相互作用（Guo等人，2017），因为更好的不确定性估计可以推动更好的适应。<br>我们希望，完全测试时间自适应设置可以促进新的方法，使模型能够自适应，就像帐篷每次更新都会生成新模型一样</p><h2 id="实验设置"><a href="#实验设置" class="headerlink" title="实验设置"></a>实验设置</h2><p>We evaluate tent for <strong>corruption robustness on CIFAR-10/CIFAR-100 and ImageNet</strong>, and for <strong>domain adaptation on digit adaptation from SVHN to MNIST/MNIST-M/USPS</strong></p><p>For <strong>corruption</strong> we use residual networks (He et al., 2016) with 26 layers (<strong>R-26</strong>) on CIFAR10/100 and 50 layers (<strong>R-50</strong>) on ImageNet. For domain adaptation we use the <strong>R-26</strong> architecture. For fair comparison, all methods in each experimental condition share the same architecture.</p><p>On ImageNet we optimize by SGD with momentum; on other datasets we optimize by Adam</p><p>On ImageNet, we set BS = 64 and LR = 0.00025, and on other datasets we set BS = 128 and LR = 0.001.</p><p>Baselines We compare to <strong>domain adaptation, self-supervision, normalization, and pseudo-labeling</strong>:</p><ul><li><p>source</p></li><li><p>adversarial domain adaptation (RG):</p><ul><li>论文题目：Unsupervised Domain Adaptation by Backpropagation（2015）</li><li><img src="/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/test_time_adaptation/TENT/image-20221204190413618.png" alt="image-20221204190413618"></li><li>需要修改训练流程且无法在测试时更新</li></ul></li><li><p>self-supervised domain adaptation (UDA-SS):</p><ul><li>联合训练源和目标上的自监督旋转和定位任务，以优化共享表示，需要<strong>同时有源数据和测试数据</strong></li><li>论文题目：Unsupervised domain adaptation through self-supervision（2019）</li><li>本文讨论了无监督域自适应，即源域上有标记的训练数据，但目标是在目标域上只有未标记数据，希望能够通过一些方法将源域上分类器迁移到目标域上，并能在目标域上有良好的性能。与之前的许多工作一样，我们试图在保持可辨别性的同时，对源域和目标域的学习表示进行对齐。我们实现对齐的方法是同时在两个领域学习<strong>辅助自监督任务</strong>。每一个自监督的任务都使这两个领域沿着与该任务相关的方向走得更近。在源域上与主任务分类器联合训练，可以成功地推广到未标记的目标域。</li><li>代理任务的选择：<ul><li>旋转预测：输入图像依次旋转90，180，270度，该任务是该任务是预测旋转角度作为一个四维分类问题。<br>  翻转预测：输入图像垂直随机翻转;任务是预测它是否翻转。<br>  贴片位置预测：从输入图像中随机裁剪出小块;任务是预测这些补丁来自哪里。</li></ul></li></ul></li><li><p>test-time training（TTT）:</p><ul><li>在源端对有监督和自监督任务进行联合训练，在测试时继续对目标端自监督任务进行训练</li><li>论文题目：Test-Time Training with Self-Supervision for Generalization under Distribution Shifts（2020）</li><li>无监督域自适应研究的是当训练时除了来自训练分布(源域)的有标签数据集外，还有来自测试分布(目标域)的无标签数据集时，分布偏移的问题。然而，<strong>问题设置的局限性在于，泛化性可能只针对这个特定的测试分布而得到改善</strong>，这可能很难提前预料。Test-Time Training不预期任何测试分布，通过改变无监督域适应的设置，同时从其算法中得到启发。我们的论文是对Sun et al . ( 2019 )的一个后续，我们对此进行了解释和实证</li></ul></li><li><p>test-time normalization (BN)（2020）：</p><ul><li>根据测试数据的分布，动量式的更新BN层的统计数据（均值和方差），能够实现单样本输入</li></ul></li><li><p>pseudo-labeling (PL)（2013）：</p><ul><li>调整一个置信度阈值，将超过该阈值的预测赋值为标签，然后在测试之前将模型优化到这些伪标注。</li><li>在给无标签样本添加标签后，然后选择置信度高的样本扩充到有标签的样本中，再训练模型，不断的更新模型</li></ul></li></ul><pre><code>注：**只有BN、PL、TENT算TTA**</code></pre><h3 id="ROBUSTNESS-TO-CORRUPTIONS-1"><a href="#ROBUSTNESS-TO-CORRUPTIONS-1" class="headerlink" title="ROBUSTNESS TO CORRUPTIONS"></a>ROBUSTNESS TO CORRUPTIONS</h3><p>为了衡量腐败的稳健性，我们使用常见的图像腐败(见附录A)。通过复制CIFAR - 10 / 100和ImageNet数据集的测试/验证集，并在5个严重等级( Hendrycks &amp; Dietterich , 2019)上应用15种腐败类型，将CIFAR - 10 / 100 - C和ImageNet - C数据集转换为腐败基准测试集。</p><p>不同程度的不同类型的损坏  每次都会reset model</p><p>model：resnet 26</p><p>难以完全复现原论文数据，需要看看其他论文里面是如何是如何实现的</p><h4 id="github-issue"><a href="#github-issue" class="headerlink" title="github issue"></a>github issue</h4><ul><li>tent有时会随着训练epoch的轮数增加而效果下降<a href="https://github.com/DequanWang/tent/issues/7">Performance on CIFAR-10-C deteriorates with more epochs · Issue #7 · DequanWang/tent (github.com)</a> <ul><li>测试时间适应方法如何决定<strong>何时更新或不更新</strong>，特别是何时停止？Tent 在这方面很简单，并且总是在每批上更新，但也许更复杂的规则可以在结果恶化之前停止优化。</li></ul></li></ul>]]></content>
    
    
    <summary type="html">TENT: FULLY TEST-TIME ADAPTATION BY ENTROPY MINIMIZATION
INTRODUCTION
在测试过程中，模型必须适应新的和不同的数据。
在这种完全测试时间自适应的设置中，模型只有测试数据和自己的参数。我们建议通过测试熵最小化（test entropy minimization - tent）进行调整：我们优化了模型的置信度，通过其预测的熵来衡量。

深度网络可以在相同分布的训练和测试数据上实现高精度，然而，对新的和不同的数据的概括是有限的。当训练（源）数据与测试（目标）数据不同时，准确性会受到影响，这种情况被称为数据集偏移。模型在测试过程中可能</summary>
    
    
    
    <category term="计算机视觉" scheme="https://youngyyp.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    
    <category term="test time adaptation" scheme="https://youngyyp.github.io/tags/test-time-adaptation/"/>
    
  </entry>
  
  <entry>
    <title>子空间论文阅读</title>
    <link href="https://youngyyp.github.io/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/test_time_adaptation/Low%20Dimensional%20Trajectory%20Hypothesis%20is%20True/"/>
    <id>https://youngyyp.github.io/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/test_time_adaptation/Low%20Dimensional%20Trajectory%20Hypothesis%20is%20True/</id>
    <published>2022-11-07T01:49:41.000Z</published>
    <updated>2023-03-11T06:21:00.096Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Low-Dimensional-Trajectory-Hypothesis-is-True-DNNs-can-be-Trained-in-Tiny-Subspaces"><a href="#Low-Dimensional-Trajectory-Hypothesis-is-True-DNNs-can-be-Trained-in-Tiny-Subspaces" class="headerlink" title="Low Dimensional Trajectory Hypothesis is True:DNNs can be Trained in Tiny Subspaces"></a>Low Dimensional Trajectory Hypothesis is True:DNNs can be Trained in Tiny Subspaces</h2><p><a href="https://www.bilibili.com/video/BV1E5411E71z/?spm_id_from=333.337.search-card.all.click&amp;vd_source=0bb4d13f4bd26eaf7f64c37f29dc9f27">用最直观的方式告诉你：什么是主成分分析PCA_哔哩哔哩_bilibili</a></p><p><img src="/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/test_time_adaptation/Low%20Dimensional%20Trajectory%20Hypothesis%20is%20True/image-20221117201516681.png" alt="image-20221117201516681" style="zoom:33%;"></p><p><a href="https://www.bilibili.com/video/BV16A411T7zX/?spm_id_from=333.788&amp;vd_source=0bb4d13f4bd26eaf7f64c37f29dc9f27">【学长小课堂】什么是奇异值分解SVD—SVD如何分解时空矩阵_哔哩哔哩_bilibili</a></p><p><img src="/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/test_time_adaptation/Low%20Dimensional%20Trajectory%20Hypothesis%20is%20True/image-20221117201821493.png" alt="image-20221117201821493"></p><p><img src="/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/test_time_adaptation/Low%20Dimensional%20Trajectory%20Hypothesis%20is%20True/image-20221117203502974.png" alt="image-20221117203502974" style="zoom:33%;"></p><p><strong>摘要：</strong>深度神经网络（DNN）通常包含大量参数，但存在冗余，因此可以猜测它们可以在低维子空间中训练。在本文中，我们提出了一种基于训练轨迹的低维特性的动态线性降维（DLDR）。简化方法是有效的，并得到了综合实验的支持：在40维空间中优化DNN可以在数千甚至数百万个参数上实现与常规训练相当的性能。由于只有几个变量需要优化，我们开发了一种有效的基于准牛顿的算法，获得了对标记噪声的鲁棒性，并提高了训练有素的模型的性能，三个后续实验，可以显示找到这种低维子空间的优势</p><h3 id="INTRODUCTION"><a href="#INTRODUCTION" class="headerlink" title="INTRODUCTION"></a>INTRODUCTION</h3><p>深度神经网络（DNN）在各个领域取得了前所未有的成功[1]，[2]。在DNN中，参数的数量通常非常大，例如，VGG11[3]中的28.5M，MobileNet[4]中的3.3M，Xception[5]中的21.0M。然而，简单地将DNN的每个参数视为独立变量太粗糙了。事实上，这些参数具有很强的相互关系。例如，梯度从深层传播到浅层，因此不同层之间的参数梯度密切相关。同一层中的参数也具有协同相关性。因此，独立优化变量的数量可能没有我们想象的那么多。换句话说，DNN似乎可以在相对低维的子空间中得到很好的训练，正如[6]首次提出的那样。<br>简而言之，DNN参数在训练中的依赖性和冗余性可以正式描述为以下假设。</p><p><strong>低维轨迹假说</strong><br>对于具有n个参数的神经网络，参数在训练过程中的轨迹可以近似地被具有d维的空间覆盖d≪ n。如果这一假设成立，那么学习在实践和理论方面都会有很大的好处。<br>假说是否成立的最佳标准是在这样的低维空间中的优化是否可以实现与优化原始空间中的所有参数相同或相似的性能。<br>在开创性工作[7]中，作者将SGD训练在全参数上的90%准确度设置为标准，并发现所需的内在维度远小于参数的数量。例如，在CIFAR-10[8]上，具有62006个参数的LeNet[9]可以在2900维子空间中进行优化，获得的精度为常规训练的90%。尽管通过随机投影提取子空间的方法是初步的，但其性能非常有希望。随后，[10]考虑了网络的不同部分，并在每一步重新绘制随机基，进一步将所需维度减少到数百，但精度降级仍然类似。<br>但现有的工作部分不完全支持低维轨迹假设，因为与常规的全参数训练相比仍有很大差距。在本文中，我们建议通过分析动态轨迹来提取子空间，而不是[7]，[10]中的随机投影。通过所提出的方法，许多标准的神经网络结构可以<strong>仅由40个独立变量很好地训练，并且性能几乎与全参数上的常规训练相同</strong>，这表明<strong>DNN可以在低维子空间中训练</strong>，我们确实可以有效地找到这样的子空间。</p><p>为了直观地说明假设和我们的目标，我们可以考虑参数为w∈Rn的DNN f(x，w)。<br>它的训练序列，即训练轨迹，可以表示为{wi}i=0，…，t，其中wi是指训练步骤i的w值。这个假设意味着我们可以找到一个子空间(实际上，它是一个仿射集，但我们稍后将进行集中化；因此，我们在本文中没有严格区分这两个概念)来近似覆盖优化轨迹{wi}i=0，…，t。这种现象与神经切核(NTK)[11]，[12]的低阶性质和顶子空间[6]的集中梯度有关，这将在3.1节中讨论。<br>请注意，提取子空间，即<strong>寻找独立变量（自变量），不同于在模型简化方法中选择参数</strong>，例如参见[13]、[14]。考虑图1中的一个玩具示例，其中包含三个需要优化的变量。如图所示，优化轨迹在e1和e2跨越的子空间中，即优化轨迹的维度为2，但没有单个参数可以减少。这个简单的例子显示了我们的关注点：我们的目标是找到合适的参数组合来构造低维子空间中的自变量。</p><p><img src="/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/test_time_adaptation/Low%20Dimensional%20Trajectory%20Hypothesis%20is%20True/image-20221117210137300.png" alt="image-20221117210137300" style="zoom:33%;"></p><p><em>图1：有三个参数w(1)、w(2)、w(3)需要优化。</em><br><em>但是训练轨迹{wi}i=0，…，t可以在由e1和e2跨越的二维子空间中。如果是这样的话，在低维空间中的训练可以具有与在高维空间中的训练相当的性能。</em></p><p>为了找到覆盖训练轨迹的子空间，人们应该关注训练轨迹。因此，我们将所提出的子空间提取方法命名为动态线性降维(DLDR)。利用DLDR得到的独立变量（自变量），我们可以很好地刻画只有几个基(自变量)的子空间中的训练轨迹。在第五节中，大量的数值实验将表明，许多标准的DNN结构只需40个自变量就可以很好地进行训练。同时，测试精度可以保持与在原始空间中对全参数进行常规训练几乎相同的精度。<br>从理论上讲，即使在训练集不是很大的情况下，将数百万个参数减少到几个自变量就可以解释DNN良好的泛化性能。在实际应用中，由于只需要对几个自变量进行优化，我们可以<strong>使用二阶方法而不是一阶优化方法（?）</strong>，如SGD[15]，以克服一些固有的缺点，如尺度敏感性和收敛速度慢。在现有的工作中，引入了<strong>动量等部分二阶信息</strong>，极大地提高了DNN的性能，导致了目前流行的自适应策略，如Adam[16]，RMSprop[17]等。由于DLDR发现的低维子空间，拟牛顿方法，如DFP和BFGS[18]，[19]，变得适用于DNN的训练。本文提出了一种投影子空间上的BFGS算法，称为P-BFGS算法，<strong>比SGD算法节省了约30%的时间</strong>。<br>低维轨迹假设的另一个后续应用是<strong>提高模型对标签噪声的稳健性</strong>。由于DNN是在过度参数化的制度下工作，它们可以很容易地适应任何标签，甚至是不正确或无意义的标签[20]。因此，当训练标签被噪声破坏时，DNN很容易被破坏。现在，由于我们已经发现了非常低维的子空间，随着训练自由度的显著降低，在这样的子空间中训练DNN有望对标签噪声具有更强的鲁棒性。在5.4节中，我们将发现，在没有任何其他稳健性增强技术的情况下，低维子空间的训练在CIFAR-10上可以达到<strong>50%以上的测试精度，即使90%的训练标签是随机设置的</strong>。<br>本文最重要的贡献是验证了低维轨迹假设，这表明在低维子空间中优化DNN可以在所有参数上获得与训练相似的性能。<br>具体贡献包括：子空间提取方法和提取低维子空间的三个后续优势：</p><p>·动态线性降维技术，以有效地找到低维子空间；</p><p>·通过在低维子空间中使用基于准牛顿的算法来节省训练时间；</p><p>·通过在低维子空间中进行训练来对标签噪声具有鲁棒性；</p><p>·通过子空间训练来提高训练有素的模型的性能。<br>本文的其余部分组织如下。我们首先回顾了第二节中的相关工作。然后在第三节中提出并验证了低维轨迹假设的DLDR算法。在第四节中，我们设计了一个基于DLDR的拟牛顿算法。然后在第五节中我们对降维性能进行了评估。第六节进行了简要的讨论。代码已发布1<a href="https://github.com/nblt/DLDR。">https://github.com/nblt/DLDR。</a></p><h3 id="RELATED-WORKS"><a href="#RELATED-WORKS" class="headerlink" title="RELATED WORKS"></a>RELATED WORKS</h3><p>分析和理解DNN优化目标的前景非常重要。例如，Li等人[21]使用一系列可视化方法可视化DNN的损失情况。他等人[22]观察到，在局部最优点存在许多不对称方向，沿着这些方向，损耗在一侧急剧增加，在另一侧缓慢增加。一个重要方面是衡量DNN景观的内在维度。在开创性工作[7]中，发现使用随机投影，在缩减子空间中的优化可以达到常规SGD训练的90%性能。在此基础上，提出了内在维数远小于参数数量的观点。<br>下面的工作[10]通过考虑网络的不同部分并在每个步骤重新绘制随机基来提高随机基训练性能。<br>与之前的工作不同，我们通过分析DNN的训练动态来提取子空间，然后得到了显著的改进：固有维数降低了一个数量级，并且精度提高到与常规训练几乎相同。<br>验证低维轨迹假设并找到可以很好地训练DNN的微小子空间非常重要，不仅对于理解DNN的学习，而且对于设计强大的优化方法也非常重要。这与[6]中的发现一致，即在短时间的训练之后，DNN的梯度可以收敛到一个非常小的子空间，该子空间由Hessian矩阵的几个顶部特征向量覆盖。在实践中，低维轨迹假设可能会激发更强大的优化方法，并带来更多潜力来克服学习中的一些现有障碍。由于在极小的子空间中，优化变量的数量大大减少，因此可以以相对简单的方式利用高阶信息。在[23]、[24]等中，设计了精细的方法来使用曲率信息，同时保持计算效率，然而，这是一个不相容的矛盾，除非可以有效减少优化变量的数量。另一个密切相关的方向是低级训练[25]，[26]或更新[27]，[28]。例如，LoRA[28]通过学习低秩参数矩阵来更新预训练的模型，提高了微调大型语言模型的效率。虽然这些方法侧重于参数矩阵的静态低秩结构或它们的自适应，但我们利用了训练动力学的低秩特性，并且是这些方法的补充，这可以带来进一步的可能效率</p><h3 id="DYNAMIC-LINEAR-DIMENSIONALITY-REDUCTION"><a href="#DYNAMIC-LINEAR-DIMENSIONALITY-REDUCTION" class="headerlink" title="DYNAMIC LINEAR DIMENSIONALITY REDUCTION"></a>DYNAMIC LINEAR DIMENSIONALITY REDUCTION</h3><h4 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h4><p><strong>本文的主要目标是指出并验证DNN中参数的自由度相当低</strong>。这可以简洁地表示为参数的轨迹在低维空间中的假设。<br>在一项开创性的工作[6]中，作者发现在低维随机选择的空间中进行训练仍然可以产生有意义的神经网络。具体而言，原始空间中的参数w∈ Rn在d维空间v∈ Rd中更新:</p><p><img src="/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/test_time_adaptation/Low%20Dimensional%20Trajectory%20Hypothesis%20is%20True/image-20221118101647594.png" alt="image-20221118101647594" style="zoom:35%;"></p><p>其中P∈ Rn×d是一个随机逆投影矩阵。很明显，（1）中只有d个自由度。如[23]中的数值验证，即使在d≪ n、 （1）可以输出有意义的结果。这里，我们说“有意义”是指<strong>性能比初始化好得多，但比完全训练后的网络效果更差。</strong>[10]中通过用启发式方法替换随机投影，提高了性能。在这些低维空间中的训练性能可以在表1中观察到，表1部分但不完全支持DNN可以在低维空间训练的假设。<br>为了研究训练轨迹和低维景观，我们可以使用神经切线核（NTK），它理想地将单输出神经网络的梯度流公式化如下</p><p><img src="/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/test_time_adaptation/Low%20Dimensional%20Trajectory%20Hypothesis%20is%20True/image-20221118102107485.png" alt="image-20221118102107485" style="zoom:33%;"></p><p>（公式看不懂。。。先跳过）</p><p>基于上述有趣的观察，我们正式提出了第1节中给出的<strong>低维轨迹假设说</strong>。数学上，对于参数的轨迹w0，w1，…，wt，…，低维轨迹假说声称存在低维轨迹v1，v2，…，vt，…和投影P∈ Rn×d使得</p><p><img src="/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/test_time_adaptation/Low%20Dimensional%20Trajectory%20Hypothesis%20is%20True/image-20221118102632722.png" alt="image-20221118102632722" style="zoom:33%;"></p><p>该假设侧重于神经网络的训练，其验证是直接的，即，<strong>如果神经网络可以在d维空间中很好地训练，那么低维轨迹假设是正确的。</strong></p><p>如前所述，现有的工作现在只能部分验证该假设，因为在他们提取的子空间上进行训练，神经网络可以被训练为有意义的解决方案，但结果仍然比在整个参数空间上的训练差得多。在下文中，我们将提出一种新的方法来找到神经网络可以很好地训练的低维空间。<br>该结果验证了低维轨迹假设，有望为神经网络带来新的理解，例如泛化能力、隐式正则化、高效学习算法等。</p><h4 id="Methodology"><a href="#Methodology" class="headerlink" title="Methodology"></a>Methodology</h4><p>降维的关键问题是找到近似覆盖参数轨迹的低维子空间。<strong>代替处理连续轨迹，我们实际上使用其离散化，即离散采样点来表征轨迹</strong>。基本操作包括:</p><ul><li>首先，对训练过程中神经网络参数的t步进行采样，即{w1，w2，.。。。，wt}。</li><li>第二，中心化样本，即求样本集参数的均值，并且每个参数减去均值得到W</li><li>第三，找出由d维子空间P=[e1，e2，.。。。，ed]来涵盖W.请注意，在DNN中，参数n的数目通常显著大于t和d。</li></ul><p>第三步是找到一个子空间，该子空间最小化从W的列向量到该子空间的距离之和。利用l2范数，可以将其公式化为最大化W的投影方差，即。</p><p><img src="/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/test_time_adaptation/Low%20Dimensional%20Trajectory%20Hypothesis%20is%20True/image-20221118112111041.png" alt="image-20221118112111041" style="zoom:33%;"></p><p>这是一个标准的PCA问题，但计算维度太大，可以使用SVD分解来减少计算量：</p><p><img src="/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/test_time_adaptation/Low%20Dimensional%20Trajectory%20Hypothesis%20is%20True/image-20221118112323474.png" alt="image-20221118112323474" style="zoom:33%;"></p><p>DLDR算法总流程：</p><p><img src="/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/test_time_adaptation/Low%20Dimensional%20Trajectory%20Hypothesis%20is%20True/image-20221118112351688.png" alt="image-20221118112351688" style="zoom:33%;"></p><h4 id="Training-Performance"><a href="#Training-Performance" class="headerlink" title="Training Performance"></a>Training Performance</h4><p>基于优化轨迹近似位于低维子空间的假设，所提出的DLDR可以将优化空间的维数从n降到d。为了验证该假设，我们在这样的低维子空间中优化DNN，检查其性能是否与原始空间中所有参数的训练相似。<br>首先，我们为CIFAR-10进行了训练ResNet8[31]的实验，这也是开创性工作[10]所考虑的。如上所述，验证低维轨迹假设的标准是比较子空间和全参数空间中的训练性能，为此，我们使用SGD训练ResNet8的78330个参数。详细设置为：学习率为0.1，批量大小为128。请注意，在本文的实验中，SGD始终包含动量项，此处动量参数为0.9。经过3次试验，SGD平均获得83.84%的测试精度。<br>然后，我们应用DLDR从参数中提取低维子空间，方法是在SGD训练的30个时期内对轨迹进行采样。详细的采样策略是在每个历元训练之后对模型参数进行采样。在图2a中，绘制了前5个预测成分的方差比，显示总方差的90%以上属于这五个成分。这一观察结果与我们关于存在这样一个低维子空间的假设一致，该子空间可以近似覆盖优化轨迹。</p><p>接下来，<strong>在DLDR提取的子空间中，我们从头开始训练神经网络</strong>。我们在这里设置的维度是15，我们在<strong>投影子空间中使用SGD优化器，称为P-SGD</strong>。为了避免公平性的其他影响，我们使用与常规SGD相同的超参数设置，并从相同的初始化开始。从图2b中可以看出，当DLDR采样停止时，P-SGD很快就超过了性能（因此P-SGD的良好性能不是来自DLDR采样阶段给出的可通过的解决方案），并达到了与常规SGD相似甚至更好的精度。这里，与SGD相比的优势可能来自低维子空间的去噪（方差降低）效果，并且可以进一步研究。然而，至少，它表明我们可以在具有<strong>显著较低维度（即15）</strong>的子空间中有效地训练CIFAR-10的ResNet8，这有力地支持了我们的假设，即优化轨迹可以近似地位于低维子空间中。<br>在表1中，我们报告了用于优化的维度和测试精度。在[7]中，7982个维度被用于实现平均58.35%的准确度，在[10]中提高到70.26。现在，DLDR可以找到一个维数更少的子空间，并获得更好的精度。在第5节中，我们将考虑更复杂的DNN架构和更复杂的任务，以进一步验证低维轨迹假设。</p><p><img src="/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/test_time_adaptation/Low%20Dimensional%20Trajectory%20Hypothesis%20is%20True/image-20221118135412861.png" alt="image-20221118135412861" style="zoom:33%;"></p><h3 id="DLDR-BASED-QUASI-NEWTON-ALGORITHM"><a href="#DLDR-BASED-QUASI-NEWTON-ALGORITHM" class="headerlink" title="DLDR-BASED QUASI-NEWTON ALGORITHM"></a>DLDR-BASED QUASI-NEWTON ALGORITHM</h3><p>由于DNN通常有大量的参数需要优化，<strong>一阶方法，即基于梯度下降的方法</strong>是主要的方法。然而，一阶方法存在一些基本的局限性，例如围绕<strong>最优点的收敛速度慢，以及对学习速率的高度敏感性</strong>。二阶方法可以解决对于这些问题，但由于计算量大，应用它们来训练包含大量参数的DNN存在很大困难。取而代之的是，只使用部分二阶信息，如动量和累积信息，从而产生了许多流行的训练算法，如Adam[16]、RMSprop[17]和AdaGrad[32]，[33]。现在，使用所提出的DLDR，可以只找到几个（几十个）独立变量进行优化，这使得在训练复杂DNN时使用二阶方法变得适用。遵循这一思想，我们基于BFGS的框架开发了一种拟牛顿方法[18]，[19]。类似地，主要步骤包括基于历史梯度的黑森矩阵近似、拟牛顿更新和回溯线搜索，其详细信息在以下小节中给出。</p><h4 id="Hessian-Matrix-Approximation"><a href="#Hessian-Matrix-Approximation" class="headerlink" title="Hessian Matrix Approximation"></a>Hessian Matrix Approximation</h4><p>（可见slam十四讲p127）</p><p><img src="/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/test_time_adaptation/Low%20Dimensional%20Trajectory%20Hypothesis%20is%20True/image-20221118141342146.png" alt="image-20221118141342146" style="zoom:33%;"></p><ol><li>将参数的梯度投影到自变量空间；</li><li>在自变量空间中计算牛顿方向；</li><li>在训练过程中保持投影矩阵不变，将牛顿方向反投影到原始参数空间。</li></ol><h4 id="Quasi-Newton-Update"><a href="#Quasi-Newton-Update" class="headerlink" title="Quasi-Newton Update"></a>Quasi-Newton Update</h4><p>虽然我们能找到只有几个独立变量来优化，但它们的梯度是通过在当前DNN框架中投影原始参数的梯度来计算的。因此，直接计算二阶梯度仍然不切实际。或者，我们采用拟牛顿方法来逼近Hessian矩阵及其逆矩阵。以这种方式，标准BFGS算法[18]，[19]与秩2校正更新一起使用，如下所示</p><p>（没看懂）</p><h3 id="NUMERICAL-EXPERIMENTS"><a href="#NUMERICAL-EXPERIMENTS" class="headerlink" title="NUMERICAL EXPERIMENTS"></a>NUMERICAL EXPERIMENTS</h3><p>在介绍了实验设置之后，我们将在本节中对以下方面进行数值评估。（1） 我们应用P-SGD来训练子空间中的DNN，其中<strong>维数固定为40</strong>，由DLDR提取，以验证不同神经网络架构上的低维轨迹假设。（2） 我们评估了所提出的P-BFGS算法的性能，并显示了其在加速训练方面的潜力。（3） 我们用标签噪声进行了实验，以证明从子空间训练中获得的<strong>固有鲁棒性</strong>。（4） 我们在<strong>训练有素的网络上应用DLDR</strong>，以进一步提高其性能</p><h4 id="Experiments-Setup"><a href="#Experiments-Setup" class="headerlink" title="Experiments Setup"></a>Experiments Setup</h4><p>我们实验中使用的数据集包括CIFAR-10、CIFAR-100[8]和ImageNet[41]。对于CIFAR，所有图像均通过通道平均值和方差进行归一化。数据增强[31]也被执行：概率为0.5的水平图像翻转、4像素填充和裁剪。<br>我们测试了ResNet20和ResNet32[31]以及其他11种DNN架构。这些网络中全参数的数量从0.27M到28.5M，但本文中我们始终只选择40个自变量。我们使用SGD优化器来训练DNN，其中权重衰减设置为1e-4，动量参数设置为0.9，批量大小设置为128。默认的初始学习率设置为0.1。对于CIFAR-10，我们训练DNN 150个时期，并在100个时期将学习率除以10，而对于CIFAR-100，我们训练200个时期，在150个时期进行除法。对于ImageNet，我们的代码是从官方PyTorch示例2修改而来的。实验是在Nvidia Geforce GTX 2080 TI上进行的。<br>我们为CIFAR使用一个GPU，为ImageNet使用四个GPU。5个独立试验的平均值和标准差。DLDR和实验设置的更详细分析见附录。<br>DLDR需要对优化轨迹进行采样。<strong>对于CIFAR，我们采用最简单的采样策略：在每个训练周期之后对模型参数进行采样。对于ImageNet，参数在每个训练时期被均匀采样3次。更精细的采样策略可以提高性能。</strong><br>对于P-SGD，我们采用与SGD相同的批量大小和动量因子。我们将初始学习率设置为1，训练时期设置为40，并在30个时期将学习率除以10。对于P-BFGS，我们将CIFAR的批大小设置为1024，ImageNet的批大小为256。请注意，这种二阶方法不需要学习速率表。</p><h4 id="Verification-on-Various-Architectures"><a href="#Verification-on-Various-Architectures" class="headerlink" title="Verification on Various Architectures"></a>Verification on Various Architectures</h4><p>在第3.3小节中，在CIFAR10上进行了实验，在此我们验证了CIFAR-100上的低维轨迹假设。我们将分别在所有参数和缩减子空间（后者实际上是建议的P-SGD）中通过SGD训练DNN。对于不同的神经网络架构，我们总是选择40个独立变量。如果SGD和P-SGD给出了可比的性能，则支持我们的假设，同时验证了所提出的DLDR的有效性。该实验包含11个流行的DNN，包括VGG11[3]、DenseNet121[42]、Inception[43]、NasNet[44]等，参数数量从780K到28.5M不等。<br>在表2中，我们使用具有50/100/200个时期的SGD报告了测试精度，200个时期后的测试精度作为基线。然后，我们在40D子空间中应用P-SGD，DLDR从50或100个时期采样中提取这些子空间，并从初始化中进行40个时期的训练。</p><p><img src="/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/test_time_adaptation/Low%20Dimensional%20Trajectory%20Hypothesis%20is%20True/image-20221118144500074.png" alt="image-20221118144500074" style="zoom:33%;"></p><p>见表2中最后一列的结果。它清楚地表明，具有40个自变量的P-SGD可以在整个参数上达到SGD的竞争性能。<br>这种竞争性能适用于所有这些架构，并有力地支持我们的低维轨迹假设。<br>一个次要的发现是，一般来说，如果更好地提取子空间，性能会更好</p><p><strong>Performance of P-BFGS Algorithm</strong></p><p>在实证证明了低维轨迹假设之后，我们现在尝试一种二阶算法，即P-BFGS。我们首先考虑CIFAR-10上的ResNet20[31]。在图3a中，绘制了SGD的训练和测试精度曲线。灰色区域表示我们从何处获取DLDR样本，然后提取自变量。在获得40个自变量后，我们使用P-BFGS从相同的初始化开始，并绘制图3b中的训练曲线。仅<strong>在2个时期后</strong>，P-BFGS就比SGD（50个时期，即DLDR的采样）获得了更好的性能，并且在10个时期内，P-BFG达到了SGD（150个时期）的性能，这初步证明了应用二阶方法在效率上的优势</p><p><img src="/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/test_time_adaptation/Low%20Dimensional%20Trajectory%20Hypothesis%20is%20True/image-20221118144822572.png" alt="image-20221118144822572" style="zoom:50%;"></p><p><img src="/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/test_time_adaptation/Low%20Dimensional%20Trajectory%20Hypothesis%20is%20True/image-20221118145401179.png" alt="image-20221118145401179" style="zoom:33%;"></p><p><img src="/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/test_time_adaptation/Low%20Dimensional%20Trajectory%20Hypothesis%20is%20True/image-20221118145518248.png" alt="image-20221118145518248" style="zoom:33%;"></p><h4 id="Robustness-to-Label-Noise"><a href="#Robustness-to-Label-Noise" class="headerlink" title="Robustness to Label Noise"></a>Robustness to Label Noise</h4><p>（这里没有说子空间是从哪里得到的，从带噪数据训练的参数中得到还是<strong>干净数据</strong>？）</p><p>由于DNN的插值本质，它们对标签噪声敏感，即当标签不正确时，DNN将跟随这些不正确且无意义的标签。更糟糕的是，区分DNN学习的标签是正确的还是错误的，没有明显的区别[20]。目前，可以使用提前停止[50]（<strong>即防止过拟合</strong>），但如何选择最佳停止仍然具有挑战性，因为即使验证数据也可能损坏。在验证了DNN可以在低维子空间中训练之后，我们期望<strong>低维属性可以自然地为DNN带来对标签噪声的鲁棒性。</strong><br>为了检查<strong>标签噪声</strong>下的性能，我们考虑CIFAR-10，并将随机标签分配给训练数据的一部分c（针对不同的方法随机选择并固定）。然后，我们用损坏的数据训练ResNet20模型。有了标签噪声，SGD的完整训练性能显著下降，如图5中的蓝色曲线所示。提前停止（红色曲线）确实有帮助，但对干净数据的测试精度较差（c=0）。<br>在低维子空间（绿色曲线）中的训练可以以较大的优势持续优于早期停止，同时在干净数据上保持与常规训练相同的性能。注意，这里我们在没有任何增强技术的情况下获得了鲁棒性，例如，对损失函数的修改[51]，[52]，因此结果有望通过这些技术进一步改进。</p><p><img src="/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/test_time_adaptation/Low%20Dimensional%20Trajectory%20Hypothesis%20is%20True/image-20221118145913877.png" alt="image-20221118145913877" style="zoom:40%;"></p><p>P-SGD对标签噪声的鲁棒性来自于训练子空间的低维特性，或者换句话说，<strong>训练的自由度非常小</strong>。为了进一步研究自变量数量的影响，我们将d从10变化到40，并在表4中报告了测试精度。在不同的标签噪声水平下，完全训练的PSGD（即，我们不选择提前停止）总是比完全训练的SGD具有更好的精度。<br>我们还提供SGD获得的最佳精度，即，我们在训练期间监控测试精度，并选择出现的最佳测试精度。当然，在实践中无法达到SGD（最佳），但它可以作为一个参考，表明在低维子空间中训练DNN对标记噪声是鲁棒的。</p><p><img src="/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/test_time_adaptation/Low%20Dimensional%20Trajectory%20Hypothesis%20is%20True/image-20221118150612211.png" alt="image-20221118150612211" style="zoom:40%;"></p><h4 id="Improving-Well-trained-Models"><a href="#Improving-Well-trained-Models" class="headerlink" title="Improving Well-trained Models"></a>Improving Well-trained Models</h4><p>在本小节中，我们研究了从井训练阶段提取的子空间。我们从在ImageNet上训练有素的ResNet18\/50开始[41]（来自torchvision.models）。<br>在表5中，他们的准确度显示为“训练有素”。这里，“训练有素”意味着继续进行最初的SGD培训无法提高绩效。现在我们提取具有30维的子空间（以0.005的学习率从SGD的5/10/15个时期采样），并应用P-BFGS。在这一阶段，解决方案接近最佳状态，前景更加平坦。因此，采样时间和维度可能比以前的实验少。由于在训练阶段获得了几个解决方案，<strong>随机加权平均</strong>（SWA，[53]）是一种有效且普遍采用的泛化改进方法，是适用的，我们将其性能作为比较。可以观察到，经过训练的模型可以通过子空间优化进一步改进，性能优于SWA</p><p><img src="/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/test_time_adaptation/Low%20Dimensional%20Trajectory%20Hypothesis%20is%20True/image-20221118150810037.png" alt="image-20221118150810037" style="zoom:33%;"></p><h4 id="CONCLUSIONS-AND-FURTHER-WORKS"><a href="#CONCLUSIONS-AND-FURTHER-WORKS" class="headerlink" title="CONCLUSIONS AND FURTHER WORKS"></a>CONCLUSIONS AND FURTHER WORKS</h4><p>本文的主要主张是低维轨迹假设。基于训练动力学，我们设计了一种高效的降维方法DLDR。在综合实验中，优化DLDR提取的几个（例如，几十个）独立变量可以获得与全参数常规训练类似的性能。<br>优化性能和降维都从先前的工作中得到了显著改善[7]，[10]，有力地支持了这一假设，并表明DNN可以在很小的子空间中得到很好的训练。<br>从DNN训练的新视角出发，我们尝试了三种后续应用，以进一步支持我们的假设，并获得了巨大的好处：1）随着维数的大幅减少，二阶方法变得适用，从中我们设计了P-BFGS算法，并为训练带来了极大的效率；2） 在低维子空间中的训练自然会给标签噪声带来鲁棒性；3） 我们还表明，子空间训练可以显著提高训练有素的模型的性能。这些应用进一步支持低维轨迹假设。<br>尽管它们非常简单，例如，使用原始的BFGS框架，没有任何增强技术，但它们的性能意味着找到这样的低维子空间可以有助于理论和实践学习。进一步工作的可能方向包括<strong>将子空间训练应用于微调任务</strong>[27]，[28]，结合其他低秩训练方法[25]，[26]，以了解过度拟合、过度参数化[54]，并研究少数镜头学习[55]、元学习[56]等。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><a href="https://blog.csdn.net/anshuai_aw1/article/details/82498374?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-82498374-blog-119275175.pc_relevant_3mothn_strategy_recovery&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-82498374-blog-119275175.pc_relevant_3mothn_strategy_recovery&amp;utm_relevant_index=1">https://blog.csdn.net/anshuai_aw1/article/details/82498374?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-82498374-blog-119275175.pc_relevant_3mothn_strategy_recovery&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-82498374-blog-119275175.pc_relevant_3mothn_strategy_recovery&amp;utm_relevant_index=1</a></p><p><img src="/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/test_time_adaptation/Low%20Dimensional%20Trajectory%20Hypothesis%20is%20True/image-20221125171645874.png" alt="image-20221125171645874"></p>]]></content>
    
    
    <summary type="html">Low Dimensional Trajectory Hypothesis is True:DNNs can be Trained in Tiny Subspaces
用最直观的方式告诉你：什么是主成分分析PCA_哔哩哔哩_bilibili



【学长小课堂】什么是奇异值分解SVD—SVD如何分解时空矩阵_哔哩哔哩_bilibili





摘要：深度神经网络（DNN）通常包含大量参数，但存在冗余，因此可以猜测它们可以在低维子空间中训练。在本文中，我们提出了一种基于训练轨迹的低维特性的动态线性降维（DLDR）。简化方法是有效的，并得到了综合实验的支持：在40维空间中优化DNN可以在数千甚至</summary>
    
    
    
    <category term="计算机视觉" scheme="https://youngyyp.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    
    <category term="test time adaptation" scheme="https://youngyyp.github.io/tags/test-time-adaptation/"/>
    
  </entry>
  
  <entry>
    <title>TTA开题</title>
    <link href="https://youngyyp.github.io/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/test_time_adaptation/%E5%BC%80%E9%A2%98/"/>
    <id>https://youngyyp.github.io/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/test_time_adaptation/%E5%BC%80%E9%A2%98/</id>
    <published>2022-11-07T01:49:41.000Z</published>
    <updated>2023-03-11T06:17:09.984Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目：在线自适应学习算法研究"><a href="#题目：在线自适应学习算法研究" class="headerlink" title="题目：在线自适应学习算法研究"></a>题目：<strong>在线自适应学习算法研究</strong></h2><h3 id="研究背景"><a href="#研究背景" class="headerlink" title="研究背景"></a>研究背景</h3><p>DA:<a href="https://blog.csdn.net/weixin_42990464/article/details/117149006">(59条消息) 域适应（domain adaptation）_点PY的博客-CSDN博客_domain adaptation</a></p><p><a href="https://fancp.blog.csdn.net/article/details/80956828?spm=1001.2101.3001.6650.10&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-10-80956828-blog-117149006.pc_relevant_3mothn_strategy_and_data_recovery&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-10-80956828-blog-117149006.pc_relevant_3mothn_strategy_and_data_recovery&amp;utm_relevant_index=16">(59条消息) 迁移学习——Domain Adaptation<em>Peanut</em>范的博客-CSDN博客_domain adaptation</a></p><p>随着深度学习的不断发展，深度神经网络在各种应用中表现出良好的性能，特别是当测试样本来自与训练数据相同的分布时，网络预测的准确率可以达到非常高。然而，深度神经网络对于来自不同域数据的概括能力是有限的。当训练（源域）数据与测试（目标域）数据的分布不同时，模型预测的准确率会受到影响，这种情况被称为数据集偏移。例如场景的明暗变化、天气环境的变化以及传感器的退化。正因为存在数据集的偏移，模型在测试过程中可能对训练过程没有见过的未知变化敏感，当源域与目标域的差异过大时，会造成性能的急剧下降，在一些现实场景中，这样的性能下降可能会导致模型无法使用。</p><p>在真实场景下的数据分布通常是与训练集的数据分布不同的，为了能在不同的数据分布上部署模型，我们需要模型能够对目标域进行自适应的学习。</p><p>在深度学习领域中，可将深度学习算法分为在线学习和离线学习。离线学习也通常称为批学习，是指所有的源数据以批量的形式输入到网络中进行训练，然后将训练所得的模型用于预测任务中。一旦我们要对模型进行更改，只能通过再训练的方式，这将导致效率低下的问题。</p><p>离线学习的缺点总结如下：</p><p>\1.    模型训练过程低效</p><p>\2.    训练过程不易拓展于大数据场景。</p><p>\3.    模型无法适应动态变化的环境</p><p>在线学习也称为增量学习或适应性学习，是指在一定顺序下接收数据，每接收一个数据，模型会对它进行预测并对当前模型进行更新，然后处理下一个数据。离线学习通常假设训练数据和测试数据是独立同分布的，但是在在线学习的设置中，对训练数据的假设是宽松或几乎没有的。</p><p>在线学习的特点总结如下：</p><p>\1.   无需源域数据</p><p>\2.   无需目标域标签</p><p>\3.   无需改变原训练流程</p><p>\4.   无需批处理</p><p>随着最近深度神经网络模型的参数量呈指数不断上升，网络的训练成本也急剧增加，普通的用户难以承担如此高额的训练成本。同时，由于数据安全性问题，模型可能在没有源数据的情况下分发，而且在测试期间重新去处理源数据会导致效率十分低下。这意味着在测试阶段，模型必须仅根据其参数和目标域数据在线地对网络进行更新，也就是说，我们需要研究基于目标域自适应的在线学习以解决离线学习的缺点，扩大模型的适用场景，提升模型对动态变化环境的适应能力。</p><h3 id="研究现状"><a href="#研究现状" class="headerlink" title="研究现状"></a>研究现状</h3><h4 id="fine-tuning"><a href="#fine-tuning" class="headerlink" title="fine-tuning"></a>fine-tuning</h4><h4 id="DA"><a href="#DA" class="headerlink" title="DA"></a>DA</h4><p>深度学习是机器学习的一个子领域，旨在通过分层架构发现输入数据的多个层次的分布式表示[73]。在过去几年中，基于深度学习的方法出现了爆炸式增长，其中深度学习极大地改进了各种机器学习问题和应用的最先进方法[123]。特别是，深度学习已经将传统的信号处理方法转变为以端到端的方式同时学习特征和预测模型[7]。尽管有监督的深度学习是各种任务中最普遍和最成功的方法，但其成功取决于（i）大量标记的训练数据和（ii）独立且相同分布（i.i.d.）的训练和测试数据集的假设[99]。由于对各种应用领域的海量数据集进行可靠标记通常是昂贵且令人望而却步的，因此对于目标领域中没有足够标记数据集的任务，强烈需要通过利用源领域的丰富标记数据来应用经训练的模型[286]。然而，这种学习策略受到数据分布变化的影响，即源域和目标域之间的域变化[302]。因此，当遇到分布外（OOD）数据时，即源分布与目标分布不同时，训练模型的性能可能会严重下降[25]。<br>例如，无法保证应用于目标域中不同于源域中人群的疾病诊断系统的性能。</p><p>为了解决这一问题，提出了无监督域自适应（UDA）作为一种可行的解决方案，将从标记的源域学习到的知识迁移到不可见、异构和未标记的目标域[155167]，如图1所示。UDA旨在减轻源域和目标域之间的域转移[118]。UDA的解决方案主要分为统计矩匹配（例如，最大平均差异（MMD）[174]）、领域风格转移[234]、自我训练[148165321]和特征级对抗性学习[66，81，82，171]</p><p>域自适应可以被视为转移学习的一种特殊情况，假设标记数据仅在源域中可用[204]。</p><p>本文旨在从理论和实践的角度为UDA提供广泛的模型和算法。本综述还涉及新兴方法，特别是最近开发的方法，提供了不同技术的彻底比较，并讨论了独特组件和方法与无监督深度域自适应的联系。UDA，特别是基于深度学习的UDA，在一般转移学习审查中的覆盖面有限。许多先前的领域适应审查没有纳入深度学习方法；然而，基于深度学习的方法已经成为UDA的主流。此外，一些综述没有深入触及域映射[49，118，119]、基于归一化统计[49，119，315，316]、基于集成[49，119270，316]或基于自训练的方法[275]。此外，其中一些只关注有限的应用领域，如视觉数据分析[49202270]或自然语言处理（NLP）[215]。在这篇综述中，我们对这一前景广阔的技术在广泛的应用领域提供了全面的看法，包括自然图像处理、视频分析、NLP、时间序列数据分析、医学图像分析以及气候和地球科学。表1总结了其他审查文件所涉及的主题。</p><p>泛化是观察有限数量的样本并对所有可能的样本进行陈述的过程。在机器学习和模式识别的情况下，样本被用来训练分类器，以对未来的样本进行预测。然而，如果观察到的标记样本不是学习者应该操作的潜在分布的准确反映，系统将不能很好地推广到新样本。在实践中，收集的数据几乎从来不是操作环境的完全公正的表示。<br>如果系统地观察到某些结果比均匀随机抽样程序更频繁，则数据是有偏差的。例如，由于当地患者群体的生活条件不同，从一家医院采样的数据可能会相对于全球人群产生偏差。长期以来，统计学家一直在研究样本选择偏差[1]、[2]术语下的抽样偏差。<br>修正的基础是估计—或者在有实验设计控制的情况下，知道—选择一个实例进行观察的概率[3]、[4]、[5]。但许多现代数据收集程序，如互联网爬虫，比起从医院患者身上采样，结构化程度较低。因此，即使不是不可能，也很难估计样本被选择进行观察的概率，进而估计有偏差的样本与一般总体的不同之处。另一方面，可能没有必要将其推广到所有人口。更重要的可能是将其推广到特定的目标人群。例如，在欧洲医院收集的数据能否用于培训非洲医院的智能预测系统？</p><p>为了针对样本空间（以下称为域）上的特定分布，我们至少需要一些信息。通常可以收集来自目标域的未标记数据，但标签更难获得。<br>然而，未标记的数据提供了源域和目标域彼此不同的方式。该信息可用于使分类器适应，即改变其决策，使其更好地向目标领域推广。<br>要问的重要问题是：分类器如何从源域学习并推广到目标域？我们将方法分类为三个部分，每个部分都包含更精细的子分类。<br>首先，有基于样本的方法，其基于通过单个样本纠正数据采样过程中的偏差。此类别中的方法侧重于数据重要性加权[6]、[7]或类重要性加权[8]。其次，有一些基于特征的方法，它们专注于重塑特征空间，以便在转换的源数据上训练的分类器将推广到目标数据。<br>进一步的区别可以在寻找子空间映射[9]、[10]、最优运输技术[11]、学习域不变表示[12]或构造相应的特征[13]中进行。第三，我们考虑我们所称的基于推理的方法。这些方法侧重于将自适应纳入参数估计过程。它是一个多样化的类别，包含算法鲁棒性[14]、极小极大估计量[15]、自学习[16]、经验贝叶斯[17]和PAC贝叶斯[18]。显然，上述分类不一定相互排斥，但我们认为它提供了一个可理解的概述。<br>我们的分类揭示了允许域自适应分类器的性能保证的少量条件。在实践中，我们必须假设一个条件成立，这意味着对于任何自适应分类器，都存在一个问题设置，该设置失败。我们讨论了假设检验和因果信息对领域自适应分类器选择的重要性。</p><p>在机器学习和模式识别中，样本被用来训练分类器，以对未来的样本进行预测。然而，如果训练标记样本的分布和测试样本有较大差异，系统将不能很好地推广到新的测试样本。然而实际上，训练数据几乎从来都不能完全涵盖所有的测试场景以及相应的分布。</p><p>为了针对目标域上的特定分布，我们至少需要收集一些信息，通常可以收集来自目标域的未标记数据，但标签更难获得。</p><p>然而，未标记的数据提供了源域和目标域彼此不同的方式。该信息可用于使分类器适应，即改变其决策，使其更好地向目标领域推广。</p><p>要问的重要问题是：分类器如何从源域学习并推广到目标域？我们将方法分类为三个部分，每个部分都包含更精细的子分类。</p><p>首先，有基于样本的方法，其基于通过单个样本纠正数据采样过程中的偏差。此类别中的方法侧重于数据重要性加权[6]、[7]或类重要性加权[8]。其次，有一些基于特征的方法，它们专注于重塑特征空间，以便在转换的源数据上训练的分类器将推广到目标数据。</p><p>进一步的区别可以在寻找子空间映射[9]、[10]、最优运输技术[11]、学习域不变表示[12]或构造相应的特征[13]中进行。第三，我们考虑我们所称的基于推理的方法。这些方法侧重于将自适应纳入参数估计过程。它是一个多样化的类别，包含算法鲁棒性[14]、极小极大估计量[15]、自学习[16]、经验贝叶斯[17]和PAC贝叶斯[18]。显然，上述分类不一定相互排斥，但我们认为它提供了一个可理解的概述。</p><p>我们的分类揭示了允许域自适应分类器的性能保证的少量条件。在实践中，我们必须假设一个条件成立，这意味着对于任何自适应分类器，都存在一个问题设置，该设置失败。我们讨论了假设检验和因果信息对领域自适应分类器选择的重要性。</p><p>近年来提出了许多方法来解决视域自适应问题，该问题也通常被框架为视觉数据集偏差问题[31]。所有人都认识到，源数据表示和目标数据表示的分布发生了变化。事实上，域移动的大小通常由源和目标子空间表示[5，11，21，25，27]之间的距离来衡量。大量方法试图通过学习特征空间变换来对齐源和目标表示[28，23，11，15]来克服这种差异。对于有监督的自适应场景，当目标域中有有限数量的标记数据可用时，已经提出了一些方法来学习对源分类器进行正则化的目标分类器[32，2，1]。其他人试图同时学习特征变换和正则化目标分类器[18，10]。<br>最近，基于有监督的CNN的特征表示被证明对于各种视觉识别任务非常有效[22，9，14，29]。特别是，使用深度表示显著减少了分辨率和光照对域移位的影响[9，19]。并行CNN结构，如暹罗网络，已被证明是学习不变表示的有效方法[6，8]。<br>然而，训练这些网络需要每个训练实例的标签，因此不清楚如何将这些方法扩展到非监督或半监督设置。还探索了多模式深度学习体系结构，以学习不同输入模式不变的表示[26]。然而，这种方法主要是在生成性的背景下运作的，因此没有充分利用监督的CNN陈述的代表性力量。<br>训练源和目标CNN的联合架构是由[7]提出的，但限于两层，因此显著优于使用更深架构的方法[22]，在大型辅助数据源(例如：ImageNet[4])上进行预训练。[13]提出先用去噪自动编码器进行预训练，然后同时训练一个两层网络，同时进行MMD域混淆损失。<br>这有效地学习了领域不变表示，但同样，因为学习的网络相对较浅，它缺乏通过使用受监督的深度CNN直接优化分类目标而学习的强语义表示。<br>在模型压缩或蒸馏的背景下，在训练期间使用分类器输出分布而不是类别标签已被探索[3，16]。然而，我们是第一个在域自适应设置中应用这一技术的，以便在域之间转移类别相关性。<br>其他工作同时探索了直接优化区域不变性表示的想法[12，24]。然而，它们要么使用较弱的域不变性度量，要么使用比我们提出的方法健壮性较差的优化方法，并且它们不试图解决半监督环境下的任务转移问题。</p><h4 id="TTT"><a href="#TTT" class="headerlink" title="TTT"></a>TTT</h4><p>在分布变化的情况下，监督学习在泛化方面仍然是出了名的薄弱环节。除非训练和测试数据来自相同的分布，否则即使看似微小的差异也会击败最先进的模型（Recht等人，2018）。对抗鲁棒性和领域适应性只是一些现有的范例，它们试图通过拓扑结构或训练期间可用的测试分布数据来预测训练和测试分布之间的差异。我们探索了一种新的概括方法，它不预测分布变化，而是在测试时从中学习。<br>我们从一个简单的观察开始。测试时呈现的未标记测试样本x为我们提供了关于其绘制分布的提示。我们建议通过允许模型参数取决于测试样本x，而不是其未知标签y，利用测试分布的这一提示。可变决策边界（x）的概念在理论上是强大的，因为它脱离了固定模型容量的限制（见第A1节中的附加讨论），但是从x到（x）的反馈机制的设计在实践中提出了新的挑战，我们在这里才开始讨论。<br>我们提出的测试时间训练方法基于该单个测试样本x创建了一个自监督学习问题，在进行预测之前在测试时间进行更新。自我监督学习使用一个辅助任务，该任务从未标记的输入中自动创建标签。在我们的实验中，我们使用将每个输入图像旋转90度的倍数并预测其角度的任务（Gidaris等人，2018）。<br>这种方法也可以很容易地修改为在标准监督学习环境之外工作。如果一批中有几个测试样本，我们可以使用整个批次进行测试时间培训。如果样本到达在线流，我们通过保持参数的状态来获得进一步的改进。毕竟，预测很少是单一事件。在线版本可以是自然的部署模式，前提是测试样本是由相同或平稳变化的分布变化产生的。<br>我们在多个标准基准上的对象识别环境中对我们的方法进行了实验验证。其中包括具有不同级别的不同类型腐败的图像（Hendrycks&amp;Dieterich，2019）、移动对象的视频帧（Shankar等人，2019），以及由收集的一组未知位移的新测试集（Recht等人，2018）。我们的算法在分布变化的情况下进行了实质性改进，同时保持了与原始分布相同的性能。<br>在我们的实验中，我们与一个强大的基线（标记为联合训练）进行了比较，该基线在训练时使用监督和自我监督学习，但在测试时保持模型不变。最近的研究表明，训练时间自我监督提高了鲁棒性（Hendrycks等人，2019a）；我们的联合训练基线对应于这项工作的改进实施。第5节对相关工作进行了全面审查。<br>我们用第4节中的理论研究补充了实证结果，并在测试时间训练有帮助的凸模型上建立了直观的充分条件；粗略地说，这个条件是两个任务的损失函数之间具有相关的梯度。</p><h4 id="TTA："><a href="#TTA：" class="headerlink" title="TTA："></a>TTA：</h4><p>测试时间适应（TTA）测试时间适应方法在部署期间利用当前可用的测试数据来适应预先训练的模型。由于测试样本还提供了分布变化的见解，[38]表明，在测试期间简单地调整批处理归一化（BN）统计数据已经可以显著提高损坏数据的性能。这与[20]的精神一致，[20]先前建议在UDA的设置中更新BN统计数据。虽然该策略只需要前向传递，但TTA中的当前方法进一步执行后向传递，其中更新了模型权重。例如，[49]使BN参数的熵最小化。[57]最小化了所有参数的熵，并使用测试时间增加[16]来人为地增加批量大小。其他方法应用对比学习[4]，甚至在源预训练期间引入额外的自我监督损失，该损失随后被用于在测试期间执行自适应[1，2，24，41]。多样性正则化[21，33]是一种最近的方法，可以避免由置信最大化可能导致的平凡解的崩溃。虽然许多方法都假设有一批可用的测试数据，但其中一项工作集中于单个样本TTA[2，10，31，57]</p>]]></content>
    
    
    <summary type="html">题目：在线自适应学习算法研究
研究背景
DA:(59条消息) 域适应（domain adaptation）_点PY的博客-CSDN博客_domain adaptation

(59条消息) 迁移学习——Domain AdaptationPeanut范的博客-CSDN博客_domain adaptation

随着深度学习的不断发展，深度神经网络在各种应用中表现出良好的性能，特别是当测试样本来自与训练数据相同的分布时，网络预测的准确率可以达到非常高。然而，深度神经网络对于来自不同域数据的概括能力是有限的。当训练（源域）数据与测试（目标域）数据的分布不同时，模型预测的准确率会受到影响，这种情况被称</summary>
    
    
    
    <category term="计算机视觉" scheme="https://youngyyp.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    
    <category term="test time adaptation" scheme="https://youngyyp.github.io/tags/test-time-adaptation/"/>
    
  </entry>
  
  <entry>
    <title>TTA论文泛读</title>
    <link href="https://youngyyp.github.io/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/test_time_adaptation/%E6%B3%9B%E8%AF%BB/"/>
    <id>https://youngyyp.github.io/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/test_time_adaptation/%E6%B3%9B%E8%AF%BB/</id>
    <published>2022-11-07T01:49:41.000Z</published>
    <updated>2023-03-11T06:13:27.057Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SITA-Single-Image-Test-time-Adaptation"><a href="#SITA-Single-Image-Test-time-Adaptation" class="headerlink" title="SITA: Single Image Test-time Adaptation"></a>SITA: Single Image Test-time Adaptation</h2><p><strong>SITA协议：</strong></p><p>•不需要访问源训练数据。</p><p>•在推理过程中几乎和原始模型一样快。</p><p>•可以适应单个测试实例且不需要批处理。</p><p>•适应于一个测试实例的模型不应该在后续实例上使用。</p><p>•在测试时不需要超参数调优。</p><p>类似于BN [ 28 ]，我们的方法校准了批范数<strong>统计量</strong>。然而，由于从单个测试实例中估计它们是不可靠的(如[ 28 ]中所做的)，我们利用单个测试实例的某些<strong>增强</strong>来获得批范数统计量的稳健估计。此外，我们提出了一种基于<strong>熵</strong>的方法来估计每个测试实例的校准参数（无需像BN那样手动设置超参）</p><p>与TENT [ 31 ]和TTT [ 30 ]需要至少一个后向通道不同，我们的自适应方法只使用一个前向通道，因此(与直接使用源模型相比具有可比性)非常快</p><p><strong>方法：即对单张输入图像做数据增强，求多张图像的平均统计参数，然后再类似BN的方法动量式的更新</strong></p><p>（SITA: Single Image Test-time Adaptation）</p><p>最近的文献中出现了训练稳健模型[ 9,22,27]的工作。虽然这是一个可行的研究方向，但它需要修改培训过程。这可能并不总是可行的，因为出于隐私/存储方面的考虑，训练数据可能不再可用。所有可用的都是先前训练好的模型。因此，人们对测试时间自适应( Test Time Adaptive，TTA )产生了越来越大的兴趣，在不改变训练过程或要求访问原始训练数据的情况下，模型可以在测试时间进行自适应。</p><p>TTT [ 30 ]和TENT [ 31 ]是最近的一些工作，在预测时适应模型方面非常有效。TTT [ 30 ]使用辅助的自监督任务来训练源模型。然后对每个测试实例微调(通过自监督子网络)，进行多次迭代。使用TTT来适应一个新的模型，需要修改训练过程(添加自监督子网络)，因此需要访问源训练数据，而这些数据可能并不总是可用的。此外，多次后退需要相当长的时间，在延迟不可接受的情况下可能无法使用。另一方面，TENT [ 31 ]在不访问源数据的情况下，适应给定的训练模型。TENT假设数据以批次形式出现，批次规模通常比一大很多。</p><p>它考虑一个在线设置，其中适应当前实例(批处理)的模型用于适应后续实例(批处理)，这意味着模型具有关于直到某一点所看到的所有测试实例的信息。受TTT [ 30 ]和TENT [ 31 ]的成功和局限性的启发，我们列举了为现实的、具有挑战性的SITA协议所开发的算法的以下理想特性</p><p>•不需要访问源训练数据。•在推理过程中几乎和原始模型一样快。•可以适应单个测试实例且不需要批处理。•适应于测试实例的模型不应该在后续实例上使用。•在测试时不需要超参数调优。</p><p>第一个属性不仅与隐私/存储问题有关，还与速度有关，因为对源数据的任何重新训练都会使该方法变得缓慢。第三种属性背后的动机是潜伏期和隐私性。对于大批量的样本，我们不得不等待一定数量的样本，导致延迟，或者来自多个用户的俱乐部样本，这可能存在隐私问题。第四个特性是由于不同的测试实例/批次可能来自非常不同的分布，这会对模型的性能产生不利影响。图1比较了SITA设置与文献中其他TTA设置。进一步地，我们不能期望验证实例在测试时刻调整超参数。使用大批量的在线方法，如TENT [ 31 ]，通过一次评估一个腐败类型(单一分布)来提高性能，即重置下一个腐败类型的模型。通过混合CIFAR - 10 - C中的所有15种腐败类型进行评估[ 8 ]</p><p>除了TTT和TENT之外，最近的另一项工作BN [ 28 ]分析了校准神经网络批归一化统计量的能力，以使预测对对抗腐败具有鲁棒性。虽然不是特别针对SITA设置而设计，但BN仍然可以应用于SITA设置。BN的工作方式是将源统计量替换为源和目标统计量的加权组合，其中SITA设置中的目标统计量将根据给定的单个测试实例进行估计。这有两个挑战- -第一，单一的图像统计可能不够可靠，第二，校准权重对性能有很大的影响，不同的测试样本可能会有所不同。在文献[ 28 ]中，参数是经验设定的，这对于SITA是不实际的。</p><p>在这项工作中，我们提出了AugBN，它克服了上述限制，满足了单幅图像测试时间自适应( SITA )设置的各种需求。该方法不需要对源数据进行任何访问，一次适应一个测试实例，并将模型重置为给定的源模型以适应每一个新的测试实例。与BN [ 28 ]类似，我们的方法校准了批范数统计量。然而，由于从单个测试实例估计它们是不可靠的(如[ 28 ]中所做的)，我们利用单个测试实例的某些增强来获得批量范数统计量的稳健估计。此外，我们提出了一种基于熵的方法来估计每个测试实例的校准参数，而不是像文献[ 28 ]中那样将其视为一种设计选择。我们提出的无超参数方法在各种数据集的分类和分割中表现出一致的性能提升。</p><p>与TENT [ 31 ]和TTT [ 30 ]需要至少一个后向通道不同，我们的自适应方法只使用一个前向通道，因此具有相当快的(与直接使用源模型相比具有可比性)。本文的主要贡献总结如下：1 .我们形式化了单幅图像测试时间自适应( SITA )设置。2 .本文提出的无超参数方法在稠密和稀疏预测任务中都表现出快速自适应，仅有一个前向传递。3 .我们在分类和分割任务上都取得了SITA的最新性能。</p><p><strong>BatchNorm自适应。</strong>最近关于领域适应的文献提出，仅调整批次标准化层的统计信息，以适应测试分布。尽管这些工作并非针对TTA任务，但它们表明，调整标准化统计数据可以提供显著的性能提升，而不需要手工制作的损失函数。预测时间归一化（PTN）[21]使用当前测试批次的均值和方差作为批次规范层中的统计，而不是使用源数据的累积统计。如果测试批大小足够大，可以提供一个很好的估计值，那么这就相当有效。BN[28]使用了类似的方法，重点是提高对腐败的鲁棒性。源模型的累积统计信息与所有可用测试图像上累积的统计信息相结合，以在两种设置中达到可靠的估计：（i）在整个测试集可用的情况下完全自适应，以及（ii）在测试集的子集可用的情况下部分自适应。部分适配设置的特殊情况（一次只有一个图像可用）可被视为测试时间适配。我们的AugBN算法是对BN的显著改进。AugBN使用增强从单个图像获得批处理范数统计的鲁棒估计。此外，所提出的方法自动为每个单独的测试实例找到最佳校准参数，而无需任何验证数据集。这些改进使我们的方法更适用于具有挑战性的SITA设置，在各种数据集和任务中显示出一致的性能提高。最近在网上出现了一些与TTA相关的并行作品。You等人[34]使用具有CORE[13]损失的BN[28]来调整批次范数层的仿射参数。他们的方法需要反向传播和大批量，不符合SITA。Zhang等人[35]对每个测试样本使用32\/64个扩增样本来获得边际输出分布，并使用类似于TENT[31]的熵损失对其进行优化，这需要对每个样本进行昂贵的优化。Hu等人[11]对传入测试数据的统计数据以及扩增数据进行了在线估计。相比之下，我们的贡献是独一无二的，因为我们根据更难的SITA设置提出了一种轻量级的适应技术。此外，这些方法中的大多数都涉及超参数调整以获得最佳结果，而论文没有在测试时对其进行调整，因此在SITA设置中不现实。</p><h2 id="Continual-Test-Time-Domain-Adaptation"><a href="#Continual-Test-Time-Domain-Adaptation" class="headerlink" title="Continual Test-Time Domain Adaptation"></a>Continual Test-Time Domain Adaptation</h2><p>现实世界中的机器感知系统运行在非平稳且不断变化的环境中，目标域分布会随时间发生变化。现有的方法大多基于自训练和熵正则化，这些方法会受到这些非平稳环境的影响。</p><p>为了解决这些问题，我们提出了一种连续测试时间自适应方法( CoTTA )。首先，我们提出使用<strong>权重平均和增强平均</strong>的预测来减少误差累积，这两种方法往往更准确。另一方面，<strong>为了避免灾难性遗忘</strong>，我们提出在每次迭代过程中随机地将一小部分神经元恢复为源预训练的权重，以帮助长期保存源知识</p><p><img src="/2022/11/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/test_time_adaptation/%E6%B3%9B%E8%AF%BB/image-20221205152155979.png" alt="image-20221205152155979" style="zoom:30%;"></p><h2 id="Contrastive-Test-Time-Adaptation"><a href="#Contrastive-Test-Time-Adaptation" class="headerlink" title="Contrastive Test-Time Adaptation"></a>Contrastive Test-Time Adaptation</h2><p>我们提出了一种利用<strong>自监督对比学习</strong>来促进目标特征学习的新方法，以及一种具有显着去噪伪标签的改进的<strong>在线伪标签</strong>方案。对比学习任务与伪标签联合应用，对比与 MoCo 类似但使用源初始化编码器构造的正负对，并排除由伪标签指示的同类负对。同时，我们在线生成伪标签，并通过在目标特征空间中最近的邻居之间进行软投票来细化它们，这是通过维护内存队列来实现的。</p><h2 id="Exploiting-the-Intrinsic-Neighborhood-Structure-for-Source-free-Domain-Adaptation"><a href="#Exploiting-the-Intrinsic-Neighborhood-Structure-for-Source-free-Domain-Adaptation" class="headerlink" title="Exploiting the Intrinsic Neighborhood Structure for Source-free Domain Adaptation"></a>Exploiting the Intrinsic Neighborhood Structure for Source-free Domain Adaptation</h2><p>域适应( DA )旨在缓解源域和目标域之间的域偏移。大多数DA方法需要访问源数据，但这往往是不可能的(例如,由于数据隐私或知识产权)。在本文中，我们解决了具有挑战性的<strong>无源域适应( SFDA )</strong>问题，在没有源数据的情况下，源预训练模型被适应到目标域。我们的方法是基于这样的观察：目标数据可能不再与源域分类器对齐，仍然形成清晰的簇。我们通过定义目标数据的局部亲和度来捕获这种内在结构，并鼓励具有高局部亲和度的数据之间的标签一致性。我们观察到应该为互惠邻居分配更高的亲和力，并提出一种自正则化损失来减少噪声邻居的负面影响。此外，为了聚合更多上下文的信息，我们考虑了具有较小亲和力值的扩展邻域。在实验结果中我们验证了目标特征的内在结构是领域自适应的重要信息来源。我们证明了这种局部结构可以通过考虑局部邻居、互惠邻居和扩展邻居来有效地捕获。最后，我们在多个2D图像和3D点云识别数据集上实现了最先进的性能。</p><p>a source-free domain adaptation (SFDA) method 也就相当于TTA</p><h2 id="Improving-robustness-against-common-corruptions-by-covariate-shift-adaptation（BN）"><a href="#Improving-robustness-against-common-corruptions-by-covariate-shift-adaptation（BN）" class="headerlink" title="Improving robustness against common corruptions by covariate shift adaptation（BN）"></a>Improving robustness against common corruptions by covariate shift adaptation（BN）</h2><p>当今最先进的机器视觉模型容易受到图像损坏（如模糊或压缩伪影）的影响，从而限制了其在许多现实应用中的性能。我们在这里认为，衡量模型对常见损坏的健壮性的流行基准（如ImageNet-C）低估了许多（但不是所有）应用场景中的模型健壮性。关键的见解是，在许多场景中，有多个未标记的腐败示例可用，可以用于无监督的在线适应。用损坏图像的统计信息替换通过训练集上的批量归一化估计的激活统计信息，一致地提高了25个不同流行计算机视觉模型的鲁棒性。使用校正后的统计数据，ResNet-50在ImageNet-C上达到62.2%的mCE，而在不进行调整的情况下达到76.7%。凭借更强大的DeepAugment+AugMix模型，我们将最新ResNet50模型的技术水平从53.6%mCE提高到45.4%mCE。即使对单个样本进行调整，也可以提高ResNet-50和AugMix模型的鲁棒性，32个样本足以改善ResNet50架构的现有技术水平。我们认为，无论何时报告腐败基准和其他分布外一般化设置中的分数，都应包括经过调整的统计结果</p><p>已知当测试和训练数据从相同分布中采样时，深度神经网络（DNN）在独立和相同分布（i.i.d.）设置中表现良好。<br>然而，对于许多应用，这一假设并不成立。在医学成像中，如果使用不同的采集系统，X射线图像或组织切片将与训练数据不同。<br>在质量评估中，如果照明条件发生变化或相机上积聚了灰尘颗粒，则图像可能与训练数据不同。自动驾驶汽车可能面临罕见的天气条件，如沙尘暴或大冰雹。虽然人类视觉对这些偏差非常鲁棒[1]，但现代机器视觉模型通常对此类图像损坏敏感。<br>我们认为，当前对模型鲁棒性的评估低估了许多（但不是所有）真实场景中的性能。到目前为止，像ImageNet-C[IN-C；2]这样的流行图像损坏基准只关注临时场景，在这种场景中，测试模型对测试期间遇到的损坏没有任何先验知识，即使它多次遇到相同的损坏。在医学图像或质量保证的示例中，图像损坏不会随着样本而改变，而是在潜在的大量样本上持续存在。类似地，在相同的沙尘暴或冰雹期间，自动驾驶汽车将在连续的输入流中面临相同的天气条件。这些（未标记的）观察结果可以允许识别模型适应输入分布的变化。<br>这种无监督的自适应机制在域自适应（DA）领域进行了研究，该领域涉及将在一个域（源，这里是干净的图像）上训练的模型自适应到仅存在未标记样本的另一个域中（目标，这里是损坏的图像）。因此，来自域自适应的工具和方法可直接用于提高模型对常见损坏的鲁棒性，但迄今为止尚未报告关于流行基准的结果。这项工作的总体目标是鼓励当前不相交的领域适应和对常见腐败的鲁棒性之间的更强交互。<br>我们在此关注DA中的一种流行技术，即调整批处理归一化[BN；3]统计[4-6]。在计算机视觉中，BN是一种用于加速训练的流行技术，几乎存在于所有当前最先进的图像识别模型中。BN估计训练数据集的激活统计，并使用它们来规范网络中的中间激活。<br>通过设计，在训练时间期间获得的激活统计信息不反映在分布外设置（如损坏的图像）中测试时测试分布的统计信息。我们调查并证实了这样一个假设，即从干净图像到损坏图像的高水平分布变化在很大程度上表现为深度网络内部表示中的一阶矩和二阶矩的差异，这可以通过调整BN统计信息来缓解，即通过估计损坏图像上的BN统计信息。我们证明，这种简单的自适应可以大大提高对损坏图像的识别性能。</p><p>我们的贡献可以总结如下：•我们建议使用两个额外的性能度量来增强常见损坏的当前基准，这两个性能度量在对损坏的图像进行部分和完全无监督的适应之后测量鲁棒性。<br>•我们得出了与域适应的联系，并表明即使适应单个损坏的样本，也可以将在IN上训练的ResNet-50模型的基线性能从76:7%mCE提高到71:4%。鲁棒性随着适应样本的增加而增加，并收敛到62:2%的mCE。<br>•我们表明，在ImageNet[IN；7，8]上训练的各种普通模型的鲁棒性在适应后显著提高，有时在不适应的情况下接近IN-C上的当前最先进性能。<br>•同样，我们表明，当使用经过调整的统计数据时，IN-C上最先进的ResNet-50模型的鲁棒性会不断提高。我们超越了最佳的非适应性模型（52:3%mCE）近7%。<br>•我们展示了几个流行图像数据集的结果，并讨论了我们方法的通用性和局限性。<br>•我们证明，根据源和目标统计数据之间的Wasserstein距离，可以很好地预测非自适应模型的性能退化。我们提出了一个简单的理论模型，用于基于自适应参数来界定Wasserstein距离。</p><p><strong>纠正批量归一化统计数据，作为减少常见损坏引起的协变移位的有力基线</strong></p><p>我们建议使用域自适应自适应批量归一化统计的一个众所周知的工具[5，6]-作为一个简单的基线，以提高自适应评估场景中对图像损坏的鲁棒性。IN训练的模型通常使用批归一化[BN；3]，以便在训练期间更快地收敛和提高稳定性。在BN层内，第一和第二阶统计量c；在每个特征图c的空间维度和样本上估计激活张量zc的2c。然后通过减去平均值c并除以2c来归一化激活。在训练期间，每个批次估计c和2c。在评估期间，通常使用指数平均法对整个训练数据集的c和2c进行估计[10]。<br>使用训练期间获得的BN统计数据进行测试使模型决策具有确定性，但如果输入分布发生变化，则也存在问题。如果激活统计c；对于来自测试域的样本，2c改变，则特征图c的激活不再归一化为零均值和单位方差，打破了所有下游层所依赖的关键假设。<br>数学上，这个协变移位2可以形式化如下：定义1（协变移位，参见12，13）。具有密度ps:X Y！R+和密度为pt:X Y！R+，写为ps（x；y）=ps（x）ps（yjx）和pt（x；y）=pt（x）pt（yjx），如果ps（yj x）=pt（yj x）和ps（x（x）6=pt（x），其中y 2 y表示类标签。<br>去除协变移位。如果协变移位（Def.1）仅导致特征激活z＝f（x）的一阶矩和二阶矩的差异，则可以通过应用归一化来去除：</p><p>通过批处理归一化来减少模型中的协变移位特别简单：估计BN统计量t就足够了；从可用于自适应的测试数据中获取2 t（未标记）样本。如果可用样本的数量n太小，估计的统计数据将太不可靠。因此，我们利用统计数据；2s已经作为先验在训练数据集上计算，并且如下推断每个测试批次的测试统计，</p><h2 id="Training-on-Test-Data-with-Bayesian-Adaptation-for-Covariate-Shift"><a href="#Training-on-Test-Data-with-Bayesian-Adaptation-for-Covariate-Shift" class="headerlink" title="Training on Test Data with Bayesian Adaptation for Covariate Shift"></a>Training on Test Data with Bayesian Adaptation for Covariate Shift</h2><p>熵最小化。熵最小化已被用作许多环境中的自我监督目标，包括领域适应[Saito等人，2019，Carlucci等人，2017]、半监督学习[Grand代客和Bengio，2004，Bertherot等人，2019年，Lee和Lee，2013]和小样本学习[Dhillon等人，2015]。格兰德代和Bengio【2004】提出了一种概率模型，该模型结合了半监督学习的熵最小化（无分布转移），但仅使用概率模型来激励熵最小化作为MAP解决方案的正则化器，以提高准确性，这不会捕获任何认识上的不确定性。相反，我们关注的是分布转移下的测试时间自适应，这需要引入单独的训练时间和测试时间输入分布模型，并提供可靠的认知不确定性估计，这是我们通过贝叶斯边缘化获得的。我们还设计了一种近似推理方案，以允许在不访问训练数据的情况下进行有效的自适应。测试时间熵最小化（TENT）[Wang等人，2020a]使用熵最小化作为适应测试数据时的唯一目标（尽管没有明确的贝叶斯解释），并在不进一步访问训练数据的情况下进行调整，但仅旨在提高准确性，而不是不确定性估计。与格兰德代和Bengio[2004]相似，TENT仅使用熵最小化学习单个模型，而我们表明，对多个模型显式执行贝叶斯推断和边缘化对于有效的不确定性估计至关重要。TENT还启发性地提出，出于稳定性原因，仅在测试时调整网络中的特定参数，而我们使用学习的后验密度来解释训练集，允许我们调整整个网络，提高某些设置中的性能，并消除启发式设计决策的需要。</p><h2 id="Dataset-Shift类型"><a href="#Dataset-Shift类型" class="headerlink" title="Dataset Shift类型"></a><strong>Dataset Shift类型</strong></h2><p><a href="https://blog.csdn.net/lihe4151021/article/details/123763402">(63条消息) Covariate Shift(协变量偏移)_lihe2021的博客-CSDN博客_covariate shift</a></p><p>dataset shift的类型一般分为三种（以下的协变量因变量可以理解为数据中的x及对应标签y）：</p><ul><li>协变量偏移(Covariate Shift)</li></ul><p>协变量的变化，比如模型应用场景中环境、位置的变化等</p><blockquote><p>注：这里解释下此处的协变量，假设我们要拟合方程 y=wx，对于一个数据对（x，y）:<br>y为因变量，w为自变量，x为协变量。</p></blockquote><ul><li>先验概率偏移(Prior probability shift)</li></ul><p>因变量的变化，比如根据月份预测销售额的模型，用平时月份训练的模型预测销售高峰月份的销售额。输入仍然为月份没有变化，但训练集和实际场景中的因变量完全不一样（一般月份和销售高峰月份的销售额本就不一样）。</p><ul><li>概念偏移</li></ul><p>字面理解就是自变量和因变量之间的关系发生了改变。</p><p>21 </p><p>REVISITING BATCH NORMALIZATION FOR</p><p>PRACTICAL DOMAIN ADAPTATION</p><p>28</p>]]></content>
    
    
    <summary type="html">SITA: Single Image Test-time Adaptation
SITA协议：

•不需要访问源训练数据。

•在推理过程中几乎和原始模型一样快。

•可以适应单个测试实例且不需要批处理。

•适应于一个测试实例的模型不应该在后续实例上使用。

•在测试时不需要超参数调优。

类似于BN [ 28 ]，我们的方法校准了批范数统计量。然而，由于从单个测试实例中估计它们是不可靠的(如[ 28 ]中所做的)，我们利用单个测试实例的某些增强来获得批范数统计量的稳健估计。此外，我们提出了一种基于熵的方法来估计每个测试实例的校准参数（无需像BN那样手动设置超参）

与TENT [ 31 ]</summary>
    
    
    
    <category term="计算机视觉" scheme="https://youngyyp.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    
    <category term="test time adaptation" scheme="https://youngyyp.github.io/tags/test-time-adaptation/"/>
    
  </entry>
  
  <entry>
    <title>目标检测基础知识</title>
    <link href="https://youngyyp.github.io/2022/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://youngyyp.github.io/2022/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2022-10-26T07:49:06.000Z</published>
    <updated>2023-03-11T06:05:50.055Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>目标检测究竟发展到了什么程度? | CVHub带你聊一聊目标检测发展的这22年<a href="https://mp.weixin.qq.com/s/tZztakvzU9kl0nPbl8oCww">https://mp.weixin.qq.com/s/tZztakvzU9kl0nPbl8oCww</a></p><p>视频学习：<a href="https://space.bilibili.com/18161609/channel/seriesdetail?sid=244160">https://space.bilibili.com/18161609/channel/seriesdetail?sid=244160</a></p><h1 id="目标检测综述"><a href="#目标检测综述" class="headerlink" title="目标检测综述"></a>目标检测综述</h1><p><strong>Anchor based</strong>方法(一阶段，二阶段)和<strong>Anchor free</strong>方法</p><p><img src="/2022/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/640.jpeg" alt="图片"></p><h2 id="传统算法"><a href="#传统算法" class="headerlink" title="传统算法"></a>传统算法</h2><h3 id="HOG"><a href="#HOG" class="headerlink" title="HOG"></a>HOG</h3><p>HOG (Histogram of Oriented Gradients，方向梯度直方图) </p><p>1）主要思想：</p><p>在一副图像中，局部目标的表象和形状能够被梯度或边缘的方向密度分布很好地描述。其本质为：梯度的统计信息，而梯度主要存在于边缘的地方。</p><p>Hog+SVM做行人识别</p><p>2）实现方法：</p><p>把样本图像分割为若干个像素的单元，把梯度方向平均划分为多个区间，在每个单元里面对所有像素的梯度方向在各个方向区间进行直方图统计。最后把这些直方图组合起来，就可以构成特征描述符。</p><h3 id="传统方法的缺点"><a href="#传统方法的缺点" class="headerlink" title="传统方法的缺点"></a>传统方法的缺点</h3><p>1）基于滑动窗口的区域选择策略没有针对性,时间复杂度高,窗口冗余</p><p>2）手工设计的特征对于多样性的变化没有很好的鲁棒性</p><h3 id=""><a href="#" class="headerlink" title=" "></a> </h3><h2 id="二阶段anchor-based-RCNN系列"><a href="#二阶段anchor-based-RCNN系列" class="headerlink" title="二阶段anchor based - RCNN系列"></a>二阶段anchor based - RCNN系列</h2><p>二阶段检测算法主要分为以下两个阶段<br><strong>Stage1</strong>：从图像中生成region proposals<br><strong>Stage2</strong>：从region proposals生成最终的物体边框。</p><p>[RCNN系列]<a href="https://zhuanlan.zhihu.com/p/383167028">https://zhuanlan.zhihu.com/p/383167028</a></p><h3 id="RCNN"><a href="#RCNN" class="headerlink" title="RCNN"></a>RCNN</h3><p><img src="/2022/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/v2-2ebc675f93f886e008c222880200a274_1440w.webp" alt="img"></p><p>RCNN首先通过选择性搜索算法Selective Search从一组对象候选框中选择可能出现的对象框，然后将这些选择出来的对象框中的图像resize到某一固定尺寸的图像，并喂入到CNN模型和svm模型</p><h3 id="Fast-RCNN"><a href="#Fast-RCNN" class="headerlink" title="Fast RCNN"></a>Fast RCNN</h3><p>Fast R-CNN与R-CNN相比主要有以下几点不同：</p><ol><li>不再是对每一个候选区域单独提取特征，而是在提取整个图像的特征后，将每一个候选区域映射到特征图上</li><li>在R-CNN中为了统一输入使用了暴力缩放的方法，但在Fast R-CNN中，使用了RoI Pooling</li><li>使用了多任务的损失函数来简化R-CNN中的多阶段训练</li></ol><p>Fast RCNN不足：</p><ul><li><ul><li>候选区域的选取还是通过selective search，并且只能在CPU中运行这个算法，所以这个阶段浪费了大量时间。（这也是Faster RCNN改进的点）</li></ul></li></ul><h3 id="Faster-RCNN"><a href="#Faster-RCNN" class="headerlink" title="Faster RCNN"></a>Faster RCNN</h3><p>Faster RCNN就是RPN+Fast RCNN，具体算法步骤如下</p><ol><li>输入图像到特征提取器中，得到整张图片的feature map。</li><li>使用RPN生成候选框，并投影到feature map上，得到每一个候选区域的特征矩阵。</li><li>将每一个特征矩阵经过ROI Pooling缩放到7*7大小，然后经过展平处理后通过全连接层获得预测的分类以及候选区域位置偏移信息。</li></ol><p>Faster RCNN有三个部分需要训练，分别是特征提取器VGG16，RPN以及RoIHead</p><p><img src="/2022/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/v2-23115fb3ba6ff0cdd2fc2c51b354bc49_r.jpg" alt="img"></p><p>问：为什么要生成一堆anchor，再对它们进行修正，而不是一开始直接预测anchor的坐标？</p><p>答：其实YOLO v1就是没有使用anchor，直接对候选区域的坐标进行预测，但作者发现，效果并不好，主要是因为网络很难收敛，训练难度较大，所以YOLO的作者后来就将Faster RCC的RPN进行了相关的修改，加入到了YOLO v2中，效果有了显著的提高。</p><h2 id="一阶段anchor-based-YOLO系列"><a href="#一阶段anchor-based-YOLO系列" class="headerlink" title="一阶段anchor based - YOLO系列"></a>一阶段anchor based - YOLO系列</h2><p><img src="/2022/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/4cee39e6039ca5ee032f7c488c4b21f7.png" alt="img" style="zoom:50%;"></p><p>backbone <a href="https://blog.csdn.net/qq_38668236/article/details/127378254">https://blog.csdn.net/qq_38668236/article/details/127378254</a></p><p>neck <a href="https://blog.csdn.net/qq_38668236/article/details/127400899">https://blog.csdn.net/qq_38668236/article/details/127400899</a></p><p>head <a href="https://ac.nowcoder.com/discuss/1031260?type=0&amp;order=0&amp;page=1&amp;channel=-1">https://ac.nowcoder.com/discuss/1031260?type=0&amp;order=0&amp;page=1&amp;channel=-1</a></p><p>通俗易懂的YOLO系列（从V1到V5）模型解读：</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzU0NjgzMDIxMQ==&amp;mid=2247579969&amp;idx=3&amp;sn=2c4d437570b83b62bdc268cc94aab3ce&amp;chksm=fb545badcc23d2bb5185f4d5131dac466abc75abbd7022d1910916cc44cb9d1d1417173371cb&amp;scene=27">https://mp.weixin.qq.com/s?__biz=MzU0NjgzMDIxMQ==&amp;mid=2247579969&amp;idx=3&amp;sn=2c4d437570b83b62bdc268cc94aab3ce&amp;chksm=fb545badcc23d2bb5185f4d5131dac466abc75abbd7022d1910916cc44cb9d1d1417173371cb&amp;scene=27</a></p><p>总结：</p><p><strong>YOLO v1：直接回归位置。</strong></p><p><strong>YOLO v2：全流程多尺度方法。</strong></p><p><strong>YOLO v3：多尺度检测头，resblock darknet53</strong></p><p><strong>YOLO v4：cspdarknet53，spp，panet，tricks</strong></p><h3 id="YOLO-V1"><a href="#YOLO-V1" class="headerlink" title="YOLO V1"></a>YOLO V1</h3><p>YOLO的作者当时是这么想的：你分类器输出一个one-hot vector，那我把它换成(x,y,w,h,c)，c表示confidence置信度，把问题转化成一个回归问题，直接回归出Bounding Box的位置不就好了吗？</p><p>YOLOv1的缺陷：</p><ol><li>由于YOLOv1每个网格的检测框只有2个，对于密集型目标检测和小物体检测都不能很好适用。 </li><li>Inference时，当同一类物体出现的不常见的长宽比时泛化能力偏弱。 </li><li>由于损失函数的问题，定位误差是影响检测效果的主要原因，尤其是大小物体的处理上，还有待加强。</li></ol><h3 id="YOLO-V2"><a href="#YOLO-V2" class="headerlink" title="YOLO V2"></a>YOLO V2</h3><p>从<strong>直接预测位置</strong>改为<strong>预测一个偏移量</strong>，基于<strong>Anchor框的宽和高</strong>和<strong>grid的先验位置</strong>的<strong>偏移量</strong>，得到最终目标的位置，这种方法也叫作<strong>location prediction</strong>。</p><p>直接预测位置会导致神经网络在一开始训练时不稳定，使用偏移量会使得训练过程更加稳定</p><p>YOLO v2先对每个区域得到了5个anchor作为参考，这些anchor是通过GT聚类得到的</p><h3 id="YOLO-V3"><a href="#YOLO-V3" class="headerlink" title="YOLO V3"></a>YOLO V3</h3><p><img src="/2022/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/640-167817488587921.jpeg" alt="图片" style="zoom: 80%;"></p><p>分出了3个分支，分别为<strong>32倍下采样，16倍下采样，8倍下采样</strong>，分别取预测<strong>大，中，小目标</strong></p><h3 id="YOLO-V4"><a href="#YOLO-V4" class="headerlink" title="YOLO V4"></a>YOLO V4</h3><p>loss做了很多改进</p><p><img src="/2022/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20230307154723215.png" alt="image-20230307154723215" style="zoom:50%;"></p><p>YOLO v4对输入端进行了改进，主要包括<strong>数据增强Mosaic、cmBN、SAT自对抗训练</strong>，使得在卡不是很多时也能取得不错的结果。</p><p>YOLO v4具有极大的工程意义，将近年来深度学习领域最新研究的tricks都引入到了YOLO v4做验证测试</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><img src="/2022/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/640-167817537029823.jpeg" alt="图片" style="zoom:67%;"></p><p>为什么一代比一代检测头更加复杂呢？答案是：因为它们的提特征网络更加强大了，能够支撑起检测头做更加复杂的操作</p><h2 id="Anchor-Free-系列"><a href="#Anchor-Free-系列" class="headerlink" title="Anchor-Free 系列"></a>Anchor-Free 系列</h2><p>基于Anchor的检测算法由于Anchor太多导致计算复杂，及其所带来的大量超参数都会影响模型性能。近年的Anchor free技术则摒弃Anchor，通过确定关键点的方式来完成检测，大大减少了网络超参数的数量。</p><p> <strong>CornerNet</strong>是Anchor free技术路线的开创之作，该网络提出了一种新的对象检测方法，将网络对目标边界框的检测转化为一对关键点的检测(即左上角和右下角)，通过将对象检测为成对的关键点，而无需设计Anchor box作为先验框。</p><h2 id="基于transformer的目标检测"><a href="#基于transformer的目标检测" class="headerlink" title="基于transformer的目标检测"></a>基于transformer的目标检测</h2><h3 id="DETR"><a href="#DETR" class="headerlink" title="DETR"></a>DETR</h3><p>DETR 是 Facebook 团队于 2020 年提出的基于 Transformer 的端到端目标检测，没有非极大值抑制 NMS 后处理步骤、没有 anchor 等先验知识和约束，整个由网络实现端到端的目标检测实现，大大简化了目标检测的 pipeline</p><h2 id="目标检测常见指标"><a href="#目标检测常见指标" class="headerlink" title="目标检测常见指标"></a>目标检测常见指标</h2><p><img src="/2022/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20230307102437011-167815588021814.png" alt="image-20230307102437011"></p><p><img src="/2022/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/70.png" alt="在这里插入图片描述"></p><p>precision高可能会漏检，recall高可能出现很多冗余框</p><p>通过调整不同的confidence阈值来构造PR曲线；对于recall相同的点，只取precision最高的。如下：</p><p><img src="/2022/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20230307104915451.png" alt="image-20230307104915451"></p><h2 id="非极大值抑制"><a href="#非极大值抑制" class="headerlink" title="非极大值抑制"></a>非极大值抑制</h2><p><img src="/2022/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/20201020204029755.png#pic_center" alt="img" style="zoom:50%;"></p><p>我们可以看到，在图中对狗检测的有很多个框，0.9(a)，0.8(b)，0.7(c)，还有一个对猫的0.9(d)。 NMS极大值抑制就是在不影响猫的框的情况下去除对狗检测的其它得分小的框。 设置阈值th，用a分别对b,c,d,计算IOU值，将IOU值大于th的框都去除。</p><p><img src="/2022/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/v2-4e9fab45f2fd1a862dbb656296a6ae85_1440w.webp" alt="img" style="zoom:50%;"></p><p>面试的时候会问这样一个问题：NMS的适用情况是什么？</p><p>答：1图多目标检测时用NMS。</p><h2 id="遥感目标检测"><a href="#遥感目标检测" class="headerlink" title="遥感目标检测"></a>遥感目标检测</h2><p>近年来，随着遥感图像分辨率的提高，遥感图像目标检测(如飞机、船舶、油罐等的检测)成为研究热点，遥感图像目标检测具有广泛的应用，如军事侦查、灾害救援、城市交通管理等等。</p><p><img src="/2022/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/640-167817795102025.png" alt="图片" style="zoom:80%;"></p><p>遥感目标检测任务中存在的难点与挑战可简要概括为如下四点：</p><ol><li><p>遥感图像分辨率巨大<br> 如上图8-5(a)所示，由于遥感图像分辨率巨大，因此如何快速准确的检测出遥感目标仍然是一个挑战性的问题。</p></li><li><p>目标遮挡问题<br> 如上图8-5(b)所示，超过50%的目标被云雾所遮挡，因此目标遮挡问题也是遥感图像目标检测所面临的一个挑战。</p></li><li><p>域适应问题<br> 由不同传感器所捕获的遥感图像仍然存在很大差异。</p></li><li><p>目标小而密集，且任意旋转角</p></li></ol><p>不同传感器所捕获的遥感图像可能会出现以下差异：</p><ul><li><a href="https://www.zhihu.com/question/60276621">光谱差异：不同传感器的波长范围和波段数量可能不同，导致遥感图像的光谱信息和分辨率有所区别</a><a href="https://www.zhihu.com/question/60276621">1</a><a href="https://zhuanlan.zhihu.com/p/428385850">2</a>。</li><li><a href="https://zhuanlan.zhihu.com/p/428385850">空间差异：不同传感器的观测角度和分辨元大小可能不同，导致遥感图像的空间信息和分辨率有所区别</a><a href="https://zhuanlan.zhihu.com/p/428385850">2</a><a href="https://baike.baidu.com/item/多源遥感/22042704">3</a>。</li><li><a href="https://zhuanlan.zhihu.com/p/428385850">辐射差异：不同传感器的响应特性和校正方法可能不同，导致遥感图像的辐射信息和准确度有所区别</a><a href="https://zhuanlan.zhihu.com/p/428385850">2</a>。</li></ul><p><a href="https://www.zhihu.com/question/60276621">因此，在使用多源遥感图像进行分析时，需要进行一定的预处理，如配准、归一化、投影变换等，以消除或减小这些差异对结果的影响</a><a href="https://www.zhihu.com/question/60276621">1</a><a href="https://zhuanlan.zhihu.com/p/428385850">2</a>。</p><h2 id="领域自适应的目标检测"><a href="#领域自适应的目标检测" class="headerlink" title="领域自适应的目标检测"></a>领域自适应的目标检测</h2><p>任何目标检测算法的训练过程本质上都可以看成数据在独立同分布(i.i.d.)下的似然估计过程，而对于不满足(i.i.d.)的目标检测数据(特别是对于一些现实世界的应用程序)仍然是一个挑战，GAN在领域自适应方面已经显示出 了强大的效果，这对于目标检测技术来讲应该具有很大的促进作用。</p>]]></content>
    
    
    <summary type="html">参考资料
目标检测究竟发展到了什么程度? | CVHub带你聊一聊目标检测发展的这22年https://mp.weixin.qq.com/s/tZztakvzU9kl0nPbl8oCww

视频学习：https://space.bilibili.com/18161609/channel/seriesdetail?sid=244160

目标检测综述
Anchor based方法(一阶段，二阶段)和Anchor free方法



传统算法
HOG
HOG (Histogram of Oriented Gradients，方向梯度直方图) 

1）主要思想：

在一副图像中，局部目标的表象和形状</summary>
    
    
    
    <category term="计算机视觉" scheme="https://youngyyp.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    
    <category term="目标检测" scheme="https://youngyyp.github.io/tags/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>特征匹配论文</title>
    <link href="https://youngyyp.github.io/2022/04/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/Feature%20Matching/%E7%89%B9%E5%BE%81%E5%8C%B9%E9%85%8D/"/>
    <id>https://youngyyp.github.io/2022/04/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/Feature%20Matching/%E7%89%B9%E5%BE%81%E5%8C%B9%E9%85%8D/</id>
    <published>2022-04-10T08:52:31.000Z</published>
    <updated>2023-03-11T06:09:37.644Z</updated>
    
    <content type="html"><![CDATA[<h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="https://blog.csdn.net/weixin_43605641/article/details/122572446">(34条消息) 特征点检测与匹配相关论文梳理（持续更新）<em>秋山丶雪绪的博客-CSDN博客</em>特征匹配论文</a></p><p><a href="https://blog.csdn.net/weixin_43605641">(34条消息) 秋山丶雪绪的博客_CSDN博客-特征点检测与匹配,计算机系统结构,Python代码记录领域博主</a></p><p><a href="https://blog.csdn.net/qq_42708183/article/details/109133806">2020最强匹配综述—《Image Matching from Handcrafted to Deep Features: A Survey》阅读总结_喵呜喵喵喵的博客-CSDN博客</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzI3NDIyMjcyNg==&amp;mid=2652161460&amp;idx=1&amp;sn=4d2ee4e6973593e670ce460cc8eb590b&amp;chksm=f0f73e5dc780b74b1a4b68d6909708c261a539383720e245c2133f48753a8e871f98fd221912&amp;scene=21#wechat_redirect">CVPR2020图像匹配挑战赛，新数据集+新评测方法，SOTA正瑟瑟发抖！ (qq.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/387962855">CVPR 2021 | 图像匹配挑战赛总结 (SuperPoint + SuperGlue 缝缝补补还能再战一年) - 知乎 (zhihu.com)</a></p><p><a href="https://aijishu.com/a/1060000000224837">CVPR 2021 Image Matching 挑战赛双冠算法：揭秘AR导航背后的技术 - 极术社区 - 连接开发者与智能计算生态 (aijishu.com)</a></p><p><a href="https://github.com/ducha-aiki/pydegensac">ducha-aiki/pydegensac: Advanced RANSAC (DEGENSAC) with bells and whistles for H and F estimation (github.com)</a>（ransac的改进方案，效果更好）</p><p><a href="https://github.com/hpatches/hpatches-dataset">hpatches/hpatches-dataset： HPatches： Homography-patchs dataset. (github.com)</a></p><p><a href="https://blog.csdn.net/u010440456/article/details/81483145">非常详细的sift算法原理解析_可时间倒数了的博客-CSDN博客_sift</a></p><p><a href="https://blog.csdn.net/zddblog/article/details/7521424?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-2-7521424-blog-81483145.pc_relevant_multi_platform_whitelistv1&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-2-7521424-blog-81483145.pc_relevant_multi_platform_whitelistv1&amp;utm_relevant_index=3">SIFT算法详解_zddhub的博客-CSDN博客_sift</a></p><p><a href="https://wenku.baidu.com/view/1e08afaea3116c175f0e7cd184254b35eefd1aa4.html">关于softmax、argmax、softargmax - 百度文库 (baidu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/539740663">CVPR 2022 图像匹配挑战赛回顾 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/261310941">LearninCorrespondencefromtheCycleConsistencyofTime - 知乎 (zhihu.com)</a>中的一段话很有意思，如下：</p><p><img src="/2022/04/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/Feature%20Matching/%E7%89%B9%E5%BE%81%E5%8C%B9%E9%85%8D/image-20221018194006676.png" alt="image-20221018194006676"></p><p><a href="https://blog.csdn.net/qq_42722197/article/details/126775116">(54条消息) 巧解图像处理经典难题之图像配准_小白学视觉的博客-CSDN博客</a></p><h1 id="线特征匹配"><a href="#线特征匹配" class="headerlink" title="线特征匹配"></a>线特征匹配</h1><p>LBD，LSD 算法</p><p>An efficient and robust line segment matching approach based on LBD descriptor and pairwise geometric consistency</p><h2 id=""><a href="#" class="headerlink" title=" "></a> </h2><p><a href="https://github.com/lh9171338/Line-Segment-Detection-Papers">lh9171338/Line-Segment-Detection-Papers: Line segment detection papers (github.com)</a></p><h1 id="双目深度图（立体匹配）"><a href="#双目深度图（立体匹配）" class="headerlink" title="双目深度图（立体匹配）"></a>双目深度图（立体匹配）</h1><p>参考代码 <strong><a href="https://github.com/aliyasineser/stereoDepth">stereoDepth</a></strong>  在该代码的基础上加一个mask，输出mask内像素的平均距离</p><p>这个是只算了圆心点的距离，不过可以借鉴里面的mask<a href="https://github.com/niconielsen32/ComputerVision/blob/master/StereoVision/Python/main.py">ComputerVision/main.py at master · niconielsen32/ComputerVision (github.com)</a></p><h3 id="立体标定与立体校正"><a href="#立体标定与立体校正" class="headerlink" title="立体标定与立体校正"></a>立体标定与立体校正</h3><p><a href="https://blog.csdn.net/u011574296/article/details/73826420">(30条消息) 【立体视觉】双目立体标定与立体校正<em>ZealCV的博客-CSDN博客</em>立体校正</a></p><p><a href="https://aijishu.com/a/1060000000139727">来聊聊双目视觉的基础知识（视察深度、标定、立体匹配） - 极术社区 - 连接开发者与智能计算生态 (aijishu.com)</a></p><h1 id="Learning-Feature-Descriptors-using-Camera-Pose-Supervision"><a href="#Learning-Feature-Descriptors-using-Camera-Pose-Supervision" class="headerlink" title="Learning Feature Descriptors using Camera Pose Supervision"></a>Learning Feature Descriptors using Camera Pose Supervision</h1><p><img src="/2022/04/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/Feature%20Matching/%E7%89%B9%E5%BE%81%E5%8C%B9%E9%85%8D/image-20220530163756268.png" alt="image-20220530163756268"></p><p>caps预训练模型在mepdepth测试集测试结果</p><p><img src="/2022/04/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/Feature%20Matching/%E7%89%B9%E5%BE%81%E5%8C%B9%E9%85%8D/image-20220531171555853.png" alt="image-20220531171555853"></p><p>训练测试</p><pre class=" language-lang-python"><code class="language-lang-python">/home/young/anaconda3/envs/sgp/bin/python /home/young/code/SGP/code/perception2d/sgp.py --config /home/young/code/SGP/code/perception2d/config_sgp_sample.ymllabel root caps_pseudo_label/bs will be overwritten to enter teaching modeDataset size: 33370it [00:00, ?it/s][ WARN:0@1.508] global /io/opencv_contrib/modules/xfeatures2d/misc/python/shadow_sift.hpp (13) SIFT_create DEPRECATED: cv.xfeatures2d.SIFT_create() is deprecated due SIFT tranfer to the main repository. https://github.com/opencv/opencv/issues/167363337it [10:10,  5.47it/s]label root caps_pseudo_label/bs exists, entering learning mode.tensorboard log files are stored in caps_logs/bs/caps_sgpNo ckpts found, training from scratch.../home/young/anaconda3/envs/sgp/lib/python3.8/site-packages/torch/nn/functional.py:3981: UserWarning: Default grid_sample and affine_grid behavior has changed to align_corners=False since 1.3.0. Please specify align_corners=True if the old behavior is desired. See the documentation of grid_sample for details.  warnings.warn(/home/young/anaconda3/envs/sgp/lib/python3.8/site-packages/torch/_tensor.py:575: UserWarning: floor_divide is deprecated, and will be removed in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values.To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor'). (Triggered internally at  /tmp/pip-req-build-ex__3qls/aten/src/ATen/native/BinaryOps.cpp:467.)  return torch.floor_divide(self, other)caps_sgp | Step: 1, Loss: 0.16486caps_sgp | Step: 2, Loss: 0.08825caps_sgp | Step: 3, Loss: 0.19555caps_sgp | Step: 4, Loss: 0.10034caps_sgp | Step: 5, Loss: 0.08762saving ckpts caps_outputs/bs/caps_sgp/000005.pth...label root caps_pseudo_label/00 does not exist, entering teaching mode.0it [00:00, ?it/s]Reloading from caps_outputs/bs/caps_sgp/000005.pth, starting at step=53337it [16:32,  3.36it/s]label root caps_pseudo_label/00 exists, entering learning mode.tensorboard log files are stored in caps_logs/00/caps_sgpNo ckpts found, training from scratch...caps_sgp | Step: 1, Loss: 0.16329caps_sgp | Step: 2, Loss: 0.13774caps_sgp | Step: 3, Loss: 0.12036caps_sgp | Step: 4, Loss: 0.11186caps_sgp | Step: 5, Loss: 0.11013saving ckpts caps_outputs/00/caps_sgp/000005.pth...label root caps_pseudo_label/01 does not exist, entering teaching mode.Reloading from caps_outputs/00/caps_sgp/000005.pth, starting at step=53337it [16:32,  3.36it/s]label root caps_pseudo_label/01 exists, entering learning mode.tensorboard log files are stored in caps_logs/01/caps_sgpNo ckpts found, training from scratch...caps_sgp | Step: 1, Loss: 0.21352caps_sgp | Step: 2, Loss: 0.08665caps_sgp | Step: 3, Loss: 0.08282caps_sgp | Step: 4, Loss: 0.12540caps_sgp | Step: 5, Loss: 0.09589saving ckpts caps_outputs/01/caps_sgp/000005.pth...Process finished with exit code 0</code></pre><h1 id="论文中提到的问题"><a href="#论文中提到的问题" class="headerlink" title="论文中提到的问题"></a>论文中提到的问题</h1><ul><li>特征检测器比描述符更难学习，因为对于描述符的定义更为明确，而人们通常不清楚哪些点是有趣的，难以进行人为标记</li><li>特征点的性质：可区分和可重复<ul><li>1.能够发现图像中局部的具备区分度的信息；同一性约束（identity constraint）<br>  2.当场景经过多种变换后，仍能够重复检测出一致的特征；协变约束（covariant constraint ）</li></ul></li><li>虽然机器学习显然有助于照明不变性，但对于视点不变性，传统方法仍然具有惊人的竞争力。</li><li>监督学习不能很好地作用于关键点的检测，因为在这种情况下，监督学习的本质可以归结为复制现有的检测器，而不是发现更好、更容易的关键点。更有效的方向是自监督/无监督的学习</li><li>将网络的某部分用传统方法代替，能极大减少网络的参数量</li><li>数据集的质量&gt;数量？</li></ul><h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><p><a href="https://www.aiuai.cn/aifarm1697.html">度量学习 - 损失函数汇总[译] - AI备忘录 (aiuai.cn)</a></p><p><a href="https://zhuanlan.zhihu.com/p/80761087?from_voters_page=true">深度学习loss清单-未完待续 - 知乎 (zhihu.com)</a></p><h1 id="CVPR-2022-Image-matching-challenge"><a href="#CVPR-2022-Image-matching-challenge" class="headerlink" title="CVPR 2022 Image matching challenge"></a>CVPR 2022 Image matching challenge</h1><p>有用的点：</p><ul><li>对匹配聚类除去外点后框选bbox，再进行匹配</li></ul><p>无用的点：</p><ul><li>使用分割过滤移动对象</li><li></li></ul><h1 id="The-MegaDepth-Dataset"><a href="#The-MegaDepth-Dataset" class="headerlink" title="The MegaDepth Dataset"></a>The MegaDepth Dataset</h1><ul><li><p>colmap的sfm和mvs重建，得到原始深度图</p></li><li><p>采用更谨慎的mvs方法，更倾向于少而准确的真实数据，未计算出真实值的点输出为0</p></li><li>采用语义分割来增强和过滤深度图，过滤了天空部分的深度，以及移动物体的深度。</li></ul><p><strong>Multi-View Optimization of Local Feature Geometry 中提到：</strong></p><p>由于稀疏和密集重建之间的不一致，我们丢弃了 16 个场景。虽然 MegaDepth 数据集提供了跨多种视点和照明条件的训练数据，但由于密集重建中的错误，地面实况流有时不是完全准确的亚像素。因此，我们使用参考补丁的随机扭曲来合成具有完美几何流注释的相同条件补丁对，以生成合成对应物。</p><h1 id="Loftr"><a href="#Loftr" class="headerlink" title="Loftr"></a>Loftr</h1><pre><code>data_cfg_path="configs/data/megadepth_trainval_640.py"main_cfg_path="configs/loftr/outdoor/loftr_ds_dense.py"n_nodes=1n_gpus_per_node=4torch_num_workers=0batch_size=1pin_memory=trueexp_name="outdoor-ds-640"python -u ./train.py "configs/data/megadepth_trainval_640.py" "configs/loftr/outdoor/loftr_ds_dense.py" --exp_name="outdoor-ds-640" --gpus=4 --num_nodes=1 --accelerator="ddp" --batch_size=1 --num_workers=4 --pin_memory=true --check_val_every_n_epoch=1 --log_every_n_steps=1 --flush_logs_every_n_steps=1 --limit_val_batches=1. --num_sanity_val_steps=10 --benchmark=True --max_epochs=30</code></pre><h2 id="不变性与等变性"><a href="#不变性与等变性" class="headerlink" title="不变性与等变性"></a>不变性与等变性</h2><p><a href="https://zhuanlan.zhihu.com/p/427205686">https://zhuanlan.zhihu.com/p/427205686</a></p><p><img src="/2022/04/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/Feature%20Matching/%E7%89%B9%E5%BE%81%E5%8C%B9%E9%85%8D/image-20221013105241665.png" alt="image-20221013105241665"></p><p>描述符应该是不变性的，特征点位置应该是等变性的</p><h2 id="UnSuperPoint-End-to-End-Unsupervised-Interest-Point-Detector-And-Descriptor"><a href="#UnSuperPoint-End-to-End-Unsupervised-Interest-Point-Detector-And-Descriptor" class="headerlink" title="UnSuperPoint:End-to-End Unsupervised Interest Point Detector And Descriptor"></a>UnSuperPoint:End-to-End Unsupervised Interest Point Detector And Descriptor</h2><p><img src="/2022/04/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/Feature%20Matching/%E7%89%B9%E5%BE%81%E5%8C%B9%E9%85%8D/30262663c9724bd29d37ff71a4bb3557.png" alt="在这里插入图片描述"></p><p><img src="/2022/04/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/Feature%20Matching/%E7%89%B9%E5%BE%81%E5%8C%B9%E9%85%8D/87d6fe3e3daf4388bf782cdadee9af4f.png" alt="在这里插入图片描述"></p><h2 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h2><p>image matching, also known as image registration or correspondence</p><p>aims to identify then correspond the same or similar structure/content from two ormore images</p>]]></content>
    
    
    <summary type="html">相关链接
(34条消息) 特征点检测与匹配相关论文梳理（持续更新）秋山丶雪绪的博客-CSDN博客特征匹配论文

(34条消息) 秋山丶雪绪的博客_CSDN博客-特征点检测与匹配,计算机系统结构,Python代码记录领域博主

2020最强匹配综述—《Image Matching from Handcrafted to Deep Features: A Survey》阅读总结_喵呜喵喵喵的博客-CSDN博客

CVPR2020图像匹配挑战赛，新数据集+新评测方法，SOTA正瑟瑟发抖！ (qq.com)

CVPR 2021 | 图像匹配挑战赛总结 (SuperPoint + SuperGlue </summary>
    
    
    
    <category term="计算机视觉" scheme="https://youngyyp.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    
    <category term="图像匹配" scheme="https://youngyyp.github.io/tags/%E5%9B%BE%E5%83%8F%E5%8C%B9%E9%85%8D/"/>
    
  </entry>
  
</feed>
